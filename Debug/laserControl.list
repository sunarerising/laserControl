
laserControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f4c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080050d4  080050d4  000150d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050f4  080050f4  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  080050f4  080050f4  000150f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050fc  080050fc  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050fc  080050fc  000150fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005100  08005100  00015100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  08005104  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000398  200000b8  080051bc  000200b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000450  080051bc  00020450  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013069  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002aa0  00000000  00000000  00033151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001070  00000000  00000000  00035bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f60  00000000  00000000  00036c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022744  00000000  00000000  00037bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015010  00000000  00000000  0005a30c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd89e  00000000  00000000  0006f31c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013cbba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043b4  00000000  00000000  0013cc10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000b8 	.word	0x200000b8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080050bc 	.word	0x080050bc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000bc 	.word	0x200000bc
 80001c4:	080050bc 	.word	0x080050bc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <HAL_TIM_PeriodElapsedCallback>:

uint16_t CircleX[25] = {400,395,380,356,325,289,250,211,175,144,120,105,100,105,120,144,175,211,250,289,325,356,380,395};
uint16_t CircleY[25] = {250,289,325,356,380,395,400,395,380,356,325,289,250,211,175,144,120,105,100,105,120,144,175,211};


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	static int CircleCount;
	if(htim->Instance == TIM6){
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a1e      	ldr	r2, [pc, #120]	; (8000548 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80004ce:	4293      	cmp	r3, r2
 80004d0:	d135      	bne.n	800053e <HAL_TIM_PeriodElapsedCallback+0x7e>
		if(CircleCount <= 24){
 80004d2:	4b1e      	ldr	r3, [pc, #120]	; (800054c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	2b18      	cmp	r3, #24
 80004d8:	dc13      	bgt.n	8000502 <HAL_TIM_PeriodElapsedCallback+0x42>
			TargetPointX = CircleX[CircleCount];
 80004da:	4b1c      	ldr	r3, [pc, #112]	; (800054c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4a1c      	ldr	r2, [pc, #112]	; (8000550 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80004e0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80004e4:	4b1b      	ldr	r3, [pc, #108]	; (8000554 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80004e6:	801a      	strh	r2, [r3, #0]
			TargetPointY = CircleY[CircleCount];
 80004e8:	4b18      	ldr	r3, [pc, #96]	; (800054c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a1a      	ldr	r2, [pc, #104]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80004ee:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80004f2:	4b1a      	ldr	r3, [pc, #104]	; (800055c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80004f4:	801a      	strh	r2, [r3, #0]
//			DistanceIntegral_biasX = 0;
//			DistanceIntegral_biasY = 0;
			CircleCount++;
 80004f6:	4b15      	ldr	r3, [pc, #84]	; (800054c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	3301      	adds	r3, #1
 80004fc:	4a13      	ldr	r2, [pc, #76]	; (800054c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80004fe:	6013      	str	r3, [r2, #0]
			DistanceY_Kp = 0.1;
			DistanceY_Ki = 0.04;
			DistanceY_Kd = 0.01;
		}
	}
}
 8000500:	e01d      	b.n	800053e <HAL_TIM_PeriodElapsedCallback+0x7e>
			CircleCount= 0;
 8000502:	4b12      	ldr	r3, [pc, #72]	; (800054c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim6);
 8000508:	4815      	ldr	r0, [pc, #84]	; (8000560 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800050a:	f003 fb55 	bl	8003bb8 <HAL_TIM_Base_Stop_IT>
			TargetPointX = 250;
 800050e:	4b11      	ldr	r3, [pc, #68]	; (8000554 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000510:	22fa      	movs	r2, #250	; 0xfa
 8000512:	801a      	strh	r2, [r3, #0]
			TargetPointY = 250;
 8000514:	4b11      	ldr	r3, [pc, #68]	; (800055c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000516:	22fa      	movs	r2, #250	; 0xfa
 8000518:	801a      	strh	r2, [r3, #0]
			DistanceX_Kp = 0.1;
 800051a:	4b12      	ldr	r3, [pc, #72]	; (8000564 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800051c:	4a12      	ldr	r2, [pc, #72]	; (8000568 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800051e:	601a      	str	r2, [r3, #0]
			DistanceX_Ki = 0.05;
 8000520:	4b12      	ldr	r3, [pc, #72]	; (800056c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000522:	4a13      	ldr	r2, [pc, #76]	; (8000570 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000524:	601a      	str	r2, [r3, #0]
			DistanceX_Kd = 0.01;		//距离环控制函�??????(0.1 0.05 0)
 8000526:	4b13      	ldr	r3, [pc, #76]	; (8000574 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000528:	4a13      	ldr	r2, [pc, #76]	; (8000578 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800052a:	601a      	str	r2, [r3, #0]
			DistanceY_Kp = 0.1;
 800052c:	4b13      	ldr	r3, [pc, #76]	; (800057c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800052e:	4a0e      	ldr	r2, [pc, #56]	; (8000568 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000530:	601a      	str	r2, [r3, #0]
			DistanceY_Ki = 0.04;
 8000532:	4b13      	ldr	r3, [pc, #76]	; (8000580 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000534:	4a13      	ldr	r2, [pc, #76]	; (8000584 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000536:	601a      	str	r2, [r3, #0]
			DistanceY_Kd = 0.01;
 8000538:	4b13      	ldr	r3, [pc, #76]	; (8000588 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800053a:	4a0f      	ldr	r2, [pc, #60]	; (8000578 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800053c:	601a      	str	r2, [r3, #0]
}
 800053e:	bf00      	nop
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	40001000 	.word	0x40001000
 800054c:	200000d4 	.word	0x200000d4
 8000550:	20000000 	.word	0x20000000
 8000554:	20000068 	.word	0x20000068
 8000558:	20000034 	.word	0x20000034
 800055c:	2000006a 	.word	0x2000006a
 8000560:	200002bc 	.word	0x200002bc
 8000564:	2000006c 	.word	0x2000006c
 8000568:	3dcccccd 	.word	0x3dcccccd
 800056c:	20000070 	.word	0x20000070
 8000570:	3d4ccccd 	.word	0x3d4ccccd
 8000574:	20000074 	.word	0x20000074
 8000578:	3c23d70a 	.word	0x3c23d70a
 800057c:	20000078 	.word	0x20000078
 8000580:	2000007c 	.word	0x2000007c
 8000584:	3d23d70a 	.word	0x3d23d70a
 8000588:	20000080 	.word	0x20000080

0800058c <USER_UART_IRQHandler>:
//		}
//		HAL_UART_Receive_IT(&huart3,(uint8_t *)UART3_Rx_Buf,4);
//	}
//}

void USER_UART_IRQHandler(UART_HandleTypeDef *huart){
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){				//判断是否是串口1（！此处应写(huart->Instance == USART1)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a3a      	ldr	r2, [pc, #232]	; (8000684 <USER_UART_IRQHandler+0xf8>)
 800059a:	4293      	cmp	r3, r2
 800059c:	d169      	bne.n	8000672 <USER_UART_IRQHandler+0xe6>
		if(RESET != __HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE)){    //判断是否是空闲中断
 800059e:	4b3a      	ldr	r3, [pc, #232]	; (8000688 <USER_UART_IRQHandler+0xfc>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f003 0310 	and.w	r3, r3, #16
 80005a8:	2b10      	cmp	r3, #16
 80005aa:	d162      	bne.n	8000672 <USER_UART_IRQHandler+0xe6>
			__HAL_UART_CLEAR_IDLEFLAG(&huart1);                     //清楚空闲中断标志（否则会一直不断进入中断）
 80005ac:	2300      	movs	r3, #0
 80005ae:	60fb      	str	r3, [r7, #12]
 80005b0:	4b35      	ldr	r3, [pc, #212]	; (8000688 <USER_UART_IRQHandler+0xfc>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	4b33      	ldr	r3, [pc, #204]	; (8000688 <USER_UART_IRQHandler+0xfc>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	685b      	ldr	r3, [r3, #4]
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	68fb      	ldr	r3, [r7, #12]
			HAL_UART_DMAStop(&huart1);
 80005c2:	4831      	ldr	r0, [pc, #196]	; (8000688 <USER_UART_IRQHandler+0xfc>)
 80005c4:	f003 fe97 	bl	80042f6 <HAL_UART_DMAStop>
//			rx_len =  100 - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx);
			if(UART1_Rx_Buf[0] == 0xA1)
 80005c8:	4b30      	ldr	r3, [pc, #192]	; (800068c <USER_UART_IRQHandler+0x100>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	2ba1      	cmp	r3, #161	; 0xa1
 80005ce:	d117      	bne.n	8000600 <USER_UART_IRQHandler+0x74>
			{
				pointX = UART1_Rx_Buf[2]<<8 | UART1_Rx_Buf[1];
 80005d0:	4b2e      	ldr	r3, [pc, #184]	; (800068c <USER_UART_IRQHandler+0x100>)
 80005d2:	789b      	ldrb	r3, [r3, #2]
 80005d4:	021b      	lsls	r3, r3, #8
 80005d6:	b21a      	sxth	r2, r3
 80005d8:	4b2c      	ldr	r3, [pc, #176]	; (800068c <USER_UART_IRQHandler+0x100>)
 80005da:	785b      	ldrb	r3, [r3, #1]
 80005dc:	b21b      	sxth	r3, r3
 80005de:	4313      	orrs	r3, r2
 80005e0:	b21b      	sxth	r3, r3
 80005e2:	b29a      	uxth	r2, r3
 80005e4:	4b2a      	ldr	r3, [pc, #168]	; (8000690 <USER_UART_IRQHandler+0x104>)
 80005e6:	801a      	strh	r2, [r3, #0]
				pointY = UART1_Rx_Buf[4]<<8 | UART1_Rx_Buf[3];
 80005e8:	4b28      	ldr	r3, [pc, #160]	; (800068c <USER_UART_IRQHandler+0x100>)
 80005ea:	791b      	ldrb	r3, [r3, #4]
 80005ec:	021b      	lsls	r3, r3, #8
 80005ee:	b21a      	sxth	r2, r3
 80005f0:	4b26      	ldr	r3, [pc, #152]	; (800068c <USER_UART_IRQHandler+0x100>)
 80005f2:	78db      	ldrb	r3, [r3, #3]
 80005f4:	b21b      	sxth	r3, r3
 80005f6:	4313      	orrs	r3, r2
 80005f8:	b21b      	sxth	r3, r3
 80005fa:	b29a      	uxth	r2, r3
 80005fc:	4b25      	ldr	r3, [pc, #148]	; (8000694 <USER_UART_IRQHandler+0x108>)
 80005fe:	801a      	strh	r2, [r3, #0]
			}
			if(motorRun == 1){
 8000600:	4b25      	ldr	r3, [pc, #148]	; (8000698 <USER_UART_IRQHandler+0x10c>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2b01      	cmp	r3, #1
 8000606:	d12c      	bne.n	8000662 <USER_UART_IRQHandler+0xd6>
				AngleX = -DistanceX_FeedbackControl(TargetPointX , pointX)+1000;
 8000608:	4b24      	ldr	r3, [pc, #144]	; (800069c <USER_UART_IRQHandler+0x110>)
 800060a:	881b      	ldrh	r3, [r3, #0]
 800060c:	461a      	mov	r2, r3
 800060e:	4b20      	ldr	r3, [pc, #128]	; (8000690 <USER_UART_IRQHandler+0x104>)
 8000610:	881b      	ldrh	r3, [r3, #0]
 8000612:	4619      	mov	r1, r3
 8000614:	4610      	mov	r0, r2
 8000616:	f000 f84d 	bl	80006b4 <DistanceX_FeedbackControl>
 800061a:	4603      	mov	r3, r0
 800061c:	b29b      	uxth	r3, r3
 800061e:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8000622:	b29a      	uxth	r2, r3
 8000624:	4b1e      	ldr	r3, [pc, #120]	; (80006a0 <USER_UART_IRQHandler+0x114>)
 8000626:	801a      	strh	r2, [r3, #0]
				AngleY = -DistanceY_FeedbackControl(TargetPointY , pointY)+118;
 8000628:	4b1e      	ldr	r3, [pc, #120]	; (80006a4 <USER_UART_IRQHandler+0x118>)
 800062a:	881b      	ldrh	r3, [r3, #0]
 800062c:	461a      	mov	r2, r3
 800062e:	4b19      	ldr	r3, [pc, #100]	; (8000694 <USER_UART_IRQHandler+0x108>)
 8000630:	881b      	ldrh	r3, [r3, #0]
 8000632:	4619      	mov	r1, r3
 8000634:	4610      	mov	r0, r2
 8000636:	f000 f8d7 	bl	80007e8 <DistanceY_FeedbackControl>
 800063a:	4603      	mov	r3, r0
 800063c:	b29b      	uxth	r3, r3
 800063e:	f1c3 0376 	rsb	r3, r3, #118	; 0x76
 8000642:	b29a      	uxth	r2, r3
 8000644:	4b18      	ldr	r3, [pc, #96]	; (80006a8 <USER_UART_IRQHandler+0x11c>)
 8000646:	801a      	strh	r2, [r3, #0]
				AngleX_Limited();
 8000648:	f000 f968 	bl	800091c <AngleX_Limited>
				AngleY_Limited();
 800064c:	f000 f978 	bl	8000940 <AngleY_Limited>
				servoRotate(AngleX, AngleY);
 8000650:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <USER_UART_IRQHandler+0x114>)
 8000652:	881b      	ldrh	r3, [r3, #0]
 8000654:	4a14      	ldr	r2, [pc, #80]	; (80006a8 <USER_UART_IRQHandler+0x11c>)
 8000656:	8812      	ldrh	r2, [r2, #0]
 8000658:	4611      	mov	r1, r2
 800065a:	4618      	mov	r0, r3
 800065c:	f000 fec6 	bl	80013ec <servoRotate>
 8000660:	e007      	b.n	8000672 <USER_UART_IRQHandler+0xe6>
			}
			else{
				DistanceIntegral_biasX = 0;
 8000662:	4b12      	ldr	r3, [pc, #72]	; (80006ac <USER_UART_IRQHandler+0x120>)
 8000664:	f04f 0200 	mov.w	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
				DistanceIntegral_biasY = 0;
 800066a:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <USER_UART_IRQHandler+0x124>)
 800066c:	f04f 0200 	mov.w	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
			}

		}
	}
	HAL_UART_Receive_DMA(&huart1,(uint8_t *)UART1_Rx_Buf,100);
 8000672:	2264      	movs	r2, #100	; 0x64
 8000674:	4905      	ldr	r1, [pc, #20]	; (800068c <USER_UART_IRQHandler+0x100>)
 8000676:	4804      	ldr	r0, [pc, #16]	; (8000688 <USER_UART_IRQHandler+0xfc>)
 8000678:	f003 fe0d 	bl	8004296 <HAL_UART_Receive_DMA>
}
 800067c:	bf00      	nop
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40011000 	.word	0x40011000
 8000688:	20000408 	.word	0x20000408
 800068c:	200000f0 	.word	0x200000f0
 8000690:	20000154 	.word	0x20000154
 8000694:	20000156 	.word	0x20000156
 8000698:	200001b4 	.word	0x200001b4
 800069c:	20000068 	.word	0x20000068
 80006a0:	2000021e 	.word	0x2000021e
 80006a4:	2000006a 	.word	0x2000006a
 80006a8:	20000222 	.word	0x20000222
 80006ac:	2000015c 	.word	0x2000015c
 80006b0:	20000158 	.word	0x20000158

080006b4 <DistanceX_FeedbackControl>:


int DistanceX_FeedbackControl(int TargetDistance, int CurrentDistance){
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	6039      	str	r1, [r7, #0]
	static float DistanceBiasX, PWMX, DistanceLast_BiasX;
	DistanceBiasX = TargetDistance - CurrentDistance;
 80006be:	687a      	ldr	r2, [r7, #4]
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	1ad3      	subs	r3, r2, r3
 80006c4:	ee07 3a90 	vmov	s15, r3
 80006c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006cc:	4b3b      	ldr	r3, [pc, #236]	; (80007bc <DistanceX_FeedbackControl+0x108>)
 80006ce:	edc3 7a00 	vstr	s15, [r3]
	if(DistanceBiasX <-10 || DistanceBiasX >10 ){
 80006d2:	4b3a      	ldr	r3, [pc, #232]	; (80007bc <DistanceX_FeedbackControl+0x108>)
 80006d4:	edd3 7a00 	vldr	s15, [r3]
 80006d8:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 80006dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006e4:	d409      	bmi.n	80006fa <DistanceX_FeedbackControl+0x46>
 80006e6:	4b35      	ldr	r3, [pc, #212]	; (80007bc <DistanceX_FeedbackControl+0x108>)
 80006e8:	edd3 7a00 	vldr	s15, [r3]
 80006ec:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80006f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006f8:	dd0b      	ble.n	8000712 <DistanceX_FeedbackControl+0x5e>
		DistanceIntegral_biasX += DistanceLast_BiasX;
 80006fa:	4b31      	ldr	r3, [pc, #196]	; (80007c0 <DistanceX_FeedbackControl+0x10c>)
 80006fc:	ed93 7a00 	vldr	s14, [r3]
 8000700:	4b30      	ldr	r3, [pc, #192]	; (80007c4 <DistanceX_FeedbackControl+0x110>)
 8000702:	edd3 7a00 	vldr	s15, [r3]
 8000706:	ee77 7a27 	vadd.f32	s15, s14, s15
 800070a:	4b2d      	ldr	r3, [pc, #180]	; (80007c0 <DistanceX_FeedbackControl+0x10c>)
 800070c:	edc3 7a00 	vstr	s15, [r3]
 8000710:	e003      	b.n	800071a <DistanceX_FeedbackControl+0x66>
	}
	else{
		DistanceBiasX = 0;
 8000712:	4b2a      	ldr	r3, [pc, #168]	; (80007bc <DistanceX_FeedbackControl+0x108>)
 8000714:	f04f 0200 	mov.w	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
	}

	DistanceIntegral_biasX=DistanceIntegral_biasX>1500?1500:(DistanceIntegral_biasX<(-1500)?(-1500):DistanceIntegral_biasX);
 800071a:	4b29      	ldr	r3, [pc, #164]	; (80007c0 <DistanceX_FeedbackControl+0x10c>)
 800071c:	edd3 7a00 	vldr	s15, [r3]
 8000720:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80007c8 <DistanceX_FeedbackControl+0x114>
 8000724:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800072c:	dd01      	ble.n	8000732 <DistanceX_FeedbackControl+0x7e>
 800072e:	4b27      	ldr	r3, [pc, #156]	; (80007cc <DistanceX_FeedbackControl+0x118>)
 8000730:	e00d      	b.n	800074e <DistanceX_FeedbackControl+0x9a>
 8000732:	4b23      	ldr	r3, [pc, #140]	; (80007c0 <DistanceX_FeedbackControl+0x10c>)
 8000734:	edd3 7a00 	vldr	s15, [r3]
 8000738:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80007d0 <DistanceX_FeedbackControl+0x11c>
 800073c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000744:	d501      	bpl.n	800074a <DistanceX_FeedbackControl+0x96>
 8000746:	4b23      	ldr	r3, [pc, #140]	; (80007d4 <DistanceX_FeedbackControl+0x120>)
 8000748:	e001      	b.n	800074e <DistanceX_FeedbackControl+0x9a>
 800074a:	4b1d      	ldr	r3, [pc, #116]	; (80007c0 <DistanceX_FeedbackControl+0x10c>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a1c      	ldr	r2, [pc, #112]	; (80007c0 <DistanceX_FeedbackControl+0x10c>)
 8000750:	6013      	str	r3, [r2, #0]

	PWMX = DistanceX_Kp * DistanceBiasX + DistanceX_Ki * DistanceIntegral_biasX + DistanceX_Kd * ( DistanceBiasX - DistanceLast_BiasX );
 8000752:	4b21      	ldr	r3, [pc, #132]	; (80007d8 <DistanceX_FeedbackControl+0x124>)
 8000754:	ed93 7a00 	vldr	s14, [r3]
 8000758:	4b18      	ldr	r3, [pc, #96]	; (80007bc <DistanceX_FeedbackControl+0x108>)
 800075a:	edd3 7a00 	vldr	s15, [r3]
 800075e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000762:	4b1e      	ldr	r3, [pc, #120]	; (80007dc <DistanceX_FeedbackControl+0x128>)
 8000764:	edd3 6a00 	vldr	s13, [r3]
 8000768:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <DistanceX_FeedbackControl+0x10c>)
 800076a:	edd3 7a00 	vldr	s15, [r3]
 800076e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000772:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000776:	4b11      	ldr	r3, [pc, #68]	; (80007bc <DistanceX_FeedbackControl+0x108>)
 8000778:	edd3 6a00 	vldr	s13, [r3]
 800077c:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <DistanceX_FeedbackControl+0x110>)
 800077e:	edd3 7a00 	vldr	s15, [r3]
 8000782:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000786:	4b16      	ldr	r3, [pc, #88]	; (80007e0 <DistanceX_FeedbackControl+0x12c>)
 8000788:	edd3 7a00 	vldr	s15, [r3]
 800078c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000790:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000794:	4b13      	ldr	r3, [pc, #76]	; (80007e4 <DistanceX_FeedbackControl+0x130>)
 8000796:	edc3 7a00 	vstr	s15, [r3]
	DistanceLast_BiasX = DistanceBiasX;
 800079a:	4b08      	ldr	r3, [pc, #32]	; (80007bc <DistanceX_FeedbackControl+0x108>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a09      	ldr	r2, [pc, #36]	; (80007c4 <DistanceX_FeedbackControl+0x110>)
 80007a0:	6013      	str	r3, [r2, #0]
	return PWMX;
 80007a2:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <DistanceX_FeedbackControl+0x130>)
 80007a4:	edd3 7a00 	vldr	s15, [r3]
 80007a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007ac:	ee17 3a90 	vmov	r3, s15
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	370c      	adds	r7, #12
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr
 80007bc:	200000d8 	.word	0x200000d8
 80007c0:	2000015c 	.word	0x2000015c
 80007c4:	200000dc 	.word	0x200000dc
 80007c8:	44bb8000 	.word	0x44bb8000
 80007cc:	44bb8000 	.word	0x44bb8000
 80007d0:	c4bb8000 	.word	0xc4bb8000
 80007d4:	c4bb8000 	.word	0xc4bb8000
 80007d8:	2000006c 	.word	0x2000006c
 80007dc:	20000070 	.word	0x20000070
 80007e0:	20000074 	.word	0x20000074
 80007e4:	200000e0 	.word	0x200000e0

080007e8 <DistanceY_FeedbackControl>:

int DistanceY_FeedbackControl(int TargetDistance, int CurrentDistance){
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	6039      	str	r1, [r7, #0]
	static float DistanceBiasY, PWMY, DistanceLast_BiasY;
	DistanceBiasY = TargetDistance - CurrentDistance;
 80007f2:	687a      	ldr	r2, [r7, #4]
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	1ad3      	subs	r3, r2, r3
 80007f8:	ee07 3a90 	vmov	s15, r3
 80007fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000800:	4b3b      	ldr	r3, [pc, #236]	; (80008f0 <DistanceY_FeedbackControl+0x108>)
 8000802:	edc3 7a00 	vstr	s15, [r3]
	if(DistanceBiasY <-10 || DistanceBiasY >10 ){
 8000806:	4b3a      	ldr	r3, [pc, #232]	; (80008f0 <DistanceY_FeedbackControl+0x108>)
 8000808:	edd3 7a00 	vldr	s15, [r3]
 800080c:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8000810:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000818:	d409      	bmi.n	800082e <DistanceY_FeedbackControl+0x46>
 800081a:	4b35      	ldr	r3, [pc, #212]	; (80008f0 <DistanceY_FeedbackControl+0x108>)
 800081c:	edd3 7a00 	vldr	s15, [r3]
 8000820:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000824:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800082c:	dd0b      	ble.n	8000846 <DistanceY_FeedbackControl+0x5e>
		DistanceIntegral_biasY += DistanceLast_BiasY;
 800082e:	4b31      	ldr	r3, [pc, #196]	; (80008f4 <DistanceY_FeedbackControl+0x10c>)
 8000830:	ed93 7a00 	vldr	s14, [r3]
 8000834:	4b30      	ldr	r3, [pc, #192]	; (80008f8 <DistanceY_FeedbackControl+0x110>)
 8000836:	edd3 7a00 	vldr	s15, [r3]
 800083a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800083e:	4b2d      	ldr	r3, [pc, #180]	; (80008f4 <DistanceY_FeedbackControl+0x10c>)
 8000840:	edc3 7a00 	vstr	s15, [r3]
 8000844:	e003      	b.n	800084e <DistanceY_FeedbackControl+0x66>
	}
	else{
		DistanceBiasY = 0;
 8000846:	4b2a      	ldr	r3, [pc, #168]	; (80008f0 <DistanceY_FeedbackControl+0x108>)
 8000848:	f04f 0200 	mov.w	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
	}


	DistanceIntegral_biasY=DistanceIntegral_biasY>1500?1500:(DistanceIntegral_biasY<(-1500)?(-1500):DistanceIntegral_biasY);
 800084e:	4b29      	ldr	r3, [pc, #164]	; (80008f4 <DistanceY_FeedbackControl+0x10c>)
 8000850:	edd3 7a00 	vldr	s15, [r3]
 8000854:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80008fc <DistanceY_FeedbackControl+0x114>
 8000858:	eef4 7ac7 	vcmpe.f32	s15, s14
 800085c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000860:	dd01      	ble.n	8000866 <DistanceY_FeedbackControl+0x7e>
 8000862:	4b27      	ldr	r3, [pc, #156]	; (8000900 <DistanceY_FeedbackControl+0x118>)
 8000864:	e00d      	b.n	8000882 <DistanceY_FeedbackControl+0x9a>
 8000866:	4b23      	ldr	r3, [pc, #140]	; (80008f4 <DistanceY_FeedbackControl+0x10c>)
 8000868:	edd3 7a00 	vldr	s15, [r3]
 800086c:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8000904 <DistanceY_FeedbackControl+0x11c>
 8000870:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000878:	d501      	bpl.n	800087e <DistanceY_FeedbackControl+0x96>
 800087a:	4b23      	ldr	r3, [pc, #140]	; (8000908 <DistanceY_FeedbackControl+0x120>)
 800087c:	e001      	b.n	8000882 <DistanceY_FeedbackControl+0x9a>
 800087e:	4b1d      	ldr	r3, [pc, #116]	; (80008f4 <DistanceY_FeedbackControl+0x10c>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4a1c      	ldr	r2, [pc, #112]	; (80008f4 <DistanceY_FeedbackControl+0x10c>)
 8000884:	6013      	str	r3, [r2, #0]

	PWMY = DistanceY_Kp * DistanceBiasY + DistanceY_Ki * DistanceIntegral_biasY + DistanceY_Kd * ( DistanceBiasY - DistanceLast_BiasY );
 8000886:	4b21      	ldr	r3, [pc, #132]	; (800090c <DistanceY_FeedbackControl+0x124>)
 8000888:	ed93 7a00 	vldr	s14, [r3]
 800088c:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <DistanceY_FeedbackControl+0x108>)
 800088e:	edd3 7a00 	vldr	s15, [r3]
 8000892:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000896:	4b1e      	ldr	r3, [pc, #120]	; (8000910 <DistanceY_FeedbackControl+0x128>)
 8000898:	edd3 6a00 	vldr	s13, [r3]
 800089c:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <DistanceY_FeedbackControl+0x10c>)
 800089e:	edd3 7a00 	vldr	s15, [r3]
 80008a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80008a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <DistanceY_FeedbackControl+0x108>)
 80008ac:	edd3 6a00 	vldr	s13, [r3]
 80008b0:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <DistanceY_FeedbackControl+0x110>)
 80008b2:	edd3 7a00 	vldr	s15, [r3]
 80008b6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80008ba:	4b16      	ldr	r3, [pc, #88]	; (8000914 <DistanceY_FeedbackControl+0x12c>)
 80008bc:	edd3 7a00 	vldr	s15, [r3]
 80008c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80008c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008c8:	4b13      	ldr	r3, [pc, #76]	; (8000918 <DistanceY_FeedbackControl+0x130>)
 80008ca:	edc3 7a00 	vstr	s15, [r3]
	DistanceLast_BiasY = DistanceBiasY;
 80008ce:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <DistanceY_FeedbackControl+0x108>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4a09      	ldr	r2, [pc, #36]	; (80008f8 <DistanceY_FeedbackControl+0x110>)
 80008d4:	6013      	str	r3, [r2, #0]
	return PWMY;
 80008d6:	4b10      	ldr	r3, [pc, #64]	; (8000918 <DistanceY_FeedbackControl+0x130>)
 80008d8:	edd3 7a00 	vldr	s15, [r3]
 80008dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008e0:	ee17 3a90 	vmov	r3, s15
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	370c      	adds	r7, #12
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr
 80008f0:	200000e4 	.word	0x200000e4
 80008f4:	20000158 	.word	0x20000158
 80008f8:	200000e8 	.word	0x200000e8
 80008fc:	44bb8000 	.word	0x44bb8000
 8000900:	44bb8000 	.word	0x44bb8000
 8000904:	c4bb8000 	.word	0xc4bb8000
 8000908:	c4bb8000 	.word	0xc4bb8000
 800090c:	20000078 	.word	0x20000078
 8000910:	2000007c 	.word	0x2000007c
 8000914:	20000080 	.word	0x20000080
 8000918:	200000ec 	.word	0x200000ec

0800091c <AngleX_Limited>:

void AngleX_Limited(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
	if(AngleX>2000)
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <AngleX_Limited+0x20>)
 8000922:	881b      	ldrh	r3, [r3, #0]
 8000924:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000928:	d903      	bls.n	8000932 <AngleX_Limited+0x16>
		AngleX = 2000;
 800092a:	4b04      	ldr	r3, [pc, #16]	; (800093c <AngleX_Limited+0x20>)
 800092c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000930:	801a      	strh	r2, [r3, #0]
	if(AngleX<0)
		AngleX = 0;
}
 8000932:	bf00      	nop
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr
 800093c:	2000021e 	.word	0x2000021e

08000940 <AngleY_Limited>:

void AngleY_Limited(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
	if(AngleY>214)
 8000944:	4b09      	ldr	r3, [pc, #36]	; (800096c <AngleY_Limited+0x2c>)
 8000946:	881b      	ldrh	r3, [r3, #0]
 8000948:	2bd6      	cmp	r3, #214	; 0xd6
 800094a:	d902      	bls.n	8000952 <AngleY_Limited+0x12>
		AngleY = 214;
 800094c:	4b07      	ldr	r3, [pc, #28]	; (800096c <AngleY_Limited+0x2c>)
 800094e:	22d6      	movs	r2, #214	; 0xd6
 8000950:	801a      	strh	r2, [r3, #0]
	if(AngleY<118)
 8000952:	4b06      	ldr	r3, [pc, #24]	; (800096c <AngleY_Limited+0x2c>)
 8000954:	881b      	ldrh	r3, [r3, #0]
 8000956:	2b75      	cmp	r3, #117	; 0x75
 8000958:	d802      	bhi.n	8000960 <AngleY_Limited+0x20>
		AngleY = 118;
 800095a:	4b04      	ldr	r3, [pc, #16]	; (800096c <AngleY_Limited+0x2c>)
 800095c:	2276      	movs	r2, #118	; 0x76
 800095e:	801a      	strh	r2, [r3, #0]

}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	20000222 	.word	0x20000222

08000970 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	4b10      	ldr	r3, [pc, #64]	; (80009bc <MX_DMA_Init+0x4c>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a0f      	ldr	r2, [pc, #60]	; (80009bc <MX_DMA_Init+0x4c>)
 8000980:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b0d      	ldr	r3, [pc, #52]	; (80009bc <MX_DMA_Init+0x4c>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000992:	2200      	movs	r2, #0
 8000994:	2100      	movs	r1, #0
 8000996:	203a      	movs	r0, #58	; 0x3a
 8000998:	f001 f9a3 	bl	8001ce2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800099c:	203a      	movs	r0, #58	; 0x3a
 800099e:	f001 f9bc 	bl	8001d1a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2100      	movs	r1, #0
 80009a6:	2046      	movs	r0, #70	; 0x46
 80009a8:	f001 f99b 	bl	8001ce2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80009ac:	2046      	movs	r0, #70	; 0x46
 80009ae:	f001 f9b4 	bl	8001d1a <HAL_NVIC_EnableIRQ>

}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40023800 	.word	0x40023800

080009c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08c      	sub	sp, #48	; 0x30
 80009c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]
 80009d2:	60da      	str	r2, [r3, #12]
 80009d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	61bb      	str	r3, [r7, #24]
 80009da:	4b4f      	ldr	r3, [pc, #316]	; (8000b18 <MX_GPIO_Init+0x158>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a4e      	ldr	r2, [pc, #312]	; (8000b18 <MX_GPIO_Init+0x158>)
 80009e0:	f043 0310 	orr.w	r3, r3, #16
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b4c      	ldr	r3, [pc, #304]	; (8000b18 <MX_GPIO_Init+0x158>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0310 	and.w	r3, r3, #16
 80009ee:	61bb      	str	r3, [r7, #24]
 80009f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	617b      	str	r3, [r7, #20]
 80009f6:	4b48      	ldr	r3, [pc, #288]	; (8000b18 <MX_GPIO_Init+0x158>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a47      	ldr	r2, [pc, #284]	; (8000b18 <MX_GPIO_Init+0x158>)
 80009fc:	f043 0304 	orr.w	r3, r3, #4
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b45      	ldr	r3, [pc, #276]	; (8000b18 <MX_GPIO_Init+0x158>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0304 	and.w	r3, r3, #4
 8000a0a:	617b      	str	r3, [r7, #20]
 8000a0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	613b      	str	r3, [r7, #16]
 8000a12:	4b41      	ldr	r3, [pc, #260]	; (8000b18 <MX_GPIO_Init+0x158>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a40      	ldr	r2, [pc, #256]	; (8000b18 <MX_GPIO_Init+0x158>)
 8000a18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b3e      	ldr	r3, [pc, #248]	; (8000b18 <MX_GPIO_Init+0x158>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a26:	613b      	str	r3, [r7, #16]
 8000a28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	4b3a      	ldr	r3, [pc, #232]	; (8000b18 <MX_GPIO_Init+0x158>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	4a39      	ldr	r2, [pc, #228]	; (8000b18 <MX_GPIO_Init+0x158>)
 8000a34:	f043 0308 	orr.w	r3, r3, #8
 8000a38:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3a:	4b37      	ldr	r3, [pc, #220]	; (8000b18 <MX_GPIO_Init+0x158>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	f003 0308 	and.w	r3, r3, #8
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	60bb      	str	r3, [r7, #8]
 8000a4a:	4b33      	ldr	r3, [pc, #204]	; (8000b18 <MX_GPIO_Init+0x158>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a32      	ldr	r2, [pc, #200]	; (8000b18 <MX_GPIO_Init+0x158>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b30      	ldr	r3, [pc, #192]	; (8000b18 <MX_GPIO_Init+0x158>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	60bb      	str	r3, [r7, #8]
 8000a60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	607b      	str	r3, [r7, #4]
 8000a66:	4b2c      	ldr	r3, [pc, #176]	; (8000b18 <MX_GPIO_Init+0x158>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a2b      	ldr	r2, [pc, #172]	; (8000b18 <MX_GPIO_Init+0x158>)
 8000a6c:	f043 0302 	orr.w	r3, r3, #2
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b29      	ldr	r3, [pc, #164]	; (8000b18 <MX_GPIO_Init+0x158>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0302 	and.w	r3, r3, #2
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a84:	4825      	ldr	r0, [pc, #148]	; (8000b1c <MX_GPIO_Init+0x15c>)
 8000a86:	f001 ff19 	bl	80028bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000a90:	4823      	ldr	r0, [pc, #140]	; (8000b20 <MX_GPIO_Init+0x160>)
 8000a92:	f001 ff13 	bl	80028bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2103      	movs	r1, #3
 8000a9a:	4822      	ldr	r0, [pc, #136]	; (8000b24 <MX_GPIO_Init+0x164>)
 8000a9c:	f001 ff0e 	bl	80028bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000aa0:	233c      	movs	r3, #60	; 0x3c
 8000aa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000aac:	f107 031c 	add.w	r3, r7, #28
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	481c      	ldr	r0, [pc, #112]	; (8000b24 <MX_GPIO_Init+0x164>)
 8000ab4:	f001 fd4e 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000ab8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000abc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aca:	f107 031c 	add.w	r3, r7, #28
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4812      	ldr	r0, [pc, #72]	; (8000b1c <MX_GPIO_Init+0x15c>)
 8000ad2:	f001 fd3f 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ad6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ada:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000adc:	2301      	movs	r3, #1
 8000ade:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae8:	f107 031c 	add.w	r3, r7, #28
 8000aec:	4619      	mov	r1, r3
 8000aee:	480c      	ldr	r0, [pc, #48]	; (8000b20 <MX_GPIO_Init+0x160>)
 8000af0:	f001 fd30 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000af4:	2303      	movs	r3, #3
 8000af6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af8:	2301      	movs	r3, #1
 8000afa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	2300      	movs	r3, #0
 8000b02:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b04:	f107 031c 	add.w	r3, r7, #28
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4806      	ldr	r0, [pc, #24]	; (8000b24 <MX_GPIO_Init+0x164>)
 8000b0c:	f001 fd22 	bl	8002554 <HAL_GPIO_Init>

}
 8000b10:	bf00      	nop
 8000b12:	3730      	adds	r7, #48	; 0x30
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	40020000 	.word	0x40020000
 8000b20:	40020400 	.word	0x40020400
 8000b24:	40021000 	.word	0x40021000

08000b28 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <MX_I2C1_Init+0x50>)
 8000b2e:	4a13      	ldr	r2, [pc, #76]	; (8000b7c <MX_I2C1_Init+0x54>)
 8000b30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b32:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <MX_I2C1_Init+0x50>)
 8000b34:	4a12      	ldr	r2, [pc, #72]	; (8000b80 <MX_I2C1_Init+0x58>)
 8000b36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b38:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <MX_I2C1_Init+0x50>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <MX_I2C1_Init+0x50>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <MX_I2C1_Init+0x50>)
 8000b46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b4a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b4c:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <MX_I2C1_Init+0x50>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b52:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <MX_I2C1_Init+0x50>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b58:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <MX_I2C1_Init+0x50>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <MX_I2C1_Init+0x50>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b64:	4804      	ldr	r0, [pc, #16]	; (8000b78 <MX_I2C1_Init+0x50>)
 8000b66:	f001 fec3 	bl	80028f0 <HAL_I2C_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b70:	f000 fbbe 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b74:	bf00      	nop
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20000160 	.word	0x20000160
 8000b7c:	40005400 	.word	0x40005400
 8000b80:	000186a0 	.word	0x000186a0

08000b84 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08a      	sub	sp, #40	; 0x28
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a19      	ldr	r2, [pc, #100]	; (8000c08 <HAL_I2C_MspInit+0x84>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d12b      	bne.n	8000bfe <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	613b      	str	r3, [r7, #16]
 8000baa:	4b18      	ldr	r3, [pc, #96]	; (8000c0c <HAL_I2C_MspInit+0x88>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	4a17      	ldr	r2, [pc, #92]	; (8000c0c <HAL_I2C_MspInit+0x88>)
 8000bb0:	f043 0302 	orr.w	r3, r3, #2
 8000bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb6:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <HAL_I2C_MspInit+0x88>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	f003 0302 	and.w	r3, r3, #2
 8000bbe:	613b      	str	r3, [r7, #16]
 8000bc0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bc2:	23c0      	movs	r3, #192	; 0xc0
 8000bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bc6:	2312      	movs	r3, #18
 8000bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bce:	2303      	movs	r3, #3
 8000bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bd2:	2304      	movs	r3, #4
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd6:	f107 0314 	add.w	r3, r7, #20
 8000bda:	4619      	mov	r1, r3
 8000bdc:	480c      	ldr	r0, [pc, #48]	; (8000c10 <HAL_I2C_MspInit+0x8c>)
 8000bde:	f001 fcb9 	bl	8002554 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <HAL_I2C_MspInit+0x88>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bea:	4a08      	ldr	r2, [pc, #32]	; (8000c0c <HAL_I2C_MspInit+0x88>)
 8000bec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf2:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <HAL_I2C_MspInit+0x88>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000bfe:	bf00      	nop
 8000c00:	3728      	adds	r7, #40	; 0x28
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40005400 	.word	0x40005400
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	40020400 	.word	0x40020400

08000c14 <KEY_Scan>:
//3��KEY2���� 
//4��KEY3����
//ע��˺�������Ӧ���ȼ�,KEY0>KEY1>KEY2>KEY3!

uint8_t KEY_Scan()
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
	static uint8_t key_up=1;
 
	if(key_up==0&&(KEY0==0&&KEY1==0&&KEY2==0&&KEY3==0))key_up=1;
 8000c18:	4ba4      	ldr	r3, [pc, #656]	; (8000eac <KEY_Scan+0x298>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	f040 81ad 	bne.w	8000f7c <KEY_Scan+0x368>
 8000c22:	2120      	movs	r1, #32
 8000c24:	48a2      	ldr	r0, [pc, #648]	; (8000eb0 <KEY_Scan+0x29c>)
 8000c26:	f001 fe31 	bl	800288c <HAL_GPIO_ReadPin>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	f040 81a5 	bne.w	8000f7c <KEY_Scan+0x368>
 8000c32:	2108      	movs	r1, #8
 8000c34:	489e      	ldr	r0, [pc, #632]	; (8000eb0 <KEY_Scan+0x29c>)
 8000c36:	f001 fe29 	bl	800288c <HAL_GPIO_ReadPin>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	f040 819d 	bne.w	8000f7c <KEY_Scan+0x368>
 8000c42:	2110      	movs	r1, #16
 8000c44:	489a      	ldr	r0, [pc, #616]	; (8000eb0 <KEY_Scan+0x29c>)
 8000c46:	f001 fe21 	bl	800288c <HAL_GPIO_ReadPin>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	f040 8195 	bne.w	8000f7c <KEY_Scan+0x368>
 8000c52:	2104      	movs	r1, #4
 8000c54:	4896      	ldr	r0, [pc, #600]	; (8000eb0 <KEY_Scan+0x29c>)
 8000c56:	f001 fe19 	bl	800288c <HAL_GPIO_ReadPin>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	f040 818d 	bne.w	8000f7c <KEY_Scan+0x368>
 8000c62:	4b92      	ldr	r3, [pc, #584]	; (8000eac <KEY_Scan+0x298>)
 8000c64:	2201      	movs	r2, #1
 8000c66:	701a      	strb	r2, [r3, #0]
	while(key_up)
 8000c68:	e188      	b.n	8000f7c <KEY_Scan+0x368>
	{ 
		 sm0(1);sm1(0);sm2(0);sm3(0);   //ɨ��
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c70:	4890      	ldr	r0, [pc, #576]	; (8000eb4 <KEY_Scan+0x2a0>)
 8000c72:	f001 fe23 	bl	80028bc <HAL_GPIO_WritePin>
 8000c76:	2200      	movs	r2, #0
 8000c78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c7c:	488d      	ldr	r0, [pc, #564]	; (8000eb4 <KEY_Scan+0x2a0>)
 8000c7e:	f001 fe1d 	bl	80028bc <HAL_GPIO_WritePin>
 8000c82:	2200      	movs	r2, #0
 8000c84:	2102      	movs	r1, #2
 8000c86:	488a      	ldr	r0, [pc, #552]	; (8000eb0 <KEY_Scan+0x29c>)
 8000c88:	f001 fe18 	bl	80028bc <HAL_GPIO_WritePin>
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2101      	movs	r1, #1
 8000c90:	4887      	ldr	r0, [pc, #540]	; (8000eb0 <KEY_Scan+0x29c>)
 8000c92:	f001 fe13 	bl	80028bc <HAL_GPIO_WritePin>
	    if(key_up&&(KEY0==1||KEY1==1||KEY2==1||KEY3==1))     //key_up Ϊ 1 
 8000c96:	4b85      	ldr	r3, [pc, #532]	; (8000eac <KEY_Scan+0x298>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d045      	beq.n	8000d2a <KEY_Scan+0x116>
 8000c9e:	2120      	movs	r1, #32
 8000ca0:	4883      	ldr	r0, [pc, #524]	; (8000eb0 <KEY_Scan+0x29c>)
 8000ca2:	f001 fdf3 	bl	800288c <HAL_GPIO_ReadPin>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d014      	beq.n	8000cd6 <KEY_Scan+0xc2>
 8000cac:	2108      	movs	r1, #8
 8000cae:	4880      	ldr	r0, [pc, #512]	; (8000eb0 <KEY_Scan+0x29c>)
 8000cb0:	f001 fdec 	bl	800288c <HAL_GPIO_ReadPin>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d00d      	beq.n	8000cd6 <KEY_Scan+0xc2>
 8000cba:	2110      	movs	r1, #16
 8000cbc:	487c      	ldr	r0, [pc, #496]	; (8000eb0 <KEY_Scan+0x29c>)
 8000cbe:	f001 fde5 	bl	800288c <HAL_GPIO_ReadPin>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d006      	beq.n	8000cd6 <KEY_Scan+0xc2>
 8000cc8:	2104      	movs	r1, #4
 8000cca:	4879      	ldr	r0, [pc, #484]	; (8000eb0 <KEY_Scan+0x29c>)
 8000ccc:	f001 fdde 	bl	800288c <HAL_GPIO_ReadPin>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d129      	bne.n	8000d2a <KEY_Scan+0x116>
		{
				HAL_Delay(10);	//ȥ����
 8000cd6:	200a      	movs	r0, #10
 8000cd8:	f000 ff04 	bl	8001ae4 <HAL_Delay>
			    key_up=0;
 8000cdc:	4b73      	ldr	r3, [pc, #460]	; (8000eac <KEY_Scan+0x298>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	701a      	strb	r2, [r3, #0]
				 if(KEY0==1)return KEY0_PRES;
 8000ce2:	2120      	movs	r1, #32
 8000ce4:	4872      	ldr	r0, [pc, #456]	; (8000eb0 <KEY_Scan+0x29c>)
 8000ce6:	f001 fdd1 	bl	800288c <HAL_GPIO_ReadPin>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d101      	bne.n	8000cf4 <KEY_Scan+0xe0>
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	e14a      	b.n	8000f8a <KEY_Scan+0x376>
				else if(KEY1==1)return KEY1_PRES;
 8000cf4:	2108      	movs	r1, #8
 8000cf6:	486e      	ldr	r0, [pc, #440]	; (8000eb0 <KEY_Scan+0x29c>)
 8000cf8:	f001 fdc8 	bl	800288c <HAL_GPIO_ReadPin>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d101      	bne.n	8000d06 <KEY_Scan+0xf2>
 8000d02:	2302      	movs	r3, #2
 8000d04:	e141      	b.n	8000f8a <KEY_Scan+0x376>
				else if(KEY2==1)return KEY2_PRES;
 8000d06:	2110      	movs	r1, #16
 8000d08:	4869      	ldr	r0, [pc, #420]	; (8000eb0 <KEY_Scan+0x29c>)
 8000d0a:	f001 fdbf 	bl	800288c <HAL_GPIO_ReadPin>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d101      	bne.n	8000d18 <KEY_Scan+0x104>
 8000d14:	2303      	movs	r3, #3
 8000d16:	e138      	b.n	8000f8a <KEY_Scan+0x376>
				else if(KEY3==1)return KEY3_PRES;}
 8000d18:	2104      	movs	r1, #4
 8000d1a:	4865      	ldr	r0, [pc, #404]	; (8000eb0 <KEY_Scan+0x29c>)
 8000d1c:	f001 fdb6 	bl	800288c <HAL_GPIO_ReadPin>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d101      	bne.n	8000d2a <KEY_Scan+0x116>
 8000d26:	2304      	movs	r3, #4
 8000d28:	e12f      	b.n	8000f8a <KEY_Scan+0x376>
		 
		sm0(0);sm1(1);sm2(0);sm3(0);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d30:	4860      	ldr	r0, [pc, #384]	; (8000eb4 <KEY_Scan+0x2a0>)
 8000d32:	f001 fdc3 	bl	80028bc <HAL_GPIO_WritePin>
 8000d36:	2201      	movs	r2, #1
 8000d38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d3c:	485d      	ldr	r0, [pc, #372]	; (8000eb4 <KEY_Scan+0x2a0>)
 8000d3e:	f001 fdbd 	bl	80028bc <HAL_GPIO_WritePin>
 8000d42:	2200      	movs	r2, #0
 8000d44:	2102      	movs	r1, #2
 8000d46:	485a      	ldr	r0, [pc, #360]	; (8000eb0 <KEY_Scan+0x29c>)
 8000d48:	f001 fdb8 	bl	80028bc <HAL_GPIO_WritePin>
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2101      	movs	r1, #1
 8000d50:	4857      	ldr	r0, [pc, #348]	; (8000eb0 <KEY_Scan+0x29c>)
 8000d52:	f001 fdb3 	bl	80028bc <HAL_GPIO_WritePin>
		if(key_up&&(KEY0==1||KEY1==1||KEY2==1||KEY3==1))
 8000d56:	4b55      	ldr	r3, [pc, #340]	; (8000eac <KEY_Scan+0x298>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d045      	beq.n	8000dea <KEY_Scan+0x1d6>
 8000d5e:	2120      	movs	r1, #32
 8000d60:	4853      	ldr	r0, [pc, #332]	; (8000eb0 <KEY_Scan+0x29c>)
 8000d62:	f001 fd93 	bl	800288c <HAL_GPIO_ReadPin>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d014      	beq.n	8000d96 <KEY_Scan+0x182>
 8000d6c:	2108      	movs	r1, #8
 8000d6e:	4850      	ldr	r0, [pc, #320]	; (8000eb0 <KEY_Scan+0x29c>)
 8000d70:	f001 fd8c 	bl	800288c <HAL_GPIO_ReadPin>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d00d      	beq.n	8000d96 <KEY_Scan+0x182>
 8000d7a:	2110      	movs	r1, #16
 8000d7c:	484c      	ldr	r0, [pc, #304]	; (8000eb0 <KEY_Scan+0x29c>)
 8000d7e:	f001 fd85 	bl	800288c <HAL_GPIO_ReadPin>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d006      	beq.n	8000d96 <KEY_Scan+0x182>
 8000d88:	2104      	movs	r1, #4
 8000d8a:	4849      	ldr	r0, [pc, #292]	; (8000eb0 <KEY_Scan+0x29c>)
 8000d8c:	f001 fd7e 	bl	800288c <HAL_GPIO_ReadPin>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d129      	bne.n	8000dea <KEY_Scan+0x1d6>
	   {
				HAL_Delay(10);//ȥ����
 8000d96:	200a      	movs	r0, #10
 8000d98:	f000 fea4 	bl	8001ae4 <HAL_Delay>
				key_up=0;
 8000d9c:	4b43      	ldr	r3, [pc, #268]	; (8000eac <KEY_Scan+0x298>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	701a      	strb	r2, [r3, #0]
				 if(KEY0==1)return KEY4_PRES;
 8000da2:	2120      	movs	r1, #32
 8000da4:	4842      	ldr	r0, [pc, #264]	; (8000eb0 <KEY_Scan+0x29c>)
 8000da6:	f001 fd71 	bl	800288c <HAL_GPIO_ReadPin>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d101      	bne.n	8000db4 <KEY_Scan+0x1a0>
 8000db0:	2305      	movs	r3, #5
 8000db2:	e0ea      	b.n	8000f8a <KEY_Scan+0x376>
				else if(KEY1==1)return KEY5_PRES;
 8000db4:	2108      	movs	r1, #8
 8000db6:	483e      	ldr	r0, [pc, #248]	; (8000eb0 <KEY_Scan+0x29c>)
 8000db8:	f001 fd68 	bl	800288c <HAL_GPIO_ReadPin>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d101      	bne.n	8000dc6 <KEY_Scan+0x1b2>
 8000dc2:	2306      	movs	r3, #6
 8000dc4:	e0e1      	b.n	8000f8a <KEY_Scan+0x376>
				else if(KEY2==1)return KEY6_PRES;
 8000dc6:	2110      	movs	r1, #16
 8000dc8:	4839      	ldr	r0, [pc, #228]	; (8000eb0 <KEY_Scan+0x29c>)
 8000dca:	f001 fd5f 	bl	800288c <HAL_GPIO_ReadPin>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d101      	bne.n	8000dd8 <KEY_Scan+0x1c4>
 8000dd4:	2307      	movs	r3, #7
 8000dd6:	e0d8      	b.n	8000f8a <KEY_Scan+0x376>
				else if(KEY3==1)return KEY7_PRES;}
 8000dd8:	2104      	movs	r1, #4
 8000dda:	4835      	ldr	r0, [pc, #212]	; (8000eb0 <KEY_Scan+0x29c>)
 8000ddc:	f001 fd56 	bl	800288c <HAL_GPIO_ReadPin>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d101      	bne.n	8000dea <KEY_Scan+0x1d6>
 8000de6:	2308      	movs	r3, #8
 8000de8:	e0cf      	b.n	8000f8a <KEY_Scan+0x376>
		 	
		sm0(0);sm1(0);sm2(1);sm3(0);
 8000dea:	2200      	movs	r2, #0
 8000dec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000df0:	4830      	ldr	r0, [pc, #192]	; (8000eb4 <KEY_Scan+0x2a0>)
 8000df2:	f001 fd63 	bl	80028bc <HAL_GPIO_WritePin>
 8000df6:	2200      	movs	r2, #0
 8000df8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dfc:	482d      	ldr	r0, [pc, #180]	; (8000eb4 <KEY_Scan+0x2a0>)
 8000dfe:	f001 fd5d 	bl	80028bc <HAL_GPIO_WritePin>
 8000e02:	2201      	movs	r2, #1
 8000e04:	2102      	movs	r1, #2
 8000e06:	482a      	ldr	r0, [pc, #168]	; (8000eb0 <KEY_Scan+0x29c>)
 8000e08:	f001 fd58 	bl	80028bc <HAL_GPIO_WritePin>
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2101      	movs	r1, #1
 8000e10:	4827      	ldr	r0, [pc, #156]	; (8000eb0 <KEY_Scan+0x29c>)
 8000e12:	f001 fd53 	bl	80028bc <HAL_GPIO_WritePin>
		if(key_up&&(KEY0==1||KEY1==1||KEY2==1||KEY3==1))
 8000e16:	4b25      	ldr	r3, [pc, #148]	; (8000eac <KEY_Scan+0x298>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d04c      	beq.n	8000eb8 <KEY_Scan+0x2a4>
 8000e1e:	2120      	movs	r1, #32
 8000e20:	4823      	ldr	r0, [pc, #140]	; (8000eb0 <KEY_Scan+0x29c>)
 8000e22:	f001 fd33 	bl	800288c <HAL_GPIO_ReadPin>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d014      	beq.n	8000e56 <KEY_Scan+0x242>
 8000e2c:	2108      	movs	r1, #8
 8000e2e:	4820      	ldr	r0, [pc, #128]	; (8000eb0 <KEY_Scan+0x29c>)
 8000e30:	f001 fd2c 	bl	800288c <HAL_GPIO_ReadPin>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d00d      	beq.n	8000e56 <KEY_Scan+0x242>
 8000e3a:	2110      	movs	r1, #16
 8000e3c:	481c      	ldr	r0, [pc, #112]	; (8000eb0 <KEY_Scan+0x29c>)
 8000e3e:	f001 fd25 	bl	800288c <HAL_GPIO_ReadPin>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d006      	beq.n	8000e56 <KEY_Scan+0x242>
 8000e48:	2104      	movs	r1, #4
 8000e4a:	4819      	ldr	r0, [pc, #100]	; (8000eb0 <KEY_Scan+0x29c>)
 8000e4c:	f001 fd1e 	bl	800288c <HAL_GPIO_ReadPin>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d130      	bne.n	8000eb8 <KEY_Scan+0x2a4>
	   {
			HAL_Delay(10);//ȥ����
 8000e56:	200a      	movs	r0, #10
 8000e58:	f000 fe44 	bl	8001ae4 <HAL_Delay>
			key_up=0;
 8000e5c:	4b13      	ldr	r3, [pc, #76]	; (8000eac <KEY_Scan+0x298>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	701a      	strb	r2, [r3, #0]
		    if(KEY0==1)return KEY8_PRES;
 8000e62:	2120      	movs	r1, #32
 8000e64:	4812      	ldr	r0, [pc, #72]	; (8000eb0 <KEY_Scan+0x29c>)
 8000e66:	f001 fd11 	bl	800288c <HAL_GPIO_ReadPin>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d101      	bne.n	8000e74 <KEY_Scan+0x260>
 8000e70:	2309      	movs	r3, #9
 8000e72:	e08a      	b.n	8000f8a <KEY_Scan+0x376>
	     	else if(KEY1==1)return KEY9_PRES;
 8000e74:	2108      	movs	r1, #8
 8000e76:	480e      	ldr	r0, [pc, #56]	; (8000eb0 <KEY_Scan+0x29c>)
 8000e78:	f001 fd08 	bl	800288c <HAL_GPIO_ReadPin>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d101      	bne.n	8000e86 <KEY_Scan+0x272>
 8000e82:	230a      	movs	r3, #10
 8000e84:	e081      	b.n	8000f8a <KEY_Scan+0x376>
		    else if(KEY2==1)return KEY10_PRES;
 8000e86:	2110      	movs	r1, #16
 8000e88:	4809      	ldr	r0, [pc, #36]	; (8000eb0 <KEY_Scan+0x29c>)
 8000e8a:	f001 fcff 	bl	800288c <HAL_GPIO_ReadPin>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d101      	bne.n	8000e98 <KEY_Scan+0x284>
 8000e94:	230b      	movs	r3, #11
 8000e96:	e078      	b.n	8000f8a <KEY_Scan+0x376>
		    else if(KEY3==1)return KEY11_PRES;}
 8000e98:	2104      	movs	r1, #4
 8000e9a:	4805      	ldr	r0, [pc, #20]	; (8000eb0 <KEY_Scan+0x29c>)
 8000e9c:	f001 fcf6 	bl	800288c <HAL_GPIO_ReadPin>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d108      	bne.n	8000eb8 <KEY_Scan+0x2a4>
 8000ea6:	230c      	movs	r3, #12
 8000ea8:	e06f      	b.n	8000f8a <KEY_Scan+0x376>
 8000eaa:	bf00      	nop
 8000eac:	20000066 	.word	0x20000066
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	40020400 	.word	0x40020400
     
		sm0(0);sm1(0);sm2(0);sm3(1);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ebe:	4834      	ldr	r0, [pc, #208]	; (8000f90 <KEY_Scan+0x37c>)
 8000ec0:	f001 fcfc 	bl	80028bc <HAL_GPIO_WritePin>
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eca:	4831      	ldr	r0, [pc, #196]	; (8000f90 <KEY_Scan+0x37c>)
 8000ecc:	f001 fcf6 	bl	80028bc <HAL_GPIO_WritePin>
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2102      	movs	r1, #2
 8000ed4:	482f      	ldr	r0, [pc, #188]	; (8000f94 <KEY_Scan+0x380>)
 8000ed6:	f001 fcf1 	bl	80028bc <HAL_GPIO_WritePin>
 8000eda:	2201      	movs	r2, #1
 8000edc:	2101      	movs	r1, #1
 8000ede:	482d      	ldr	r0, [pc, #180]	; (8000f94 <KEY_Scan+0x380>)
 8000ee0:	f001 fcec 	bl	80028bc <HAL_GPIO_WritePin>
		if(key_up&&(KEY0==1||KEY1==1||KEY2==1||KEY3==1))
 8000ee4:	4b2c      	ldr	r3, [pc, #176]	; (8000f98 <KEY_Scan+0x384>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d045      	beq.n	8000f78 <KEY_Scan+0x364>
 8000eec:	2120      	movs	r1, #32
 8000eee:	4829      	ldr	r0, [pc, #164]	; (8000f94 <KEY_Scan+0x380>)
 8000ef0:	f001 fccc 	bl	800288c <HAL_GPIO_ReadPin>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d014      	beq.n	8000f24 <KEY_Scan+0x310>
 8000efa:	2108      	movs	r1, #8
 8000efc:	4825      	ldr	r0, [pc, #148]	; (8000f94 <KEY_Scan+0x380>)
 8000efe:	f001 fcc5 	bl	800288c <HAL_GPIO_ReadPin>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d00d      	beq.n	8000f24 <KEY_Scan+0x310>
 8000f08:	2110      	movs	r1, #16
 8000f0a:	4822      	ldr	r0, [pc, #136]	; (8000f94 <KEY_Scan+0x380>)
 8000f0c:	f001 fcbe 	bl	800288c <HAL_GPIO_ReadPin>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d006      	beq.n	8000f24 <KEY_Scan+0x310>
 8000f16:	2104      	movs	r1, #4
 8000f18:	481e      	ldr	r0, [pc, #120]	; (8000f94 <KEY_Scan+0x380>)
 8000f1a:	f001 fcb7 	bl	800288c <HAL_GPIO_ReadPin>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d129      	bne.n	8000f78 <KEY_Scan+0x364>
		{
			HAL_Delay(10);//ȥ����
 8000f24:	200a      	movs	r0, #10
 8000f26:	f000 fddd 	bl	8001ae4 <HAL_Delay>
			key_up=0;
 8000f2a:	4b1b      	ldr	r3, [pc, #108]	; (8000f98 <KEY_Scan+0x384>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	701a      	strb	r2, [r3, #0]
				if(KEY0==1)return KEY12_PRES;
 8000f30:	2120      	movs	r1, #32
 8000f32:	4818      	ldr	r0, [pc, #96]	; (8000f94 <KEY_Scan+0x380>)
 8000f34:	f001 fcaa 	bl	800288c <HAL_GPIO_ReadPin>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d101      	bne.n	8000f42 <KEY_Scan+0x32e>
 8000f3e:	230d      	movs	r3, #13
 8000f40:	e023      	b.n	8000f8a <KEY_Scan+0x376>
				else if(KEY1==1)return KEY13_PRES;
 8000f42:	2108      	movs	r1, #8
 8000f44:	4813      	ldr	r0, [pc, #76]	; (8000f94 <KEY_Scan+0x380>)
 8000f46:	f001 fca1 	bl	800288c <HAL_GPIO_ReadPin>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d101      	bne.n	8000f54 <KEY_Scan+0x340>
 8000f50:	230e      	movs	r3, #14
 8000f52:	e01a      	b.n	8000f8a <KEY_Scan+0x376>
				else if(KEY2==1)return KEY14_PRES;
 8000f54:	2110      	movs	r1, #16
 8000f56:	480f      	ldr	r0, [pc, #60]	; (8000f94 <KEY_Scan+0x380>)
 8000f58:	f001 fc98 	bl	800288c <HAL_GPIO_ReadPin>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d101      	bne.n	8000f66 <KEY_Scan+0x352>
 8000f62:	230f      	movs	r3, #15
 8000f64:	e011      	b.n	8000f8a <KEY_Scan+0x376>
				else if(KEY3==1)return KEY15_PRES;}
 8000f66:	2104      	movs	r1, #4
 8000f68:	480a      	ldr	r0, [pc, #40]	; (8000f94 <KEY_Scan+0x380>)
 8000f6a:	f001 fc8f 	bl	800288c <HAL_GPIO_ReadPin>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d101      	bne.n	8000f78 <KEY_Scan+0x364>
 8000f74:	2310      	movs	r3, #16
 8000f76:	e008      	b.n	8000f8a <KEY_Scan+0x376>
 
		return 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	e006      	b.n	8000f8a <KEY_Scan+0x376>
	while(key_up)
 8000f7c:	bf00      	nop
 8000f7e:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <KEY_Scan+0x384>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	f47f ae71 	bne.w	8000c6a <KEY_Scan+0x56>
	}
 return 0;
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40020400 	.word	0x40020400
 8000f94:	40021000 	.word	0x40021000
 8000f98:	20000066 	.word	0x20000066

08000f9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fa0:	f000 fd2e 	bl	8001a00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa4:	f000 f93a 	bl	800121c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fa8:	f7ff fd0a 	bl	80009c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fac:	f7ff fce0 	bl	8000970 <MX_DMA_Init>
  MX_I2C1_Init();
 8000fb0:	f7ff fdba 	bl	8000b28 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000fb4:	f000 fbb0 	bl	8001718 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8000fb8:	f000 fb50 	bl	800165c <MX_TIM6_Init>
  MX_USART3_UART_Init();
 8000fbc:	f000 fbde 	bl	800177c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 8000fc0:	f000 fa8a 	bl	80014d8 <OLED_Init>
  OLED_Clear();
 8000fc4:	f000 fa91 	bl	80014ea <OLED_Clear>
//  HAL_UART_Receive_IT(&huart3,(uint8_t *)UART3_Rx_Buf,4);
  HAL_UART_Receive_DMA(&huart1,(uint8_t *)UART1_Rx_Buf,100);
 8000fc8:	2264      	movs	r2, #100	; 0x64
 8000fca:	4980      	ldr	r1, [pc, #512]	; (80011cc <main+0x230>)
 8000fcc:	4880      	ldr	r0, [pc, #512]	; (80011d0 <main+0x234>)
 8000fce:	f003 f962 	bl	8004296 <HAL_UART_Receive_DMA>
  servoRotate(1000, 118);
 8000fd2:	2176      	movs	r1, #118	; 0x76
 8000fd4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fd8:	f000 fa08 	bl	80013ec <servoRotate>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	keyValue = KEY_Scan();
 8000fdc:	f7ff fe1a 	bl	8000c14 <KEY_Scan>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	4b7b      	ldr	r3, [pc, #492]	; (80011d4 <main+0x238>)
 8000fe6:	701a      	strb	r2, [r3, #0]
	if(keyValue == 1){
 8000fe8:	4b7a      	ldr	r3, [pc, #488]	; (80011d4 <main+0x238>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d104      	bne.n	8000ffa <main+0x5e>
		AngleXopen = 1000;
 8000ff0:	4b79      	ldr	r3, [pc, #484]	; (80011d8 <main+0x23c>)
 8000ff2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ff6:	801a      	strh	r2, [r3, #0]
 8000ff8:	e02f      	b.n	800105a <main+0xbe>
	}
	else if(keyValue == 2){
 8000ffa:	4b76      	ldr	r3, [pc, #472]	; (80011d4 <main+0x238>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d110      	bne.n	8001024 <main+0x88>
		if(AngleXopen < 2000)
 8001002:	4b75      	ldr	r3, [pc, #468]	; (80011d8 <main+0x23c>)
 8001004:	881b      	ldrh	r3, [r3, #0]
 8001006:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800100a:	d206      	bcs.n	800101a <main+0x7e>
			AngleXopen = AngleXopen + 3;
 800100c:	4b72      	ldr	r3, [pc, #456]	; (80011d8 <main+0x23c>)
 800100e:	881b      	ldrh	r3, [r3, #0]
 8001010:	3303      	adds	r3, #3
 8001012:	b29a      	uxth	r2, r3
 8001014:	4b70      	ldr	r3, [pc, #448]	; (80011d8 <main+0x23c>)
 8001016:	801a      	strh	r2, [r3, #0]
 8001018:	e01f      	b.n	800105a <main+0xbe>
		else AngleXopen = 2000;
 800101a:	4b6f      	ldr	r3, [pc, #444]	; (80011d8 <main+0x23c>)
 800101c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001020:	801a      	strh	r2, [r3, #0]
 8001022:	e01a      	b.n	800105a <main+0xbe>
	}
	else if(keyValue == 3){
 8001024:	4b6b      	ldr	r3, [pc, #428]	; (80011d4 <main+0x238>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	2b03      	cmp	r3, #3
 800102a:	d10e      	bne.n	800104a <main+0xae>
		if(AngleXopen >0 )
 800102c:	4b6a      	ldr	r3, [pc, #424]	; (80011d8 <main+0x23c>)
 800102e:	881b      	ldrh	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d006      	beq.n	8001042 <main+0xa6>
			AngleXopen = AngleXopen - 3;
 8001034:	4b68      	ldr	r3, [pc, #416]	; (80011d8 <main+0x23c>)
 8001036:	881b      	ldrh	r3, [r3, #0]
 8001038:	3b03      	subs	r3, #3
 800103a:	b29a      	uxth	r2, r3
 800103c:	4b66      	ldr	r3, [pc, #408]	; (80011d8 <main+0x23c>)
 800103e:	801a      	strh	r2, [r3, #0]
 8001040:	e00b      	b.n	800105a <main+0xbe>
		else AngleXopen = 0;
 8001042:	4b65      	ldr	r3, [pc, #404]	; (80011d8 <main+0x23c>)
 8001044:	2200      	movs	r2, #0
 8001046:	801a      	strh	r2, [r3, #0]
 8001048:	e007      	b.n	800105a <main+0xbe>
	}
	else if(keyValue == 4){
 800104a:	4b62      	ldr	r3, [pc, #392]	; (80011d4 <main+0x238>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	2b04      	cmp	r3, #4
 8001050:	d103      	bne.n	800105a <main+0xbe>
		AngleXopen = 1000;
 8001052:	4b61      	ldr	r3, [pc, #388]	; (80011d8 <main+0x23c>)
 8001054:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001058:	801a      	strh	r2, [r3, #0]
	}

	if(keyValue == 5){
 800105a:	4b5e      	ldr	r3, [pc, #376]	; (80011d4 <main+0x238>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2b05      	cmp	r3, #5
 8001060:	d103      	bne.n	800106a <main+0xce>
		AngleYopen = 118;
 8001062:	4b5e      	ldr	r3, [pc, #376]	; (80011dc <main+0x240>)
 8001064:	2276      	movs	r2, #118	; 0x76
 8001066:	801a      	strh	r2, [r3, #0]
 8001068:	e09d      	b.n	80011a6 <main+0x20a>
	}
	else if(keyValue == 6){
 800106a:	4b5a      	ldr	r3, [pc, #360]	; (80011d4 <main+0x238>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b06      	cmp	r3, #6
 8001070:	d10e      	bne.n	8001090 <main+0xf4>
		if(AngleYopen < 214)
 8001072:	4b5a      	ldr	r3, [pc, #360]	; (80011dc <main+0x240>)
 8001074:	881b      	ldrh	r3, [r3, #0]
 8001076:	2bd5      	cmp	r3, #213	; 0xd5
 8001078:	d806      	bhi.n	8001088 <main+0xec>
			AngleYopen = AngleYopen + 3;
 800107a:	4b58      	ldr	r3, [pc, #352]	; (80011dc <main+0x240>)
 800107c:	881b      	ldrh	r3, [r3, #0]
 800107e:	3303      	adds	r3, #3
 8001080:	b29a      	uxth	r2, r3
 8001082:	4b56      	ldr	r3, [pc, #344]	; (80011dc <main+0x240>)
 8001084:	801a      	strh	r2, [r3, #0]
 8001086:	e08e      	b.n	80011a6 <main+0x20a>
		else AngleYopen = 214;
 8001088:	4b54      	ldr	r3, [pc, #336]	; (80011dc <main+0x240>)
 800108a:	22d6      	movs	r2, #214	; 0xd6
 800108c:	801a      	strh	r2, [r3, #0]
 800108e:	e08a      	b.n	80011a6 <main+0x20a>
	}
	else if(keyValue == 7){
 8001090:	4b50      	ldr	r3, [pc, #320]	; (80011d4 <main+0x238>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b07      	cmp	r3, #7
 8001096:	d10e      	bne.n	80010b6 <main+0x11a>
		if(AngleYopen > 100)
 8001098:	4b50      	ldr	r3, [pc, #320]	; (80011dc <main+0x240>)
 800109a:	881b      	ldrh	r3, [r3, #0]
 800109c:	2b64      	cmp	r3, #100	; 0x64
 800109e:	d906      	bls.n	80010ae <main+0x112>
			AngleYopen = AngleYopen - 3;
 80010a0:	4b4e      	ldr	r3, [pc, #312]	; (80011dc <main+0x240>)
 80010a2:	881b      	ldrh	r3, [r3, #0]
 80010a4:	3b03      	subs	r3, #3
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	4b4c      	ldr	r3, [pc, #304]	; (80011dc <main+0x240>)
 80010aa:	801a      	strh	r2, [r3, #0]
 80010ac:	e07b      	b.n	80011a6 <main+0x20a>
		else AngleYopen = 100;
 80010ae:	4b4b      	ldr	r3, [pc, #300]	; (80011dc <main+0x240>)
 80010b0:	2264      	movs	r2, #100	; 0x64
 80010b2:	801a      	strh	r2, [r3, #0]
 80010b4:	e077      	b.n	80011a6 <main+0x20a>
	}
	else if(keyValue == 8){
 80010b6:	4b47      	ldr	r3, [pc, #284]	; (80011d4 <main+0x238>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b08      	cmp	r3, #8
 80010bc:	d103      	bne.n	80010c6 <main+0x12a>
		AngleYopen = 118;
 80010be:	4b47      	ldr	r3, [pc, #284]	; (80011dc <main+0x240>)
 80010c0:	2276      	movs	r2, #118	; 0x76
 80010c2:	801a      	strh	r2, [r3, #0]
 80010c4:	e06f      	b.n	80011a6 <main+0x20a>
	}
//	else if(keyValue == 9){
//		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12);
//	}
	else if(keyValue == 10){
 80010c6:	4b43      	ldr	r3, [pc, #268]	; (80011d4 <main+0x238>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	2b0a      	cmp	r3, #10
 80010cc:	d10a      	bne.n	80010e4 <main+0x148>
		motorRun = !motorRun;
 80010ce:	4b44      	ldr	r3, [pc, #272]	; (80011e0 <main+0x244>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	bf0c      	ite	eq
 80010d6:	2301      	moveq	r3, #1
 80010d8:	2300      	movne	r3, #0
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	461a      	mov	r2, r3
 80010de:	4b40      	ldr	r3, [pc, #256]	; (80011e0 <main+0x244>)
 80010e0:	701a      	strb	r2, [r3, #0]
 80010e2:	e060      	b.n	80011a6 <main+0x20a>
	}
	else if(keyValue == 11){
 80010e4:	4b3b      	ldr	r3, [pc, #236]	; (80011d4 <main+0x238>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	2b0b      	cmp	r3, #11
 80010ea:	d10f      	bne.n	800110c <main+0x170>
		if(TargetPointX < 500){
 80010ec:	4b3d      	ldr	r3, [pc, #244]	; (80011e4 <main+0x248>)
 80010ee:	881b      	ldrh	r3, [r3, #0]
 80010f0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80010f4:	d206      	bcs.n	8001104 <main+0x168>
			TargetPointX = TargetPointX + 25;
 80010f6:	4b3b      	ldr	r3, [pc, #236]	; (80011e4 <main+0x248>)
 80010f8:	881b      	ldrh	r3, [r3, #0]
 80010fa:	3319      	adds	r3, #25
 80010fc:	b29a      	uxth	r2, r3
 80010fe:	4b39      	ldr	r3, [pc, #228]	; (80011e4 <main+0x248>)
 8001100:	801a      	strh	r2, [r3, #0]
 8001102:	e050      	b.n	80011a6 <main+0x20a>
		}
		else{
			TargetPointX = 0;
 8001104:	4b37      	ldr	r3, [pc, #220]	; (80011e4 <main+0x248>)
 8001106:	2200      	movs	r2, #0
 8001108:	801a      	strh	r2, [r3, #0]
 800110a:	e04c      	b.n	80011a6 <main+0x20a>

		}

	}
	else if(keyValue == 12){
 800110c:	4b31      	ldr	r3, [pc, #196]	; (80011d4 <main+0x238>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2b0c      	cmp	r3, #12
 8001112:	d10f      	bne.n	8001134 <main+0x198>
//		HAL_TIM_Base_Start_IT(&htim6);
		if(TargetPointY < 500){
 8001114:	4b34      	ldr	r3, [pc, #208]	; (80011e8 <main+0x24c>)
 8001116:	881b      	ldrh	r3, [r3, #0]
 8001118:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800111c:	d206      	bcs.n	800112c <main+0x190>
			TargetPointY = TargetPointY + 25;
 800111e:	4b32      	ldr	r3, [pc, #200]	; (80011e8 <main+0x24c>)
 8001120:	881b      	ldrh	r3, [r3, #0]
 8001122:	3319      	adds	r3, #25
 8001124:	b29a      	uxth	r2, r3
 8001126:	4b30      	ldr	r3, [pc, #192]	; (80011e8 <main+0x24c>)
 8001128:	801a      	strh	r2, [r3, #0]
 800112a:	e03c      	b.n	80011a6 <main+0x20a>
		}
		else{
			TargetPointY = 0;
 800112c:	4b2e      	ldr	r3, [pc, #184]	; (80011e8 <main+0x24c>)
 800112e:	2200      	movs	r2, #0
 8001130:	801a      	strh	r2, [r3, #0]
 8001132:	e038      	b.n	80011a6 <main+0x20a>

		}
	}
	else if(keyValue == 14){
 8001134:	4b27      	ldr	r3, [pc, #156]	; (80011d4 <main+0x238>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b0e      	cmp	r3, #14
 800113a:	d11b      	bne.n	8001174 <main+0x1d8>
		HAL_TIM_Base_Stop_IT(&htim6);
 800113c:	482b      	ldr	r0, [pc, #172]	; (80011ec <main+0x250>)
 800113e:	f002 fd3b 	bl	8003bb8 <HAL_TIM_Base_Stop_IT>
		TargetPointX = 250;
 8001142:	4b28      	ldr	r3, [pc, #160]	; (80011e4 <main+0x248>)
 8001144:	22fa      	movs	r2, #250	; 0xfa
 8001146:	801a      	strh	r2, [r3, #0]
		TargetPointY = 250;
 8001148:	4b27      	ldr	r3, [pc, #156]	; (80011e8 <main+0x24c>)
 800114a:	22fa      	movs	r2, #250	; 0xfa
 800114c:	801a      	strh	r2, [r3, #0]
		DistanceX_Kp = 0.05;
 800114e:	4b28      	ldr	r3, [pc, #160]	; (80011f0 <main+0x254>)
 8001150:	4a28      	ldr	r2, [pc, #160]	; (80011f4 <main+0x258>)
 8001152:	601a      	str	r2, [r3, #0]
		DistanceX_Ki = 0.05;
 8001154:	4b28      	ldr	r3, [pc, #160]	; (80011f8 <main+0x25c>)
 8001156:	4a27      	ldr	r2, [pc, #156]	; (80011f4 <main+0x258>)
 8001158:	601a      	str	r2, [r3, #0]
		DistanceX_Kd = 0.01;		//距离环控制函�??????(0.1 0.05 0)
 800115a:	4b28      	ldr	r3, [pc, #160]	; (80011fc <main+0x260>)
 800115c:	4a28      	ldr	r2, [pc, #160]	; (8001200 <main+0x264>)
 800115e:	601a      	str	r2, [r3, #0]
		DistanceY_Kp = 0.05;
 8001160:	4b28      	ldr	r3, [pc, #160]	; (8001204 <main+0x268>)
 8001162:	4a24      	ldr	r2, [pc, #144]	; (80011f4 <main+0x258>)
 8001164:	601a      	str	r2, [r3, #0]
		DistanceY_Ki = 0.04;
 8001166:	4b28      	ldr	r3, [pc, #160]	; (8001208 <main+0x26c>)
 8001168:	4a28      	ldr	r2, [pc, #160]	; (800120c <main+0x270>)
 800116a:	601a      	str	r2, [r3, #0]
		DistanceY_Kd = 0.01;
 800116c:	4b28      	ldr	r3, [pc, #160]	; (8001210 <main+0x274>)
 800116e:	4a24      	ldr	r2, [pc, #144]	; (8001200 <main+0x264>)
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	e018      	b.n	80011a6 <main+0x20a>
	}
	else if(keyValue == 13){
 8001174:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <main+0x238>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b0d      	cmp	r3, #13
 800117a:	d114      	bne.n	80011a6 <main+0x20a>
		HAL_TIM_Base_Start_IT(&htim6);
 800117c:	481b      	ldr	r0, [pc, #108]	; (80011ec <main+0x250>)
 800117e:	f002 fcab 	bl	8003ad8 <HAL_TIM_Base_Start_IT>
		DistanceX_Kp = 0.03;
 8001182:	4b1b      	ldr	r3, [pc, #108]	; (80011f0 <main+0x254>)
 8001184:	4a23      	ldr	r2, [pc, #140]	; (8001214 <main+0x278>)
 8001186:	601a      	str	r2, [r3, #0]
		DistanceX_Ki = 0.05;
 8001188:	4b1b      	ldr	r3, [pc, #108]	; (80011f8 <main+0x25c>)
 800118a:	4a1a      	ldr	r2, [pc, #104]	; (80011f4 <main+0x258>)
 800118c:	601a      	str	r2, [r3, #0]
		DistanceX_Kd = 0.01;		//距离环控制函�??????(0.1 0.05 0)
 800118e:	4b1b      	ldr	r3, [pc, #108]	; (80011fc <main+0x260>)
 8001190:	4a1b      	ldr	r2, [pc, #108]	; (8001200 <main+0x264>)
 8001192:	601a      	str	r2, [r3, #0]
		DistanceY_Kp = 0.03;
 8001194:	4b1b      	ldr	r3, [pc, #108]	; (8001204 <main+0x268>)
 8001196:	4a1f      	ldr	r2, [pc, #124]	; (8001214 <main+0x278>)
 8001198:	601a      	str	r2, [r3, #0]
		DistanceY_Ki = 0.04;
 800119a:	4b1b      	ldr	r3, [pc, #108]	; (8001208 <main+0x26c>)
 800119c:	4a1b      	ldr	r2, [pc, #108]	; (800120c <main+0x270>)
 800119e:	601a      	str	r2, [r3, #0]
		DistanceY_Kd = 0.01
 80011a0:	4b1b      	ldr	r3, [pc, #108]	; (8001210 <main+0x274>)
 80011a2:	4a17      	ldr	r2, [pc, #92]	; (8001200 <main+0x264>)
 80011a4:	601a      	str	r2, [r3, #0]
				;		//距离环控制函�??????(0.06 0.04 0)
	}


	if(motorRun == 0){
 80011a6:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <main+0x244>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d107      	bne.n	80011be <main+0x222>
		servoRotate(AngleXopen, AngleYopen);
 80011ae:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <main+0x23c>)
 80011b0:	881b      	ldrh	r3, [r3, #0]
 80011b2:	4a0a      	ldr	r2, [pc, #40]	; (80011dc <main+0x240>)
 80011b4:	8812      	ldrh	r2, [r2, #0]
 80011b6:	4611      	mov	r1, r2
 80011b8:	4618      	mov	r0, r3
 80011ba:	f000 f917 	bl	80013ec <servoRotate>
	}


	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80011be:	2201      	movs	r2, #1
 80011c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011c4:	4814      	ldr	r0, [pc, #80]	; (8001218 <main+0x27c>)
 80011c6:	f001 fb79 	bl	80028bc <HAL_GPIO_WritePin>
	keyValue = KEY_Scan();
 80011ca:	e707      	b.n	8000fdc <main+0x40>
 80011cc:	200000f0 	.word	0x200000f0
 80011d0:	20000408 	.word	0x20000408
 80011d4:	2000021c 	.word	0x2000021c
 80011d8:	20000084 	.word	0x20000084
 80011dc:	20000086 	.word	0x20000086
 80011e0:	200001b4 	.word	0x200001b4
 80011e4:	20000068 	.word	0x20000068
 80011e8:	2000006a 	.word	0x2000006a
 80011ec:	200002bc 	.word	0x200002bc
 80011f0:	2000006c 	.word	0x2000006c
 80011f4:	3d4ccccd 	.word	0x3d4ccccd
 80011f8:	20000070 	.word	0x20000070
 80011fc:	20000074 	.word	0x20000074
 8001200:	3c23d70a 	.word	0x3c23d70a
 8001204:	20000078 	.word	0x20000078
 8001208:	2000007c 	.word	0x2000007c
 800120c:	3d23d70a 	.word	0x3d23d70a
 8001210:	20000080 	.word	0x20000080
 8001214:	3cf5c28f 	.word	0x3cf5c28f
 8001218:	40020000 	.word	0x40020000

0800121c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b094      	sub	sp, #80	; 0x50
 8001220:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001222:	f107 0320 	add.w	r3, r7, #32
 8001226:	2230      	movs	r2, #48	; 0x30
 8001228:	2100      	movs	r1, #0
 800122a:	4618      	mov	r0, r3
 800122c:	f003 ff3e 	bl	80050ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001230:	f107 030c 	add.w	r3, r7, #12
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001240:	2300      	movs	r3, #0
 8001242:	60bb      	str	r3, [r7, #8]
 8001244:	4b28      	ldr	r3, [pc, #160]	; (80012e8 <SystemClock_Config+0xcc>)
 8001246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001248:	4a27      	ldr	r2, [pc, #156]	; (80012e8 <SystemClock_Config+0xcc>)
 800124a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800124e:	6413      	str	r3, [r2, #64]	; 0x40
 8001250:	4b25      	ldr	r3, [pc, #148]	; (80012e8 <SystemClock_Config+0xcc>)
 8001252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001254:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001258:	60bb      	str	r3, [r7, #8]
 800125a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800125c:	2300      	movs	r3, #0
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	4b22      	ldr	r3, [pc, #136]	; (80012ec <SystemClock_Config+0xd0>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a21      	ldr	r2, [pc, #132]	; (80012ec <SystemClock_Config+0xd0>)
 8001266:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800126a:	6013      	str	r3, [r2, #0]
 800126c:	4b1f      	ldr	r3, [pc, #124]	; (80012ec <SystemClock_Config+0xd0>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001274:	607b      	str	r3, [r7, #4]
 8001276:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001278:	2302      	movs	r3, #2
 800127a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800127c:	2301      	movs	r3, #1
 800127e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001280:	2310      	movs	r3, #16
 8001282:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001284:	2302      	movs	r3, #2
 8001286:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001288:	2300      	movs	r3, #0
 800128a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800128c:	2308      	movs	r3, #8
 800128e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001290:	23a8      	movs	r3, #168	; 0xa8
 8001292:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001294:	2302      	movs	r3, #2
 8001296:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001298:	2304      	movs	r3, #4
 800129a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800129c:	f107 0320 	add.w	r3, r7, #32
 80012a0:	4618      	mov	r0, r3
 80012a2:	f001 ff81 	bl	80031a8 <HAL_RCC_OscConfig>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012ac:	f000 f820 	bl	80012f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b0:	230f      	movs	r3, #15
 80012b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012b4:	2302      	movs	r3, #2
 80012b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012c8:	f107 030c 	add.w	r3, r7, #12
 80012cc:	2105      	movs	r1, #5
 80012ce:	4618      	mov	r0, r3
 80012d0:	f002 f9e2 	bl	8003698 <HAL_RCC_ClockConfig>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80012da:	f000 f809 	bl	80012f0 <Error_Handler>
  }
}
 80012de:	bf00      	nop
 80012e0:	3750      	adds	r7, #80	; 0x50
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40023800 	.word	0x40023800
 80012ec:	40007000 	.word	0x40007000

080012f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f4:	b672      	cpsid	i
}
 80012f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012f8:	e7fe      	b.n	80012f8 <Error_Handler+0x8>
	...

080012fc <moveServosByArray>:
		{MOTORX_ID,1000},
		{MOTORY_ID,118}
};

void moveServosByArray(LobotServo servos[], uint8_t Num, uint16_t Time)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	460b      	mov	r3, r1
 8001306:	70fb      	strb	r3, [r7, #3]
 8001308:	4613      	mov	r3, r2
 800130a:	803b      	strh	r3, [r7, #0]
	uint8_t index = 7;
 800130c:	2307      	movs	r3, #7
 800130e:	73fb      	strb	r3, [r7, #15]
	uint8_t i = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	73bb      	strb	r3, [r7, #14]

	if (Num < 1 || Num > 32 || !(Time > 0)) {
 8001314:	78fb      	ldrb	r3, [r7, #3]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d060      	beq.n	80013dc <moveServosByArray+0xe0>
 800131a:	78fb      	ldrb	r3, [r7, #3]
 800131c:	2b20      	cmp	r3, #32
 800131e:	d85d      	bhi.n	80013dc <moveServosByArray+0xe0>
 8001320:	883b      	ldrh	r3, [r7, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d05a      	beq.n	80013dc <moveServosByArray+0xe0>
		return;                                          //舵机数不能为零和大与32，时间不能为零
	}
	LobotTxBuf[0] = LobotTxBuf[1] = FRAME_HEADER;      //填充帧头
 8001326:	4b2f      	ldr	r3, [pc, #188]	; (80013e4 <moveServosByArray+0xe8>)
 8001328:	2255      	movs	r2, #85	; 0x55
 800132a:	705a      	strb	r2, [r3, #1]
 800132c:	4b2d      	ldr	r3, [pc, #180]	; (80013e4 <moveServosByArray+0xe8>)
 800132e:	785a      	ldrb	r2, [r3, #1]
 8001330:	4b2c      	ldr	r3, [pc, #176]	; (80013e4 <moveServosByArray+0xe8>)
 8001332:	701a      	strb	r2, [r3, #0]
	LobotTxBuf[2] = Num * 3 + 5;                       //数据长度 = 要控制舵机数*3+5
 8001334:	78fb      	ldrb	r3, [r7, #3]
 8001336:	461a      	mov	r2, r3
 8001338:	0052      	lsls	r2, r2, #1
 800133a:	4413      	add	r3, r2
 800133c:	b2db      	uxtb	r3, r3
 800133e:	3305      	adds	r3, #5
 8001340:	b2da      	uxtb	r2, r3
 8001342:	4b28      	ldr	r3, [pc, #160]	; (80013e4 <moveServosByArray+0xe8>)
 8001344:	709a      	strb	r2, [r3, #2]
	LobotTxBuf[3] = CMD_SERVO_MOVE;                    //填充舵机移动指令
 8001346:	4b27      	ldr	r3, [pc, #156]	; (80013e4 <moveServosByArray+0xe8>)
 8001348:	2203      	movs	r2, #3
 800134a:	70da      	strb	r2, [r3, #3]
	LobotTxBuf[4] = Num;                               //要控制的舵机个数
 800134c:	4a25      	ldr	r2, [pc, #148]	; (80013e4 <moveServosByArray+0xe8>)
 800134e:	78fb      	ldrb	r3, [r7, #3]
 8001350:	7113      	strb	r3, [r2, #4]
	LobotTxBuf[5] = GET_LOW_BYTE(Time);                //取得时间的低八位
 8001352:	883b      	ldrh	r3, [r7, #0]
 8001354:	b2da      	uxtb	r2, r3
 8001356:	4b23      	ldr	r3, [pc, #140]	; (80013e4 <moveServosByArray+0xe8>)
 8001358:	715a      	strb	r2, [r3, #5]
	LobotTxBuf[6] = GET_HIGH_BYTE(Time);               //取得时间的高八位
 800135a:	883b      	ldrh	r3, [r7, #0]
 800135c:	0a1b      	lsrs	r3, r3, #8
 800135e:	b29b      	uxth	r3, r3
 8001360:	b2da      	uxtb	r2, r3
 8001362:	4b20      	ldr	r3, [pc, #128]	; (80013e4 <moveServosByArray+0xe8>)
 8001364:	719a      	strb	r2, [r3, #6]

	for (i = 0; i < Num; i++) {                        //循环填充舵机ID和对应目标位置
 8001366:	2300      	movs	r3, #0
 8001368:	73bb      	strb	r3, [r7, #14]
 800136a:	e027      	b.n	80013bc <moveServosByArray+0xc0>
		LobotTxBuf[index++] = servos[i].ID;              //填充舵机ID
 800136c:	7bbb      	ldrb	r3, [r7, #14]
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	441a      	add	r2, r3
 8001374:	7bfb      	ldrb	r3, [r7, #15]
 8001376:	1c59      	adds	r1, r3, #1
 8001378:	73f9      	strb	r1, [r7, #15]
 800137a:	4619      	mov	r1, r3
 800137c:	7812      	ldrb	r2, [r2, #0]
 800137e:	4b19      	ldr	r3, [pc, #100]	; (80013e4 <moveServosByArray+0xe8>)
 8001380:	545a      	strb	r2, [r3, r1]
		LobotTxBuf[index++] = GET_LOW_BYTE(servos[i].Position); //填充目标位置低八位
 8001382:	7bbb      	ldrb	r3, [r7, #14]
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	4413      	add	r3, r2
 800138a:	8859      	ldrh	r1, [r3, #2]
 800138c:	7bfb      	ldrb	r3, [r7, #15]
 800138e:	1c5a      	adds	r2, r3, #1
 8001390:	73fa      	strb	r2, [r7, #15]
 8001392:	461a      	mov	r2, r3
 8001394:	b2c9      	uxtb	r1, r1
 8001396:	4b13      	ldr	r3, [pc, #76]	; (80013e4 <moveServosByArray+0xe8>)
 8001398:	5499      	strb	r1, [r3, r2]
		LobotTxBuf[index++] = GET_HIGH_BYTE(servos[i].Position);//填充目标位置高八位
 800139a:	7bbb      	ldrb	r3, [r7, #14]
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	4413      	add	r3, r2
 80013a2:	885b      	ldrh	r3, [r3, #2]
 80013a4:	0a1b      	lsrs	r3, r3, #8
 80013a6:	b299      	uxth	r1, r3
 80013a8:	7bfb      	ldrb	r3, [r7, #15]
 80013aa:	1c5a      	adds	r2, r3, #1
 80013ac:	73fa      	strb	r2, [r7, #15]
 80013ae:	461a      	mov	r2, r3
 80013b0:	b2c9      	uxtb	r1, r1
 80013b2:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <moveServosByArray+0xe8>)
 80013b4:	5499      	strb	r1, [r3, r2]
	for (i = 0; i < Num; i++) {                        //循环填充舵机ID和对应目标位置
 80013b6:	7bbb      	ldrb	r3, [r7, #14]
 80013b8:	3301      	adds	r3, #1
 80013ba:	73bb      	strb	r3, [r7, #14]
 80013bc:	7bba      	ldrb	r2, [r7, #14]
 80013be:	78fb      	ldrb	r3, [r7, #3]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d3d3      	bcc.n	800136c <moveServosByArray+0x70>
	}

//	uartWriteBuf(LobotTxBuf, LobotTxBuf[2] + 2);             //发送
	HAL_UART_Transmit(&huart3, LobotTxBuf, LobotTxBuf[2] + 2, 0xffff);
 80013c4:	4b07      	ldr	r3, [pc, #28]	; (80013e4 <moveServosByArray+0xe8>)
 80013c6:	789b      	ldrb	r3, [r3, #2]
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	3302      	adds	r3, #2
 80013cc:	b29a      	uxth	r2, r3
 80013ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013d2:	4904      	ldr	r1, [pc, #16]	; (80013e4 <moveServosByArray+0xe8>)
 80013d4:	4804      	ldr	r0, [pc, #16]	; (80013e8 <moveServosByArray+0xec>)
 80013d6:	f002 fecc 	bl	8004172 <HAL_UART_Transmit>
 80013da:	e000      	b.n	80013de <moveServosByArray+0xe2>
		return;                                          //舵机数不能为零和大与32，时间不能为零
 80013dc:	bf00      	nop
}
 80013de:	3710      	adds	r7, #16
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	2000023c 	.word	0x2000023c
 80013e8:	20000304 	.word	0x20000304

080013ec <servoRotate>:

void servoRotate(uint16_t AngleX,uint16_t AngleY){
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	460a      	mov	r2, r1
 80013f6:	80fb      	strh	r3, [r7, #6]
 80013f8:	4613      	mov	r3, r2
 80013fa:	80bb      	strh	r3, [r7, #4]
	servoXY[0].Position = AngleX+500;
 80013fc:	88fb      	ldrh	r3, [r7, #6]
 80013fe:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001402:	b29a      	uxth	r2, r3
 8001404:	4b08      	ldr	r3, [pc, #32]	; (8001428 <servoRotate+0x3c>)
 8001406:	805a      	strh	r2, [r3, #2]
	servoXY[1].Position = AngleY+500;
 8001408:	88bb      	ldrh	r3, [r7, #4]
 800140a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800140e:	b29a      	uxth	r2, r3
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <servoRotate+0x3c>)
 8001412:	80da      	strh	r2, [r3, #6]
	moveServosByArray(servoXY, 2, 30);
 8001414:	221e      	movs	r2, #30
 8001416:	2102      	movs	r1, #2
 8001418:	4803      	ldr	r0, [pc, #12]	; (8001428 <servoRotate+0x3c>)
 800141a:	f7ff ff6f 	bl	80012fc <moveServosByArray>
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000088 	.word	0x20000088

0800142c <WriteCmd>:

0xD8, 0x30, 0x8D, 0x14, 0xAF};      //初始化命令


void WriteCmd(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af04      	add	r7, sp, #16
	uint8_t i = 0;
 8001432:	2300      	movs	r3, #0
 8001434:	71fb      	strb	r3, [r7, #7]
	for(i=0; i<27; i++)
 8001436:	2300      	movs	r3, #0
 8001438:	71fb      	strb	r3, [r7, #7]
 800143a:	e011      	b.n	8001460 <WriteCmd+0x34>
	{
		HAL_I2C_Mem_Write(&hi2c1 ,0x78,0x00,I2C_MEMADD_SIZE_8BIT,CMD_Data+i,1,0x100);
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	4a0c      	ldr	r2, [pc, #48]	; (8001470 <WriteCmd+0x44>)
 8001440:	4413      	add	r3, r2
 8001442:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001446:	9202      	str	r2, [sp, #8]
 8001448:	2201      	movs	r2, #1
 800144a:	9201      	str	r2, [sp, #4]
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	2301      	movs	r3, #1
 8001450:	2200      	movs	r2, #0
 8001452:	2178      	movs	r1, #120	; 0x78
 8001454:	4807      	ldr	r0, [pc, #28]	; (8001474 <WriteCmd+0x48>)
 8001456:	f001 fb8f 	bl	8002b78 <HAL_I2C_Mem_Write>
	for(i=0; i<27; i++)
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	3301      	adds	r3, #1
 800145e:	71fb      	strb	r3, [r7, #7]
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	2b1a      	cmp	r3, #26
 8001464:	d9ea      	bls.n	800143c <WriteCmd+0x10>
	}
}
 8001466:	bf00      	nop
 8001468:	bf00      	nop
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20000090 	.word	0x20000090
 8001474:	20000160 	.word	0x20000160

08001478 <OLED_WR_CMD>:
//向设备写控制命令
void OLED_WR_CMD(uint8_t cmd)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af04      	add	r7, sp, #16
 800147e:	4603      	mov	r3, r0
 8001480:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1 ,0x78,0x00,I2C_MEMADD_SIZE_8BIT,&cmd,1,0x100);
 8001482:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001486:	9302      	str	r3, [sp, #8]
 8001488:	2301      	movs	r3, #1
 800148a:	9301      	str	r3, [sp, #4]
 800148c:	1dfb      	adds	r3, r7, #7
 800148e:	9300      	str	r3, [sp, #0]
 8001490:	2301      	movs	r3, #1
 8001492:	2200      	movs	r2, #0
 8001494:	2178      	movs	r1, #120	; 0x78
 8001496:	4803      	ldr	r0, [pc, #12]	; (80014a4 <OLED_WR_CMD+0x2c>)
 8001498:	f001 fb6e 	bl	8002b78 <HAL_I2C_Mem_Write>
}
 800149c:	bf00      	nop
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	20000160 	.word	0x20000160

080014a8 <OLED_WR_DATA>:
//向设备写数据
void OLED_WR_DATA(uint8_t data)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af04      	add	r7, sp, #16
 80014ae:	4603      	mov	r3, r0
 80014b0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1 ,0x78,0x40,I2C_MEMADD_SIZE_8BIT,&data,1,0x100);
 80014b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014b6:	9302      	str	r3, [sp, #8]
 80014b8:	2301      	movs	r3, #1
 80014ba:	9301      	str	r3, [sp, #4]
 80014bc:	1dfb      	adds	r3, r7, #7
 80014be:	9300      	str	r3, [sp, #0]
 80014c0:	2301      	movs	r3, #1
 80014c2:	2240      	movs	r2, #64	; 0x40
 80014c4:	2178      	movs	r1, #120	; 0x78
 80014c6:	4803      	ldr	r0, [pc, #12]	; (80014d4 <OLED_WR_DATA+0x2c>)
 80014c8:	f001 fb56 	bl	8002b78 <HAL_I2C_Mem_Write>
}
 80014cc:	bf00      	nop
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20000160 	.word	0x20000160

080014d8 <OLED_Init>:
//初始化oled屏幕
void OLED_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
	HAL_Delay(200);
 80014dc:	20c8      	movs	r0, #200	; 0xc8
 80014de:	f000 fb01 	bl	8001ae4 <HAL_Delay>

	WriteCmd();
 80014e2:	f7ff ffa3 	bl	800142c <WriteCmd>
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}

080014ea <OLED_Clear>:
//清屏
void OLED_Clear(void)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b082      	sub	sp, #8
 80014ee:	af00      	add	r7, sp, #0
	uint8_t i,n;
	for(i=0;i<8;i++)
 80014f0:	2300      	movs	r3, #0
 80014f2:	71fb      	strb	r3, [r7, #7]
 80014f4:	e01b      	b.n	800152e <OLED_Clear+0x44>
	{
		OLED_WR_CMD(0xb0+i);
 80014f6:	79fb      	ldrb	r3, [r7, #7]
 80014f8:	3b50      	subs	r3, #80	; 0x50
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff ffbb 	bl	8001478 <OLED_WR_CMD>
		OLED_WR_CMD (0x00);
 8001502:	2000      	movs	r0, #0
 8001504:	f7ff ffb8 	bl	8001478 <OLED_WR_CMD>
		OLED_WR_CMD (0x10);
 8001508:	2010      	movs	r0, #16
 800150a:	f7ff ffb5 	bl	8001478 <OLED_WR_CMD>
		for(n=0;n<128;n++)
 800150e:	2300      	movs	r3, #0
 8001510:	71bb      	strb	r3, [r7, #6]
 8001512:	e005      	b.n	8001520 <OLED_Clear+0x36>
			OLED_WR_DATA(0);
 8001514:	2000      	movs	r0, #0
 8001516:	f7ff ffc7 	bl	80014a8 <OLED_WR_DATA>
		for(n=0;n<128;n++)
 800151a:	79bb      	ldrb	r3, [r7, #6]
 800151c:	3301      	adds	r3, #1
 800151e:	71bb      	strb	r3, [r7, #6]
 8001520:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001524:	2b00      	cmp	r3, #0
 8001526:	daf5      	bge.n	8001514 <OLED_Clear+0x2a>
	for(i=0;i<8;i++)
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	3301      	adds	r3, #1
 800152c:	71fb      	strb	r3, [r7, #7]
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	2b07      	cmp	r3, #7
 8001532:	d9e0      	bls.n	80014f6 <OLED_Clear+0xc>
	}
}
 8001534:	bf00      	nop
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
	...

08001540 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	607b      	str	r3, [r7, #4]
 800154a:	4b10      	ldr	r3, [pc, #64]	; (800158c <HAL_MspInit+0x4c>)
 800154c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154e:	4a0f      	ldr	r2, [pc, #60]	; (800158c <HAL_MspInit+0x4c>)
 8001550:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001554:	6453      	str	r3, [r2, #68]	; 0x44
 8001556:	4b0d      	ldr	r3, [pc, #52]	; (800158c <HAL_MspInit+0x4c>)
 8001558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800155e:	607b      	str	r3, [r7, #4]
 8001560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	603b      	str	r3, [r7, #0]
 8001566:	4b09      	ldr	r3, [pc, #36]	; (800158c <HAL_MspInit+0x4c>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	4a08      	ldr	r2, [pc, #32]	; (800158c <HAL_MspInit+0x4c>)
 800156c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001570:	6413      	str	r3, [r2, #64]	; 0x40
 8001572:	4b06      	ldr	r3, [pc, #24]	; (800158c <HAL_MspInit+0x4c>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157a:	603b      	str	r3, [r7, #0]
 800157c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	40023800 	.word	0x40023800

08001590 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001594:	e7fe      	b.n	8001594 <NMI_Handler+0x4>

08001596 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001596:	b480      	push	{r7}
 8001598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800159a:	e7fe      	b.n	800159a <HardFault_Handler+0x4>

0800159c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015a0:	e7fe      	b.n	80015a0 <MemManage_Handler+0x4>

080015a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015a2:	b480      	push	{r7}
 80015a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015a6:	e7fe      	b.n	80015a6 <BusFault_Handler+0x4>

080015a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015ac:	e7fe      	b.n	80015ac <UsageFault_Handler+0x4>

080015ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ae:	b480      	push	{r7}
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015dc:	f000 fa62 	bl	8001aa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015e0:	bf00      	nop
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80015e8:	4803      	ldr	r0, [pc, #12]	; (80015f8 <USART1_IRQHandler+0x14>)
 80015ea:	f002 fedf 	bl	80043ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  USER_UART_IRQHandler(&huart1);
 80015ee:	4802      	ldr	r0, [pc, #8]	; (80015f8 <USART1_IRQHandler+0x14>)
 80015f0:	f7fe ffcc 	bl	800058c <USER_UART_IRQHandler>
  /* USER CODE END USART1_IRQn 1 */
}
 80015f4:	bf00      	nop
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20000408 	.word	0x20000408

080015fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001600:	4802      	ldr	r0, [pc, #8]	; (800160c <TIM6_DAC_IRQHandler+0x10>)
 8001602:	f002 fb08 	bl	8003c16 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	200002bc 	.word	0x200002bc

08001610 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001614:	4802      	ldr	r0, [pc, #8]	; (8001620 <DMA2_Stream2_IRQHandler+0x10>)
 8001616:	f000 fd33 	bl	8002080 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	200003a8 	.word	0x200003a8

08001624 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001628:	4802      	ldr	r0, [pc, #8]	; (8001634 <DMA2_Stream7_IRQHandler+0x10>)
 800162a:	f000 fd29 	bl	8002080 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20000348 	.word	0x20000348

08001638 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800163c:	4b06      	ldr	r3, [pc, #24]	; (8001658 <SystemInit+0x20>)
 800163e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001642:	4a05      	ldr	r2, [pc, #20]	; (8001658 <SystemInit+0x20>)
 8001644:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001648:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001662:	463b      	mov	r3, r7
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800166a:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <MX_TIM6_Init+0x64>)
 800166c:	4a15      	ldr	r2, [pc, #84]	; (80016c4 <MX_TIM6_Init+0x68>)
 800166e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8400-1;
 8001670:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <MX_TIM6_Init+0x64>)
 8001672:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001676:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001678:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <MX_TIM6_Init+0x64>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 5000;
 800167e:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <MX_TIM6_Init+0x64>)
 8001680:	f241 3288 	movw	r2, #5000	; 0x1388
 8001684:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001686:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <MX_TIM6_Init+0x64>)
 8001688:	2200      	movs	r2, #0
 800168a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800168c:	480c      	ldr	r0, [pc, #48]	; (80016c0 <MX_TIM6_Init+0x64>)
 800168e:	f002 f9d3 	bl	8003a38 <HAL_TIM_Base_Init>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001698:	f7ff fe2a 	bl	80012f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800169c:	2300      	movs	r3, #0
 800169e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016a0:	2300      	movs	r3, #0
 80016a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80016a4:	463b      	mov	r3, r7
 80016a6:	4619      	mov	r1, r3
 80016a8:	4805      	ldr	r0, [pc, #20]	; (80016c0 <MX_TIM6_Init+0x64>)
 80016aa:	f002 fc85 	bl	8003fb8 <HAL_TIMEx_MasterConfigSynchronization>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80016b4:	f7ff fe1c 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80016b8:	bf00      	nop
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	200002bc 	.word	0x200002bc
 80016c4:	40001000 	.word	0x40001000

080016c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a0e      	ldr	r2, [pc, #56]	; (8001710 <HAL_TIM_Base_MspInit+0x48>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d115      	bne.n	8001706 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	4b0d      	ldr	r3, [pc, #52]	; (8001714 <HAL_TIM_Base_MspInit+0x4c>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	4a0c      	ldr	r2, [pc, #48]	; (8001714 <HAL_TIM_Base_MspInit+0x4c>)
 80016e4:	f043 0310 	orr.w	r3, r3, #16
 80016e8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ea:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <HAL_TIM_Base_MspInit+0x4c>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	f003 0310 	and.w	r3, r3, #16
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 0);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2102      	movs	r1, #2
 80016fa:	2036      	movs	r0, #54	; 0x36
 80016fc:	f000 faf1 	bl	8001ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001700:	2036      	movs	r0, #54	; 0x36
 8001702:	f000 fb0a 	bl	8001d1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001706:	bf00      	nop
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40001000 	.word	0x40001000
 8001714:	40023800 	.word	0x40023800

08001718 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800171c:	4b15      	ldr	r3, [pc, #84]	; (8001774 <MX_USART1_UART_Init+0x5c>)
 800171e:	4a16      	ldr	r2, [pc, #88]	; (8001778 <MX_USART1_UART_Init+0x60>)
 8001720:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001722:	4b14      	ldr	r3, [pc, #80]	; (8001774 <MX_USART1_UART_Init+0x5c>)
 8001724:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001728:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800172a:	4b12      	ldr	r3, [pc, #72]	; (8001774 <MX_USART1_UART_Init+0x5c>)
 800172c:	2200      	movs	r2, #0
 800172e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001730:	4b10      	ldr	r3, [pc, #64]	; (8001774 <MX_USART1_UART_Init+0x5c>)
 8001732:	2200      	movs	r2, #0
 8001734:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001736:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <MX_USART1_UART_Init+0x5c>)
 8001738:	2200      	movs	r2, #0
 800173a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800173c:	4b0d      	ldr	r3, [pc, #52]	; (8001774 <MX_USART1_UART_Init+0x5c>)
 800173e:	220c      	movs	r2, #12
 8001740:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001742:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <MX_USART1_UART_Init+0x5c>)
 8001744:	2200      	movs	r2, #0
 8001746:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001748:	4b0a      	ldr	r3, [pc, #40]	; (8001774 <MX_USART1_UART_Init+0x5c>)
 800174a:	2200      	movs	r2, #0
 800174c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800174e:	4809      	ldr	r0, [pc, #36]	; (8001774 <MX_USART1_UART_Init+0x5c>)
 8001750:	f002 fcc2 	bl	80040d8 <HAL_UART_Init>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800175a:	f7ff fdc9 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE); //使能IDLE中断
 800175e:	4b05      	ldr	r3, [pc, #20]	; (8001774 <MX_USART1_UART_Init+0x5c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	68da      	ldr	r2, [r3, #12]
 8001764:	4b03      	ldr	r3, [pc, #12]	; (8001774 <MX_USART1_UART_Init+0x5c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f042 0210 	orr.w	r2, r2, #16
 800176c:	60da      	str	r2, [r3, #12]
  /* USER CODE END USART1_Init 2 */

}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000408 	.word	0x20000408
 8001778:	40011000 	.word	0x40011000

0800177c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001780:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <MX_USART3_UART_Init+0x4c>)
 8001782:	4a12      	ldr	r2, [pc, #72]	; (80017cc <MX_USART3_UART_Init+0x50>)
 8001784:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001786:	4b10      	ldr	r3, [pc, #64]	; (80017c8 <MX_USART3_UART_Init+0x4c>)
 8001788:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800178c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800178e:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <MX_USART3_UART_Init+0x4c>)
 8001790:	2200      	movs	r2, #0
 8001792:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001794:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <MX_USART3_UART_Init+0x4c>)
 8001796:	2200      	movs	r2, #0
 8001798:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800179a:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <MX_USART3_UART_Init+0x4c>)
 800179c:	2200      	movs	r2, #0
 800179e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017a0:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <MX_USART3_UART_Init+0x4c>)
 80017a2:	220c      	movs	r2, #12
 80017a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017a6:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <MX_USART3_UART_Init+0x4c>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017ac:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <MX_USART3_UART_Init+0x4c>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017b2:	4805      	ldr	r0, [pc, #20]	; (80017c8 <MX_USART3_UART_Init+0x4c>)
 80017b4:	f002 fc90 	bl	80040d8 <HAL_UART_Init>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80017be:	f7ff fd97 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000304 	.word	0x20000304
 80017cc:	40004800 	.word	0x40004800

080017d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b08c      	sub	sp, #48	; 0x30
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d8:	f107 031c 	add.w	r3, r7, #28
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]
 80017e6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a66      	ldr	r2, [pc, #408]	; (8001988 <HAL_UART_MspInit+0x1b8>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	f040 8093 	bne.w	800191a <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017f4:	2300      	movs	r3, #0
 80017f6:	61bb      	str	r3, [r7, #24]
 80017f8:	4b64      	ldr	r3, [pc, #400]	; (800198c <HAL_UART_MspInit+0x1bc>)
 80017fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fc:	4a63      	ldr	r2, [pc, #396]	; (800198c <HAL_UART_MspInit+0x1bc>)
 80017fe:	f043 0310 	orr.w	r3, r3, #16
 8001802:	6453      	str	r3, [r2, #68]	; 0x44
 8001804:	4b61      	ldr	r3, [pc, #388]	; (800198c <HAL_UART_MspInit+0x1bc>)
 8001806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001808:	f003 0310 	and.w	r3, r3, #16
 800180c:	61bb      	str	r3, [r7, #24]
 800180e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]
 8001814:	4b5d      	ldr	r3, [pc, #372]	; (800198c <HAL_UART_MspInit+0x1bc>)
 8001816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001818:	4a5c      	ldr	r2, [pc, #368]	; (800198c <HAL_UART_MspInit+0x1bc>)
 800181a:	f043 0301 	orr.w	r3, r3, #1
 800181e:	6313      	str	r3, [r2, #48]	; 0x30
 8001820:	4b5a      	ldr	r3, [pc, #360]	; (800198c <HAL_UART_MspInit+0x1bc>)
 8001822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001824:	f003 0301 	and.w	r3, r3, #1
 8001828:	617b      	str	r3, [r7, #20]
 800182a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800182c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001830:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001832:	2302      	movs	r3, #2
 8001834:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	2300      	movs	r3, #0
 8001838:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800183a:	2303      	movs	r3, #3
 800183c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800183e:	2307      	movs	r3, #7
 8001840:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001842:	f107 031c 	add.w	r3, r7, #28
 8001846:	4619      	mov	r1, r3
 8001848:	4851      	ldr	r0, [pc, #324]	; (8001990 <HAL_UART_MspInit+0x1c0>)
 800184a:	f000 fe83 	bl	8002554 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800184e:	4b51      	ldr	r3, [pc, #324]	; (8001994 <HAL_UART_MspInit+0x1c4>)
 8001850:	4a51      	ldr	r2, [pc, #324]	; (8001998 <HAL_UART_MspInit+0x1c8>)
 8001852:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001854:	4b4f      	ldr	r3, [pc, #316]	; (8001994 <HAL_UART_MspInit+0x1c4>)
 8001856:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800185a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800185c:	4b4d      	ldr	r3, [pc, #308]	; (8001994 <HAL_UART_MspInit+0x1c4>)
 800185e:	2200      	movs	r2, #0
 8001860:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001862:	4b4c      	ldr	r3, [pc, #304]	; (8001994 <HAL_UART_MspInit+0x1c4>)
 8001864:	2200      	movs	r2, #0
 8001866:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001868:	4b4a      	ldr	r3, [pc, #296]	; (8001994 <HAL_UART_MspInit+0x1c4>)
 800186a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800186e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001870:	4b48      	ldr	r3, [pc, #288]	; (8001994 <HAL_UART_MspInit+0x1c4>)
 8001872:	2200      	movs	r2, #0
 8001874:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001876:	4b47      	ldr	r3, [pc, #284]	; (8001994 <HAL_UART_MspInit+0x1c4>)
 8001878:	2200      	movs	r2, #0
 800187a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800187c:	4b45      	ldr	r3, [pc, #276]	; (8001994 <HAL_UART_MspInit+0x1c4>)
 800187e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001882:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001884:	4b43      	ldr	r3, [pc, #268]	; (8001994 <HAL_UART_MspInit+0x1c4>)
 8001886:	2200      	movs	r2, #0
 8001888:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800188a:	4b42      	ldr	r3, [pc, #264]	; (8001994 <HAL_UART_MspInit+0x1c4>)
 800188c:	2200      	movs	r2, #0
 800188e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001890:	4840      	ldr	r0, [pc, #256]	; (8001994 <HAL_UART_MspInit+0x1c4>)
 8001892:	f000 fa5d 	bl	8001d50 <HAL_DMA_Init>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 800189c:	f7ff fd28 	bl	80012f0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a3c      	ldr	r2, [pc, #240]	; (8001994 <HAL_UART_MspInit+0x1c4>)
 80018a4:	639a      	str	r2, [r3, #56]	; 0x38
 80018a6:	4a3b      	ldr	r2, [pc, #236]	; (8001994 <HAL_UART_MspInit+0x1c4>)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80018ac:	4b3b      	ldr	r3, [pc, #236]	; (800199c <HAL_UART_MspInit+0x1cc>)
 80018ae:	4a3c      	ldr	r2, [pc, #240]	; (80019a0 <HAL_UART_MspInit+0x1d0>)
 80018b0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80018b2:	4b3a      	ldr	r3, [pc, #232]	; (800199c <HAL_UART_MspInit+0x1cc>)
 80018b4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018b8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018ba:	4b38      	ldr	r3, [pc, #224]	; (800199c <HAL_UART_MspInit+0x1cc>)
 80018bc:	2240      	movs	r2, #64	; 0x40
 80018be:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018c0:	4b36      	ldr	r3, [pc, #216]	; (800199c <HAL_UART_MspInit+0x1cc>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018c6:	4b35      	ldr	r3, [pc, #212]	; (800199c <HAL_UART_MspInit+0x1cc>)
 80018c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018cc:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018ce:	4b33      	ldr	r3, [pc, #204]	; (800199c <HAL_UART_MspInit+0x1cc>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018d4:	4b31      	ldr	r3, [pc, #196]	; (800199c <HAL_UART_MspInit+0x1cc>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80018da:	4b30      	ldr	r3, [pc, #192]	; (800199c <HAL_UART_MspInit+0x1cc>)
 80018dc:	2200      	movs	r2, #0
 80018de:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80018e0:	4b2e      	ldr	r3, [pc, #184]	; (800199c <HAL_UART_MspInit+0x1cc>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018e6:	4b2d      	ldr	r3, [pc, #180]	; (800199c <HAL_UART_MspInit+0x1cc>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80018ec:	482b      	ldr	r0, [pc, #172]	; (800199c <HAL_UART_MspInit+0x1cc>)
 80018ee:	f000 fa2f 	bl	8001d50 <HAL_DMA_Init>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 80018f8:	f7ff fcfa 	bl	80012f0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a27      	ldr	r2, [pc, #156]	; (800199c <HAL_UART_MspInit+0x1cc>)
 8001900:	635a      	str	r2, [r3, #52]	; 0x34
 8001902:	4a26      	ldr	r2, [pc, #152]	; (800199c <HAL_UART_MspInit+0x1cc>)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001908:	2200      	movs	r2, #0
 800190a:	2100      	movs	r1, #0
 800190c:	2025      	movs	r0, #37	; 0x25
 800190e:	f000 f9e8 	bl	8001ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001912:	2025      	movs	r0, #37	; 0x25
 8001914:	f000 fa01 	bl	8001d1a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001918:	e031      	b.n	800197e <HAL_UART_MspInit+0x1ae>
  else if(uartHandle->Instance==USART3)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a21      	ldr	r2, [pc, #132]	; (80019a4 <HAL_UART_MspInit+0x1d4>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d12c      	bne.n	800197e <HAL_UART_MspInit+0x1ae>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001924:	2300      	movs	r3, #0
 8001926:	613b      	str	r3, [r7, #16]
 8001928:	4b18      	ldr	r3, [pc, #96]	; (800198c <HAL_UART_MspInit+0x1bc>)
 800192a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192c:	4a17      	ldr	r2, [pc, #92]	; (800198c <HAL_UART_MspInit+0x1bc>)
 800192e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001932:	6413      	str	r3, [r2, #64]	; 0x40
 8001934:	4b15      	ldr	r3, [pc, #84]	; (800198c <HAL_UART_MspInit+0x1bc>)
 8001936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001938:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800193c:	613b      	str	r3, [r7, #16]
 800193e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001940:	2300      	movs	r3, #0
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	4b11      	ldr	r3, [pc, #68]	; (800198c <HAL_UART_MspInit+0x1bc>)
 8001946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001948:	4a10      	ldr	r2, [pc, #64]	; (800198c <HAL_UART_MspInit+0x1bc>)
 800194a:	f043 0308 	orr.w	r3, r3, #8
 800194e:	6313      	str	r3, [r2, #48]	; 0x30
 8001950:	4b0e      	ldr	r3, [pc, #56]	; (800198c <HAL_UART_MspInit+0x1bc>)
 8001952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001954:	f003 0308 	and.w	r3, r3, #8
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800195c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001960:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001962:	2302      	movs	r3, #2
 8001964:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800196a:	2303      	movs	r3, #3
 800196c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800196e:	2307      	movs	r3, #7
 8001970:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001972:	f107 031c 	add.w	r3, r7, #28
 8001976:	4619      	mov	r1, r3
 8001978:	480b      	ldr	r0, [pc, #44]	; (80019a8 <HAL_UART_MspInit+0x1d8>)
 800197a:	f000 fdeb 	bl	8002554 <HAL_GPIO_Init>
}
 800197e:	bf00      	nop
 8001980:	3730      	adds	r7, #48	; 0x30
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40011000 	.word	0x40011000
 800198c:	40023800 	.word	0x40023800
 8001990:	40020000 	.word	0x40020000
 8001994:	200003a8 	.word	0x200003a8
 8001998:	40026440 	.word	0x40026440
 800199c:	20000348 	.word	0x20000348
 80019a0:	400264b8 	.word	0x400264b8
 80019a4:	40004800 	.word	0x40004800
 80019a8:	40020c00 	.word	0x40020c00

080019ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80019ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019b0:	480d      	ldr	r0, [pc, #52]	; (80019e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019b2:	490e      	ldr	r1, [pc, #56]	; (80019ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019b4:	4a0e      	ldr	r2, [pc, #56]	; (80019f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019b8:	e002      	b.n	80019c0 <LoopCopyDataInit>

080019ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019be:	3304      	adds	r3, #4

080019c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019c4:	d3f9      	bcc.n	80019ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019c6:	4a0b      	ldr	r2, [pc, #44]	; (80019f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019c8:	4c0b      	ldr	r4, [pc, #44]	; (80019f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019cc:	e001      	b.n	80019d2 <LoopFillZerobss>

080019ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019d0:	3204      	adds	r2, #4

080019d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019d4:	d3fb      	bcc.n	80019ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019d6:	f7ff fe2f 	bl	8001638 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019da:	f003 fb43 	bl	8005064 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019de:	f7ff fadd 	bl	8000f9c <main>
  bx  lr    
 80019e2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80019e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019ec:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 80019f0:	08005104 	.word	0x08005104
  ldr r2, =_sbss
 80019f4:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 80019f8:	20000450 	.word	0x20000450

080019fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019fc:	e7fe      	b.n	80019fc <ADC_IRQHandler>
	...

08001a00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a04:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <HAL_Init+0x40>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a0d      	ldr	r2, [pc, #52]	; (8001a40 <HAL_Init+0x40>)
 8001a0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a10:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <HAL_Init+0x40>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a0a      	ldr	r2, [pc, #40]	; (8001a40 <HAL_Init+0x40>)
 8001a16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a1c:	4b08      	ldr	r3, [pc, #32]	; (8001a40 <HAL_Init+0x40>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a07      	ldr	r2, [pc, #28]	; (8001a40 <HAL_Init+0x40>)
 8001a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a28:	2003      	movs	r0, #3
 8001a2a:	f000 f94f 	bl	8001ccc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a2e:	2000      	movs	r0, #0
 8001a30:	f000 f808 	bl	8001a44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a34:	f7ff fd84 	bl	8001540 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40023c00 	.word	0x40023c00

08001a44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a4c:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <HAL_InitTick+0x54>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	4b12      	ldr	r3, [pc, #72]	; (8001a9c <HAL_InitTick+0x58>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	4619      	mov	r1, r3
 8001a56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a62:	4618      	mov	r0, r3
 8001a64:	f000 f967 	bl	8001d36 <HAL_SYSTICK_Config>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e00e      	b.n	8001a90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2b0f      	cmp	r3, #15
 8001a76:	d80a      	bhi.n	8001a8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a78:	2200      	movs	r2, #0
 8001a7a:	6879      	ldr	r1, [r7, #4]
 8001a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a80:	f000 f92f 	bl	8001ce2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a84:	4a06      	ldr	r2, [pc, #24]	; (8001aa0 <HAL_InitTick+0x5c>)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	e000      	b.n	8001a90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	200000ac 	.word	0x200000ac
 8001a9c:	200000b4 	.word	0x200000b4
 8001aa0:	200000b0 	.word	0x200000b0

08001aa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aa8:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <HAL_IncTick+0x20>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	461a      	mov	r2, r3
 8001aae:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <HAL_IncTick+0x24>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	4a04      	ldr	r2, [pc, #16]	; (8001ac8 <HAL_IncTick+0x24>)
 8001ab6:	6013      	str	r3, [r2, #0]
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	200000b4 	.word	0x200000b4
 8001ac8:	2000044c 	.word	0x2000044c

08001acc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  return uwTick;
 8001ad0:	4b03      	ldr	r3, [pc, #12]	; (8001ae0 <HAL_GetTick+0x14>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	2000044c 	.word	0x2000044c

08001ae4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aec:	f7ff ffee 	bl	8001acc <HAL_GetTick>
 8001af0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001afc:	d005      	beq.n	8001b0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001afe:	4b0a      	ldr	r3, [pc, #40]	; (8001b28 <HAL_Delay+0x44>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	461a      	mov	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	4413      	add	r3, r2
 8001b08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b0a:	bf00      	nop
 8001b0c:	f7ff ffde 	bl	8001acc <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d8f7      	bhi.n	8001b0c <HAL_Delay+0x28>
  {
  }
}
 8001b1c:	bf00      	nop
 8001b1e:	bf00      	nop
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	200000b4 	.word	0x200000b4

08001b2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b3c:	4b0c      	ldr	r3, [pc, #48]	; (8001b70 <__NVIC_SetPriorityGrouping+0x44>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b42:	68ba      	ldr	r2, [r7, #8]
 8001b44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b48:	4013      	ands	r3, r2
 8001b4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b5e:	4a04      	ldr	r2, [pc, #16]	; (8001b70 <__NVIC_SetPriorityGrouping+0x44>)
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	60d3      	str	r3, [r2, #12]
}
 8001b64:	bf00      	nop
 8001b66:	3714      	adds	r7, #20
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b78:	4b04      	ldr	r3, [pc, #16]	; (8001b8c <__NVIC_GetPriorityGrouping+0x18>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	0a1b      	lsrs	r3, r3, #8
 8001b7e:	f003 0307 	and.w	r3, r3, #7
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	db0b      	blt.n	8001bba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	f003 021f 	and.w	r2, r3, #31
 8001ba8:	4907      	ldr	r1, [pc, #28]	; (8001bc8 <__NVIC_EnableIRQ+0x38>)
 8001baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bae:	095b      	lsrs	r3, r3, #5
 8001bb0:	2001      	movs	r0, #1
 8001bb2:	fa00 f202 	lsl.w	r2, r0, r2
 8001bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	e000e100 	.word	0xe000e100

08001bcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	6039      	str	r1, [r7, #0]
 8001bd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	db0a      	blt.n	8001bf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	b2da      	uxtb	r2, r3
 8001be4:	490c      	ldr	r1, [pc, #48]	; (8001c18 <__NVIC_SetPriority+0x4c>)
 8001be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bea:	0112      	lsls	r2, r2, #4
 8001bec:	b2d2      	uxtb	r2, r2
 8001bee:	440b      	add	r3, r1
 8001bf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bf4:	e00a      	b.n	8001c0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	b2da      	uxtb	r2, r3
 8001bfa:	4908      	ldr	r1, [pc, #32]	; (8001c1c <__NVIC_SetPriority+0x50>)
 8001bfc:	79fb      	ldrb	r3, [r7, #7]
 8001bfe:	f003 030f 	and.w	r3, r3, #15
 8001c02:	3b04      	subs	r3, #4
 8001c04:	0112      	lsls	r2, r2, #4
 8001c06:	b2d2      	uxtb	r2, r2
 8001c08:	440b      	add	r3, r1
 8001c0a:	761a      	strb	r2, [r3, #24]
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	e000e100 	.word	0xe000e100
 8001c1c:	e000ed00 	.word	0xe000ed00

08001c20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b089      	sub	sp, #36	; 0x24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	f1c3 0307 	rsb	r3, r3, #7
 8001c3a:	2b04      	cmp	r3, #4
 8001c3c:	bf28      	it	cs
 8001c3e:	2304      	movcs	r3, #4
 8001c40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	3304      	adds	r3, #4
 8001c46:	2b06      	cmp	r3, #6
 8001c48:	d902      	bls.n	8001c50 <NVIC_EncodePriority+0x30>
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	3b03      	subs	r3, #3
 8001c4e:	e000      	b.n	8001c52 <NVIC_EncodePriority+0x32>
 8001c50:	2300      	movs	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c54:	f04f 32ff 	mov.w	r2, #4294967295
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	43da      	mvns	r2, r3
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	401a      	ands	r2, r3
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c68:	f04f 31ff 	mov.w	r1, #4294967295
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c72:	43d9      	mvns	r1, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c78:	4313      	orrs	r3, r2
         );
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3724      	adds	r7, #36	; 0x24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
	...

08001c88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	3b01      	subs	r3, #1
 8001c94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c98:	d301      	bcc.n	8001c9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e00f      	b.n	8001cbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c9e:	4a0a      	ldr	r2, [pc, #40]	; (8001cc8 <SysTick_Config+0x40>)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ca6:	210f      	movs	r1, #15
 8001ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cac:	f7ff ff8e 	bl	8001bcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cb0:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <SysTick_Config+0x40>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cb6:	4b04      	ldr	r3, [pc, #16]	; (8001cc8 <SysTick_Config+0x40>)
 8001cb8:	2207      	movs	r2, #7
 8001cba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	e000e010 	.word	0xe000e010

08001ccc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f7ff ff29 	bl	8001b2c <__NVIC_SetPriorityGrouping>
}
 8001cda:	bf00      	nop
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b086      	sub	sp, #24
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	4603      	mov	r3, r0
 8001cea:	60b9      	str	r1, [r7, #8]
 8001cec:	607a      	str	r2, [r7, #4]
 8001cee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cf4:	f7ff ff3e 	bl	8001b74 <__NVIC_GetPriorityGrouping>
 8001cf8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	68b9      	ldr	r1, [r7, #8]
 8001cfe:	6978      	ldr	r0, [r7, #20]
 8001d00:	f7ff ff8e 	bl	8001c20 <NVIC_EncodePriority>
 8001d04:	4602      	mov	r2, r0
 8001d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d0a:	4611      	mov	r1, r2
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff ff5d 	bl	8001bcc <__NVIC_SetPriority>
}
 8001d12:	bf00      	nop
 8001d14:	3718      	adds	r7, #24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b082      	sub	sp, #8
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	4603      	mov	r3, r0
 8001d22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff ff31 	bl	8001b90 <__NVIC_EnableIRQ>
}
 8001d2e:	bf00      	nop
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b082      	sub	sp, #8
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f7ff ffa2 	bl	8001c88 <SysTick_Config>
 8001d44:	4603      	mov	r3, r0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
	...

08001d50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d5c:	f7ff feb6 	bl	8001acc <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d101      	bne.n	8001d6c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e099      	b.n	8001ea0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2202      	movs	r2, #2
 8001d78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f022 0201 	bic.w	r2, r2, #1
 8001d8a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d8c:	e00f      	b.n	8001dae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d8e:	f7ff fe9d 	bl	8001acc <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b05      	cmp	r3, #5
 8001d9a:	d908      	bls.n	8001dae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2220      	movs	r2, #32
 8001da0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2203      	movs	r2, #3
 8001da6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e078      	b.n	8001ea0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d1e8      	bne.n	8001d8e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001dc4:	697a      	ldr	r2, [r7, #20]
 8001dc6:	4b38      	ldr	r3, [pc, #224]	; (8001ea8 <HAL_DMA_Init+0x158>)
 8001dc8:	4013      	ands	r3, r2
 8001dca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685a      	ldr	r2, [r3, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dda:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001de6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001df2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a1b      	ldr	r3, [r3, #32]
 8001df8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dfa:	697a      	ldr	r2, [r7, #20]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e04:	2b04      	cmp	r3, #4
 8001e06:	d107      	bne.n	8001e18 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e10:	4313      	orrs	r3, r2
 8001e12:	697a      	ldr	r2, [r7, #20]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	697a      	ldr	r2, [r7, #20]
 8001e1e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	695b      	ldr	r3, [r3, #20]
 8001e26:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	f023 0307 	bic.w	r3, r3, #7
 8001e2e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e34:	697a      	ldr	r2, [r7, #20]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3e:	2b04      	cmp	r3, #4
 8001e40:	d117      	bne.n	8001e72 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e46:	697a      	ldr	r2, [r7, #20]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d00e      	beq.n	8001e72 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f000 fb01 	bl	800245c <DMA_CheckFifoParam>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d008      	beq.n	8001e72 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2240      	movs	r2, #64	; 0x40
 8001e64:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e016      	b.n	8001ea0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	697a      	ldr	r2, [r7, #20]
 8001e78:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 fab8 	bl	80023f0 <DMA_CalcBaseAndBitshift>
 8001e80:	4603      	mov	r3, r0
 8001e82:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e88:	223f      	movs	r2, #63	; 0x3f
 8001e8a:	409a      	lsls	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3718      	adds	r7, #24
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	f010803f 	.word	0xf010803f

08001eac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	607a      	str	r2, [r7, #4]
 8001eb8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d101      	bne.n	8001ed2 <HAL_DMA_Start_IT+0x26>
 8001ece:	2302      	movs	r3, #2
 8001ed0:	e040      	b.n	8001f54 <HAL_DMA_Start_IT+0xa8>
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d12f      	bne.n	8001f46 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2202      	movs	r2, #2
 8001eea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	68b9      	ldr	r1, [r7, #8]
 8001efa:	68f8      	ldr	r0, [r7, #12]
 8001efc:	f000 fa4a 	bl	8002394 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f04:	223f      	movs	r2, #63	; 0x3f
 8001f06:	409a      	lsls	r2, r3
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f042 0216 	orr.w	r2, r2, #22
 8001f1a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d007      	beq.n	8001f34 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f042 0208 	orr.w	r2, r2, #8
 8001f32:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f042 0201 	orr.w	r2, r2, #1
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	e005      	b.n	8001f52 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f52:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3718      	adds	r7, #24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f68:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f6a:	f7ff fdaf 	bl	8001acc <HAL_GetTick>
 8001f6e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d008      	beq.n	8001f8e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2280      	movs	r2, #128	; 0x80
 8001f80:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e052      	b.n	8002034 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f022 0216 	bic.w	r2, r2, #22
 8001f9c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	695a      	ldr	r2, [r3, #20]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d103      	bne.n	8001fbe <HAL_DMA_Abort+0x62>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d007      	beq.n	8001fce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 0208 	bic.w	r2, r2, #8
 8001fcc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f022 0201 	bic.w	r2, r2, #1
 8001fdc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fde:	e013      	b.n	8002008 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fe0:	f7ff fd74 	bl	8001acc <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b05      	cmp	r3, #5
 8001fec:	d90c      	bls.n	8002008 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2220      	movs	r2, #32
 8001ff2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2203      	movs	r2, #3
 8002000:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e015      	b.n	8002034 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1e4      	bne.n	8001fe0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800201a:	223f      	movs	r2, #63	; 0x3f
 800201c:	409a      	lsls	r2, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2201      	movs	r2, #1
 800202e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3710      	adds	r7, #16
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800204a:	b2db      	uxtb	r3, r3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d004      	beq.n	800205a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2280      	movs	r2, #128	; 0x80
 8002054:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e00c      	b.n	8002074 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2205      	movs	r2, #5
 800205e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f022 0201 	bic.w	r2, r2, #1
 8002070:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002088:	2300      	movs	r3, #0
 800208a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800208c:	4b92      	ldr	r3, [pc, #584]	; (80022d8 <HAL_DMA_IRQHandler+0x258>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a92      	ldr	r2, [pc, #584]	; (80022dc <HAL_DMA_IRQHandler+0x25c>)
 8002092:	fba2 2303 	umull	r2, r3, r2, r3
 8002096:	0a9b      	lsrs	r3, r3, #10
 8002098:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020aa:	2208      	movs	r2, #8
 80020ac:	409a      	lsls	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	4013      	ands	r3, r2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d01a      	beq.n	80020ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d013      	beq.n	80020ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 0204 	bic.w	r2, r2, #4
 80020d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d8:	2208      	movs	r2, #8
 80020da:	409a      	lsls	r2, r3
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e4:	f043 0201 	orr.w	r2, r3, #1
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f0:	2201      	movs	r2, #1
 80020f2:	409a      	lsls	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	4013      	ands	r3, r2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d012      	beq.n	8002122 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00b      	beq.n	8002122 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800210e:	2201      	movs	r2, #1
 8002110:	409a      	lsls	r2, r3
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800211a:	f043 0202 	orr.w	r2, r3, #2
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002126:	2204      	movs	r2, #4
 8002128:	409a      	lsls	r2, r3
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	4013      	ands	r3, r2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d012      	beq.n	8002158 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d00b      	beq.n	8002158 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002144:	2204      	movs	r2, #4
 8002146:	409a      	lsls	r2, r3
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002150:	f043 0204 	orr.w	r2, r3, #4
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800215c:	2210      	movs	r2, #16
 800215e:	409a      	lsls	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4013      	ands	r3, r2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d043      	beq.n	80021f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0308 	and.w	r3, r3, #8
 8002172:	2b00      	cmp	r3, #0
 8002174:	d03c      	beq.n	80021f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800217a:	2210      	movs	r2, #16
 800217c:	409a      	lsls	r2, r3
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d018      	beq.n	80021c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d108      	bne.n	80021b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d024      	beq.n	80021f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	4798      	blx	r3
 80021ae:	e01f      	b.n	80021f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d01b      	beq.n	80021f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	4798      	blx	r3
 80021c0:	e016      	b.n	80021f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d107      	bne.n	80021e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f022 0208 	bic.w	r2, r2, #8
 80021de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d003      	beq.n	80021f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f4:	2220      	movs	r2, #32
 80021f6:	409a      	lsls	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	4013      	ands	r3, r2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f000 808e 	beq.w	800231e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0310 	and.w	r3, r3, #16
 800220c:	2b00      	cmp	r3, #0
 800220e:	f000 8086 	beq.w	800231e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002216:	2220      	movs	r2, #32
 8002218:	409a      	lsls	r2, r3
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b05      	cmp	r3, #5
 8002228:	d136      	bne.n	8002298 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 0216 	bic.w	r2, r2, #22
 8002238:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	695a      	ldr	r2, [r3, #20]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002248:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	2b00      	cmp	r3, #0
 8002250:	d103      	bne.n	800225a <HAL_DMA_IRQHandler+0x1da>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002256:	2b00      	cmp	r3, #0
 8002258:	d007      	beq.n	800226a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f022 0208 	bic.w	r2, r2, #8
 8002268:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800226e:	223f      	movs	r2, #63	; 0x3f
 8002270:	409a      	lsls	r2, r3
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2201      	movs	r2, #1
 8002282:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800228a:	2b00      	cmp	r3, #0
 800228c:	d07d      	beq.n	800238a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	4798      	blx	r3
        }
        return;
 8002296:	e078      	b.n	800238a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d01c      	beq.n	80022e0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d108      	bne.n	80022c6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d030      	beq.n	800231e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	4798      	blx	r3
 80022c4:	e02b      	b.n	800231e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d027      	beq.n	800231e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	4798      	blx	r3
 80022d6:	e022      	b.n	800231e <HAL_DMA_IRQHandler+0x29e>
 80022d8:	200000ac 	.word	0x200000ac
 80022dc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d10f      	bne.n	800230e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f022 0210 	bic.w	r2, r2, #16
 80022fc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2201      	movs	r2, #1
 800230a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002322:	2b00      	cmp	r3, #0
 8002324:	d032      	beq.n	800238c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b00      	cmp	r3, #0
 8002330:	d022      	beq.n	8002378 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2205      	movs	r2, #5
 8002336:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f022 0201 	bic.w	r2, r2, #1
 8002348:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	3301      	adds	r3, #1
 800234e:	60bb      	str	r3, [r7, #8]
 8002350:	697a      	ldr	r2, [r7, #20]
 8002352:	429a      	cmp	r2, r3
 8002354:	d307      	bcc.n	8002366 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1f2      	bne.n	800234a <HAL_DMA_IRQHandler+0x2ca>
 8002364:	e000      	b.n	8002368 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002366:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800237c:	2b00      	cmp	r3, #0
 800237e:	d005      	beq.n	800238c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	4798      	blx	r3
 8002388:	e000      	b.n	800238c <HAL_DMA_IRQHandler+0x30c>
        return;
 800238a:	bf00      	nop
    }
  }
}
 800238c:	3718      	adds	r7, #24
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop

08002394 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
 80023a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	683a      	ldr	r2, [r7, #0]
 80023b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	2b40      	cmp	r3, #64	; 0x40
 80023c0:	d108      	bne.n	80023d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80023d2:	e007      	b.n	80023e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68ba      	ldr	r2, [r7, #8]
 80023da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	60da      	str	r2, [r3, #12]
}
 80023e4:	bf00      	nop
 80023e6:	3714      	adds	r7, #20
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	3b10      	subs	r3, #16
 8002400:	4a14      	ldr	r2, [pc, #80]	; (8002454 <DMA_CalcBaseAndBitshift+0x64>)
 8002402:	fba2 2303 	umull	r2, r3, r2, r3
 8002406:	091b      	lsrs	r3, r3, #4
 8002408:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800240a:	4a13      	ldr	r2, [pc, #76]	; (8002458 <DMA_CalcBaseAndBitshift+0x68>)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	4413      	add	r3, r2
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	461a      	mov	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2b03      	cmp	r3, #3
 800241c:	d909      	bls.n	8002432 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002426:	f023 0303 	bic.w	r3, r3, #3
 800242a:	1d1a      	adds	r2, r3, #4
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	659a      	str	r2, [r3, #88]	; 0x58
 8002430:	e007      	b.n	8002442 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800243a:	f023 0303 	bic.w	r3, r3, #3
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002446:	4618      	mov	r0, r3
 8002448:	3714      	adds	r7, #20
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	aaaaaaab 	.word	0xaaaaaaab
 8002458:	080050ec 	.word	0x080050ec

0800245c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002464:	2300      	movs	r3, #0
 8002466:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d11f      	bne.n	80024b6 <DMA_CheckFifoParam+0x5a>
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	2b03      	cmp	r3, #3
 800247a:	d856      	bhi.n	800252a <DMA_CheckFifoParam+0xce>
 800247c:	a201      	add	r2, pc, #4	; (adr r2, 8002484 <DMA_CheckFifoParam+0x28>)
 800247e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002482:	bf00      	nop
 8002484:	08002495 	.word	0x08002495
 8002488:	080024a7 	.word	0x080024a7
 800248c:	08002495 	.word	0x08002495
 8002490:	0800252b 	.word	0x0800252b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002498:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d046      	beq.n	800252e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024a4:	e043      	b.n	800252e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024ae:	d140      	bne.n	8002532 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024b4:	e03d      	b.n	8002532 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024be:	d121      	bne.n	8002504 <DMA_CheckFifoParam+0xa8>
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	2b03      	cmp	r3, #3
 80024c4:	d837      	bhi.n	8002536 <DMA_CheckFifoParam+0xda>
 80024c6:	a201      	add	r2, pc, #4	; (adr r2, 80024cc <DMA_CheckFifoParam+0x70>)
 80024c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024cc:	080024dd 	.word	0x080024dd
 80024d0:	080024e3 	.word	0x080024e3
 80024d4:	080024dd 	.word	0x080024dd
 80024d8:	080024f5 	.word	0x080024f5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	73fb      	strb	r3, [r7, #15]
      break;
 80024e0:	e030      	b.n	8002544 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d025      	beq.n	800253a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024f2:	e022      	b.n	800253a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024fc:	d11f      	bne.n	800253e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002502:	e01c      	b.n	800253e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	2b02      	cmp	r3, #2
 8002508:	d903      	bls.n	8002512 <DMA_CheckFifoParam+0xb6>
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	2b03      	cmp	r3, #3
 800250e:	d003      	beq.n	8002518 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002510:	e018      	b.n	8002544 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	73fb      	strb	r3, [r7, #15]
      break;
 8002516:	e015      	b.n	8002544 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00e      	beq.n	8002542 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	73fb      	strb	r3, [r7, #15]
      break;
 8002528:	e00b      	b.n	8002542 <DMA_CheckFifoParam+0xe6>
      break;
 800252a:	bf00      	nop
 800252c:	e00a      	b.n	8002544 <DMA_CheckFifoParam+0xe8>
      break;
 800252e:	bf00      	nop
 8002530:	e008      	b.n	8002544 <DMA_CheckFifoParam+0xe8>
      break;
 8002532:	bf00      	nop
 8002534:	e006      	b.n	8002544 <DMA_CheckFifoParam+0xe8>
      break;
 8002536:	bf00      	nop
 8002538:	e004      	b.n	8002544 <DMA_CheckFifoParam+0xe8>
      break;
 800253a:	bf00      	nop
 800253c:	e002      	b.n	8002544 <DMA_CheckFifoParam+0xe8>
      break;   
 800253e:	bf00      	nop
 8002540:	e000      	b.n	8002544 <DMA_CheckFifoParam+0xe8>
      break;
 8002542:	bf00      	nop
    }
  } 
  
  return status; 
 8002544:	7bfb      	ldrb	r3, [r7, #15]
}
 8002546:	4618      	mov	r0, r3
 8002548:	3714      	adds	r7, #20
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop

08002554 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002554:	b480      	push	{r7}
 8002556:	b089      	sub	sp, #36	; 0x24
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800255e:	2300      	movs	r3, #0
 8002560:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002562:	2300      	movs	r3, #0
 8002564:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002566:	2300      	movs	r3, #0
 8002568:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800256a:	2300      	movs	r3, #0
 800256c:	61fb      	str	r3, [r7, #28]
 800256e:	e16b      	b.n	8002848 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002570:	2201      	movs	r2, #1
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	4013      	ands	r3, r2
 8002582:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	429a      	cmp	r2, r3
 800258a:	f040 815a 	bne.w	8002842 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	2b01      	cmp	r3, #1
 8002598:	d005      	beq.n	80025a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d130      	bne.n	8002608 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	2203      	movs	r2, #3
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	43db      	mvns	r3, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4013      	ands	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	68da      	ldr	r2, [r3, #12]
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025dc:	2201      	movs	r2, #1
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	43db      	mvns	r3, r3
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4013      	ands	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	091b      	lsrs	r3, r3, #4
 80025f2:	f003 0201 	and.w	r2, r3, #1
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4313      	orrs	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f003 0303 	and.w	r3, r3, #3
 8002610:	2b03      	cmp	r3, #3
 8002612:	d017      	beq.n	8002644 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	2203      	movs	r2, #3
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	43db      	mvns	r3, r3
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4013      	ands	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4313      	orrs	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f003 0303 	and.w	r3, r3, #3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d123      	bne.n	8002698 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	08da      	lsrs	r2, r3, #3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	3208      	adds	r2, #8
 8002658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800265c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	f003 0307 	and.w	r3, r3, #7
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	220f      	movs	r2, #15
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	43db      	mvns	r3, r3
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4013      	ands	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	691a      	ldr	r2, [r3, #16]
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	f003 0307 	and.w	r3, r3, #7
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4313      	orrs	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	08da      	lsrs	r2, r3, #3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	3208      	adds	r2, #8
 8002692:	69b9      	ldr	r1, [r7, #24]
 8002694:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	2203      	movs	r2, #3
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	43db      	mvns	r3, r3
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	4013      	ands	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f003 0203 	and.w	r2, r3, #3
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f000 80b4 	beq.w	8002842 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026da:	2300      	movs	r3, #0
 80026dc:	60fb      	str	r3, [r7, #12]
 80026de:	4b60      	ldr	r3, [pc, #384]	; (8002860 <HAL_GPIO_Init+0x30c>)
 80026e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e2:	4a5f      	ldr	r2, [pc, #380]	; (8002860 <HAL_GPIO_Init+0x30c>)
 80026e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026e8:	6453      	str	r3, [r2, #68]	; 0x44
 80026ea:	4b5d      	ldr	r3, [pc, #372]	; (8002860 <HAL_GPIO_Init+0x30c>)
 80026ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026f2:	60fb      	str	r3, [r7, #12]
 80026f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026f6:	4a5b      	ldr	r2, [pc, #364]	; (8002864 <HAL_GPIO_Init+0x310>)
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	089b      	lsrs	r3, r3, #2
 80026fc:	3302      	adds	r3, #2
 80026fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002702:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	220f      	movs	r2, #15
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43db      	mvns	r3, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4013      	ands	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a52      	ldr	r2, [pc, #328]	; (8002868 <HAL_GPIO_Init+0x314>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d02b      	beq.n	800277a <HAL_GPIO_Init+0x226>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a51      	ldr	r2, [pc, #324]	; (800286c <HAL_GPIO_Init+0x318>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d025      	beq.n	8002776 <HAL_GPIO_Init+0x222>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a50      	ldr	r2, [pc, #320]	; (8002870 <HAL_GPIO_Init+0x31c>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d01f      	beq.n	8002772 <HAL_GPIO_Init+0x21e>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a4f      	ldr	r2, [pc, #316]	; (8002874 <HAL_GPIO_Init+0x320>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d019      	beq.n	800276e <HAL_GPIO_Init+0x21a>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a4e      	ldr	r2, [pc, #312]	; (8002878 <HAL_GPIO_Init+0x324>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d013      	beq.n	800276a <HAL_GPIO_Init+0x216>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a4d      	ldr	r2, [pc, #308]	; (800287c <HAL_GPIO_Init+0x328>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d00d      	beq.n	8002766 <HAL_GPIO_Init+0x212>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a4c      	ldr	r2, [pc, #304]	; (8002880 <HAL_GPIO_Init+0x32c>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d007      	beq.n	8002762 <HAL_GPIO_Init+0x20e>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a4b      	ldr	r2, [pc, #300]	; (8002884 <HAL_GPIO_Init+0x330>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d101      	bne.n	800275e <HAL_GPIO_Init+0x20a>
 800275a:	2307      	movs	r3, #7
 800275c:	e00e      	b.n	800277c <HAL_GPIO_Init+0x228>
 800275e:	2308      	movs	r3, #8
 8002760:	e00c      	b.n	800277c <HAL_GPIO_Init+0x228>
 8002762:	2306      	movs	r3, #6
 8002764:	e00a      	b.n	800277c <HAL_GPIO_Init+0x228>
 8002766:	2305      	movs	r3, #5
 8002768:	e008      	b.n	800277c <HAL_GPIO_Init+0x228>
 800276a:	2304      	movs	r3, #4
 800276c:	e006      	b.n	800277c <HAL_GPIO_Init+0x228>
 800276e:	2303      	movs	r3, #3
 8002770:	e004      	b.n	800277c <HAL_GPIO_Init+0x228>
 8002772:	2302      	movs	r3, #2
 8002774:	e002      	b.n	800277c <HAL_GPIO_Init+0x228>
 8002776:	2301      	movs	r3, #1
 8002778:	e000      	b.n	800277c <HAL_GPIO_Init+0x228>
 800277a:	2300      	movs	r3, #0
 800277c:	69fa      	ldr	r2, [r7, #28]
 800277e:	f002 0203 	and.w	r2, r2, #3
 8002782:	0092      	lsls	r2, r2, #2
 8002784:	4093      	lsls	r3, r2
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4313      	orrs	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800278c:	4935      	ldr	r1, [pc, #212]	; (8002864 <HAL_GPIO_Init+0x310>)
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	089b      	lsrs	r3, r3, #2
 8002792:	3302      	adds	r3, #2
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800279a:	4b3b      	ldr	r3, [pc, #236]	; (8002888 <HAL_GPIO_Init+0x334>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	43db      	mvns	r3, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4013      	ands	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027be:	4a32      	ldr	r2, [pc, #200]	; (8002888 <HAL_GPIO_Init+0x334>)
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80027c4:	4b30      	ldr	r3, [pc, #192]	; (8002888 <HAL_GPIO_Init+0x334>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	43db      	mvns	r3, r3
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	4013      	ands	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d003      	beq.n	80027e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027e8:	4a27      	ldr	r2, [pc, #156]	; (8002888 <HAL_GPIO_Init+0x334>)
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027ee:	4b26      	ldr	r3, [pc, #152]	; (8002888 <HAL_GPIO_Init+0x334>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	43db      	mvns	r3, r3
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	4013      	ands	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	4313      	orrs	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002812:	4a1d      	ldr	r2, [pc, #116]	; (8002888 <HAL_GPIO_Init+0x334>)
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002818:	4b1b      	ldr	r3, [pc, #108]	; (8002888 <HAL_GPIO_Init+0x334>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	43db      	mvns	r3, r3
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4013      	ands	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d003      	beq.n	800283c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	4313      	orrs	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800283c:	4a12      	ldr	r2, [pc, #72]	; (8002888 <HAL_GPIO_Init+0x334>)
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	3301      	adds	r3, #1
 8002846:	61fb      	str	r3, [r7, #28]
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	2b0f      	cmp	r3, #15
 800284c:	f67f ae90 	bls.w	8002570 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002850:	bf00      	nop
 8002852:	bf00      	nop
 8002854:	3724      	adds	r7, #36	; 0x24
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	40023800 	.word	0x40023800
 8002864:	40013800 	.word	0x40013800
 8002868:	40020000 	.word	0x40020000
 800286c:	40020400 	.word	0x40020400
 8002870:	40020800 	.word	0x40020800
 8002874:	40020c00 	.word	0x40020c00
 8002878:	40021000 	.word	0x40021000
 800287c:	40021400 	.word	0x40021400
 8002880:	40021800 	.word	0x40021800
 8002884:	40021c00 	.word	0x40021c00
 8002888:	40013c00 	.word	0x40013c00

0800288c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	460b      	mov	r3, r1
 8002896:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	691a      	ldr	r2, [r3, #16]
 800289c:	887b      	ldrh	r3, [r7, #2]
 800289e:	4013      	ands	r3, r2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d002      	beq.n	80028aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028a4:	2301      	movs	r3, #1
 80028a6:	73fb      	strb	r3, [r7, #15]
 80028a8:	e001      	b.n	80028ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028aa:	2300      	movs	r3, #0
 80028ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3714      	adds	r7, #20
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	460b      	mov	r3, r1
 80028c6:	807b      	strh	r3, [r7, #2]
 80028c8:	4613      	mov	r3, r2
 80028ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028cc:	787b      	ldrb	r3, [r7, #1]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d003      	beq.n	80028da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028d2:	887a      	ldrh	r2, [r7, #2]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028d8:	e003      	b.n	80028e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028da:	887b      	ldrh	r3, [r7, #2]
 80028dc:	041a      	lsls	r2, r3, #16
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	619a      	str	r2, [r3, #24]
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
	...

080028f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d101      	bne.n	8002902 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e12b      	b.n	8002b5a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d106      	bne.n	800291c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f7fe f934 	bl	8000b84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2224      	movs	r2, #36	; 0x24
 8002920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f022 0201 	bic.w	r2, r2, #1
 8002932:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002942:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002952:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002954:	f001 f848 	bl	80039e8 <HAL_RCC_GetPCLK1Freq>
 8002958:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	4a81      	ldr	r2, [pc, #516]	; (8002b64 <HAL_I2C_Init+0x274>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d807      	bhi.n	8002974 <HAL_I2C_Init+0x84>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	4a80      	ldr	r2, [pc, #512]	; (8002b68 <HAL_I2C_Init+0x278>)
 8002968:	4293      	cmp	r3, r2
 800296a:	bf94      	ite	ls
 800296c:	2301      	movls	r3, #1
 800296e:	2300      	movhi	r3, #0
 8002970:	b2db      	uxtb	r3, r3
 8002972:	e006      	b.n	8002982 <HAL_I2C_Init+0x92>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	4a7d      	ldr	r2, [pc, #500]	; (8002b6c <HAL_I2C_Init+0x27c>)
 8002978:	4293      	cmp	r3, r2
 800297a:	bf94      	ite	ls
 800297c:	2301      	movls	r3, #1
 800297e:	2300      	movhi	r3, #0
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e0e7      	b.n	8002b5a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	4a78      	ldr	r2, [pc, #480]	; (8002b70 <HAL_I2C_Init+0x280>)
 800298e:	fba2 2303 	umull	r2, r3, r2, r3
 8002992:	0c9b      	lsrs	r3, r3, #18
 8002994:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68ba      	ldr	r2, [r7, #8]
 80029a6:	430a      	orrs	r2, r1
 80029a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	4a6a      	ldr	r2, [pc, #424]	; (8002b64 <HAL_I2C_Init+0x274>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d802      	bhi.n	80029c4 <HAL_I2C_Init+0xd4>
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	3301      	adds	r3, #1
 80029c2:	e009      	b.n	80029d8 <HAL_I2C_Init+0xe8>
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029ca:	fb02 f303 	mul.w	r3, r2, r3
 80029ce:	4a69      	ldr	r2, [pc, #420]	; (8002b74 <HAL_I2C_Init+0x284>)
 80029d0:	fba2 2303 	umull	r2, r3, r2, r3
 80029d4:	099b      	lsrs	r3, r3, #6
 80029d6:	3301      	adds	r3, #1
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	6812      	ldr	r2, [r2, #0]
 80029dc:	430b      	orrs	r3, r1
 80029de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	69db      	ldr	r3, [r3, #28]
 80029e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80029ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	495c      	ldr	r1, [pc, #368]	; (8002b64 <HAL_I2C_Init+0x274>)
 80029f4:	428b      	cmp	r3, r1
 80029f6:	d819      	bhi.n	8002a2c <HAL_I2C_Init+0x13c>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	1e59      	subs	r1, r3, #1
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a06:	1c59      	adds	r1, r3, #1
 8002a08:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a0c:	400b      	ands	r3, r1
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00a      	beq.n	8002a28 <HAL_I2C_Init+0x138>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	1e59      	subs	r1, r3, #1
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a20:	3301      	adds	r3, #1
 8002a22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a26:	e051      	b.n	8002acc <HAL_I2C_Init+0x1dc>
 8002a28:	2304      	movs	r3, #4
 8002a2a:	e04f      	b.n	8002acc <HAL_I2C_Init+0x1dc>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d111      	bne.n	8002a58 <HAL_I2C_Init+0x168>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	1e58      	subs	r0, r3, #1
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6859      	ldr	r1, [r3, #4]
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	440b      	add	r3, r1
 8002a42:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a46:	3301      	adds	r3, #1
 8002a48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	bf0c      	ite	eq
 8002a50:	2301      	moveq	r3, #1
 8002a52:	2300      	movne	r3, #0
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	e012      	b.n	8002a7e <HAL_I2C_Init+0x18e>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	1e58      	subs	r0, r3, #1
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6859      	ldr	r1, [r3, #4]
 8002a60:	460b      	mov	r3, r1
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	440b      	add	r3, r1
 8002a66:	0099      	lsls	r1, r3, #2
 8002a68:	440b      	add	r3, r1
 8002a6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a6e:	3301      	adds	r3, #1
 8002a70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	bf0c      	ite	eq
 8002a78:	2301      	moveq	r3, #1
 8002a7a:	2300      	movne	r3, #0
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <HAL_I2C_Init+0x196>
 8002a82:	2301      	movs	r3, #1
 8002a84:	e022      	b.n	8002acc <HAL_I2C_Init+0x1dc>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d10e      	bne.n	8002aac <HAL_I2C_Init+0x1bc>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	1e58      	subs	r0, r3, #1
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6859      	ldr	r1, [r3, #4]
 8002a96:	460b      	mov	r3, r1
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	440b      	add	r3, r1
 8002a9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aaa:	e00f      	b.n	8002acc <HAL_I2C_Init+0x1dc>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	1e58      	subs	r0, r3, #1
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6859      	ldr	r1, [r3, #4]
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	440b      	add	r3, r1
 8002aba:	0099      	lsls	r1, r3, #2
 8002abc:	440b      	add	r3, r1
 8002abe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ac8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002acc:	6879      	ldr	r1, [r7, #4]
 8002ace:	6809      	ldr	r1, [r1, #0]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	69da      	ldr	r2, [r3, #28]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	430a      	orrs	r2, r1
 8002aee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002afa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	6911      	ldr	r1, [r2, #16]
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	68d2      	ldr	r2, [r2, #12]
 8002b06:	4311      	orrs	r1, r2
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	6812      	ldr	r2, [r2, #0]
 8002b0c:	430b      	orrs	r3, r1
 8002b0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	695a      	ldr	r2, [r3, #20]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	431a      	orrs	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f042 0201 	orr.w	r2, r2, #1
 8002b3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2220      	movs	r2, #32
 8002b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	000186a0 	.word	0x000186a0
 8002b68:	001e847f 	.word	0x001e847f
 8002b6c:	003d08ff 	.word	0x003d08ff
 8002b70:	431bde83 	.word	0x431bde83
 8002b74:	10624dd3 	.word	0x10624dd3

08002b78 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b088      	sub	sp, #32
 8002b7c:	af02      	add	r7, sp, #8
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	4608      	mov	r0, r1
 8002b82:	4611      	mov	r1, r2
 8002b84:	461a      	mov	r2, r3
 8002b86:	4603      	mov	r3, r0
 8002b88:	817b      	strh	r3, [r7, #10]
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	813b      	strh	r3, [r7, #8]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b92:	f7fe ff9b 	bl	8001acc <HAL_GetTick>
 8002b96:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	2b20      	cmp	r3, #32
 8002ba2:	f040 80d9 	bne.w	8002d58 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	9300      	str	r3, [sp, #0]
 8002baa:	2319      	movs	r3, #25
 8002bac:	2201      	movs	r2, #1
 8002bae:	496d      	ldr	r1, [pc, #436]	; (8002d64 <HAL_I2C_Mem_Write+0x1ec>)
 8002bb0:	68f8      	ldr	r0, [r7, #12]
 8002bb2:	f000 f971 	bl	8002e98 <I2C_WaitOnFlagUntilTimeout>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	e0cc      	b.n	8002d5a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d101      	bne.n	8002bce <HAL_I2C_Mem_Write+0x56>
 8002bca:	2302      	movs	r3, #2
 8002bcc:	e0c5      	b.n	8002d5a <HAL_I2C_Mem_Write+0x1e2>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0301 	and.w	r3, r3, #1
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d007      	beq.n	8002bf4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f042 0201 	orr.w	r2, r2, #1
 8002bf2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2221      	movs	r2, #33	; 0x21
 8002c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2240      	movs	r2, #64	; 0x40
 8002c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6a3a      	ldr	r2, [r7, #32]
 8002c1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	4a4d      	ldr	r2, [pc, #308]	; (8002d68 <HAL_I2C_Mem_Write+0x1f0>)
 8002c34:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c36:	88f8      	ldrh	r0, [r7, #6]
 8002c38:	893a      	ldrh	r2, [r7, #8]
 8002c3a:	8979      	ldrh	r1, [r7, #10]
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	9301      	str	r3, [sp, #4]
 8002c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c42:	9300      	str	r3, [sp, #0]
 8002c44:	4603      	mov	r3, r0
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f000 f890 	bl	8002d6c <I2C_RequestMemoryWrite>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d052      	beq.n	8002cf8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e081      	b.n	8002d5a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f000 f9f2 	bl	8003044 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00d      	beq.n	8002c82 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	2b04      	cmp	r3, #4
 8002c6c:	d107      	bne.n	8002c7e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c7c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e06b      	b.n	8002d5a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c86:	781a      	ldrb	r2, [r3, #0]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c92:	1c5a      	adds	r2, r3, #1
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	3b01      	subs	r3, #1
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	f003 0304 	and.w	r3, r3, #4
 8002cbc:	2b04      	cmp	r3, #4
 8002cbe:	d11b      	bne.n	8002cf8 <HAL_I2C_Mem_Write+0x180>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d017      	beq.n	8002cf8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ccc:	781a      	ldrb	r2, [r3, #0]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd8:	1c5a      	adds	r2, r3, #1
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1aa      	bne.n	8002c56 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d00:	697a      	ldr	r2, [r7, #20]
 8002d02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	f000 f9de 	bl	80030c6 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00d      	beq.n	8002d2c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d14:	2b04      	cmp	r3, #4
 8002d16:	d107      	bne.n	8002d28 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d26:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e016      	b.n	8002d5a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2220      	movs	r2, #32
 8002d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d54:	2300      	movs	r3, #0
 8002d56:	e000      	b.n	8002d5a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002d58:	2302      	movs	r3, #2
  }
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3718      	adds	r7, #24
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	00100002 	.word	0x00100002
 8002d68:	ffff0000 	.word	0xffff0000

08002d6c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b088      	sub	sp, #32
 8002d70:	af02      	add	r7, sp, #8
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	4608      	mov	r0, r1
 8002d76:	4611      	mov	r1, r2
 8002d78:	461a      	mov	r2, r3
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	817b      	strh	r3, [r7, #10]
 8002d7e:	460b      	mov	r3, r1
 8002d80:	813b      	strh	r3, [r7, #8]
 8002d82:	4613      	mov	r3, r2
 8002d84:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d94:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d98:	9300      	str	r3, [sp, #0]
 8002d9a:	6a3b      	ldr	r3, [r7, #32]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f000 f878 	bl	8002e98 <I2C_WaitOnFlagUntilTimeout>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00d      	beq.n	8002dca <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dbc:	d103      	bne.n	8002dc6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dc4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e05f      	b.n	8002e8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002dca:	897b      	ldrh	r3, [r7, #10]
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	461a      	mov	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002dd8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ddc:	6a3a      	ldr	r2, [r7, #32]
 8002dde:	492d      	ldr	r1, [pc, #180]	; (8002e94 <I2C_RequestMemoryWrite+0x128>)
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f000 f8b0 	bl	8002f46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e04c      	b.n	8002e8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002df0:	2300      	movs	r3, #0
 8002df2:	617b      	str	r3, [r7, #20]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	695b      	ldr	r3, [r3, #20]
 8002dfa:	617b      	str	r3, [r7, #20]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	617b      	str	r3, [r7, #20]
 8002e04:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e08:	6a39      	ldr	r1, [r7, #32]
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f000 f91a 	bl	8003044 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00d      	beq.n	8002e32 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1a:	2b04      	cmp	r3, #4
 8002e1c:	d107      	bne.n	8002e2e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e2c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e02b      	b.n	8002e8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e32:	88fb      	ldrh	r3, [r7, #6]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d105      	bne.n	8002e44 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e38:	893b      	ldrh	r3, [r7, #8]
 8002e3a:	b2da      	uxtb	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	611a      	str	r2, [r3, #16]
 8002e42:	e021      	b.n	8002e88 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e44:	893b      	ldrh	r3, [r7, #8]
 8002e46:	0a1b      	lsrs	r3, r3, #8
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	b2da      	uxtb	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e54:	6a39      	ldr	r1, [r7, #32]
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f000 f8f4 	bl	8003044 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00d      	beq.n	8002e7e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	2b04      	cmp	r3, #4
 8002e68:	d107      	bne.n	8002e7a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e78:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e005      	b.n	8002e8a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e7e:	893b      	ldrh	r3, [r7, #8]
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3718      	adds	r7, #24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	00010002 	.word	0x00010002

08002e98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	603b      	str	r3, [r7, #0]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ea8:	e025      	b.n	8002ef6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb0:	d021      	beq.n	8002ef6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eb2:	f7fe fe0b 	bl	8001acc <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d302      	bcc.n	8002ec8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d116      	bne.n	8002ef6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2220      	movs	r2, #32
 8002ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	f043 0220 	orr.w	r2, r3, #32
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e023      	b.n	8002f3e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	0c1b      	lsrs	r3, r3, #16
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d10d      	bne.n	8002f1c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	43da      	mvns	r2, r3
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	bf0c      	ite	eq
 8002f12:	2301      	moveq	r3, #1
 8002f14:	2300      	movne	r3, #0
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	461a      	mov	r2, r3
 8002f1a:	e00c      	b.n	8002f36 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	43da      	mvns	r2, r3
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	4013      	ands	r3, r2
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	bf0c      	ite	eq
 8002f2e:	2301      	moveq	r3, #1
 8002f30:	2300      	movne	r3, #0
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	461a      	mov	r2, r3
 8002f36:	79fb      	ldrb	r3, [r7, #7]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d0b6      	beq.n	8002eaa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b084      	sub	sp, #16
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	60f8      	str	r0, [r7, #12]
 8002f4e:	60b9      	str	r1, [r7, #8]
 8002f50:	607a      	str	r2, [r7, #4]
 8002f52:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f54:	e051      	b.n	8002ffa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	695b      	ldr	r3, [r3, #20]
 8002f5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f64:	d123      	bne.n	8002fae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f74:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f7e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2220      	movs	r2, #32
 8002f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	f043 0204 	orr.w	r2, r3, #4
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e046      	b.n	800303c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb4:	d021      	beq.n	8002ffa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fb6:	f7fe fd89 	bl	8001acc <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d302      	bcc.n	8002fcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d116      	bne.n	8002ffa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2220      	movs	r2, #32
 8002fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	f043 0220 	orr.w	r2, r3, #32
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e020      	b.n	800303c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	0c1b      	lsrs	r3, r3, #16
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b01      	cmp	r3, #1
 8003002:	d10c      	bne.n	800301e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	43da      	mvns	r2, r3
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	4013      	ands	r3, r2
 8003010:	b29b      	uxth	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	bf14      	ite	ne
 8003016:	2301      	movne	r3, #1
 8003018:	2300      	moveq	r3, #0
 800301a:	b2db      	uxtb	r3, r3
 800301c:	e00b      	b.n	8003036 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	43da      	mvns	r2, r3
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	4013      	ands	r3, r2
 800302a:	b29b      	uxth	r3, r3
 800302c:	2b00      	cmp	r3, #0
 800302e:	bf14      	ite	ne
 8003030:	2301      	movne	r3, #1
 8003032:	2300      	moveq	r3, #0
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d18d      	bne.n	8002f56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800303a:	2300      	movs	r3, #0
}
 800303c:	4618      	mov	r0, r3
 800303e:	3710      	adds	r7, #16
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003050:	e02d      	b.n	80030ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f000 f878 	bl	8003148 <I2C_IsAcknowledgeFailed>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e02d      	b.n	80030be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003068:	d021      	beq.n	80030ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800306a:	f7fe fd2f 	bl	8001acc <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	68ba      	ldr	r2, [r7, #8]
 8003076:	429a      	cmp	r2, r3
 8003078:	d302      	bcc.n	8003080 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d116      	bne.n	80030ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2220      	movs	r2, #32
 800308a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309a:	f043 0220 	orr.w	r2, r3, #32
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e007      	b.n	80030be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030b8:	2b80      	cmp	r3, #128	; 0x80
 80030ba:	d1ca      	bne.n	8003052 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b084      	sub	sp, #16
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	60f8      	str	r0, [r7, #12]
 80030ce:	60b9      	str	r1, [r7, #8]
 80030d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030d2:	e02d      	b.n	8003130 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f000 f837 	bl	8003148 <I2C_IsAcknowledgeFailed>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e02d      	b.n	8003140 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ea:	d021      	beq.n	8003130 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ec:	f7fe fcee 	bl	8001acc <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	68ba      	ldr	r2, [r7, #8]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d302      	bcc.n	8003102 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d116      	bne.n	8003130 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2220      	movs	r2, #32
 800310c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311c:	f043 0220 	orr.w	r2, r3, #32
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e007      	b.n	8003140 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	f003 0304 	and.w	r3, r3, #4
 800313a:	2b04      	cmp	r3, #4
 800313c:	d1ca      	bne.n	80030d4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3710      	adds	r7, #16
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800315a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800315e:	d11b      	bne.n	8003198 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003168:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2220      	movs	r2, #32
 8003174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003184:	f043 0204 	orr.w	r2, r3, #4
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e000      	b.n	800319a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
	...

080031a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e264      	b.n	8003684 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d075      	beq.n	80032b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031c6:	4ba3      	ldr	r3, [pc, #652]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 030c 	and.w	r3, r3, #12
 80031ce:	2b04      	cmp	r3, #4
 80031d0:	d00c      	beq.n	80031ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031d2:	4ba0      	ldr	r3, [pc, #640]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031da:	2b08      	cmp	r3, #8
 80031dc:	d112      	bne.n	8003204 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031de:	4b9d      	ldr	r3, [pc, #628]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031ea:	d10b      	bne.n	8003204 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031ec:	4b99      	ldr	r3, [pc, #612]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d05b      	beq.n	80032b0 <HAL_RCC_OscConfig+0x108>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d157      	bne.n	80032b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e23f      	b.n	8003684 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800320c:	d106      	bne.n	800321c <HAL_RCC_OscConfig+0x74>
 800320e:	4b91      	ldr	r3, [pc, #580]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a90      	ldr	r2, [pc, #576]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 8003214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003218:	6013      	str	r3, [r2, #0]
 800321a:	e01d      	b.n	8003258 <HAL_RCC_OscConfig+0xb0>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003224:	d10c      	bne.n	8003240 <HAL_RCC_OscConfig+0x98>
 8003226:	4b8b      	ldr	r3, [pc, #556]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a8a      	ldr	r2, [pc, #552]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 800322c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003230:	6013      	str	r3, [r2, #0]
 8003232:	4b88      	ldr	r3, [pc, #544]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a87      	ldr	r2, [pc, #540]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 8003238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800323c:	6013      	str	r3, [r2, #0]
 800323e:	e00b      	b.n	8003258 <HAL_RCC_OscConfig+0xb0>
 8003240:	4b84      	ldr	r3, [pc, #528]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a83      	ldr	r2, [pc, #524]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 8003246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800324a:	6013      	str	r3, [r2, #0]
 800324c:	4b81      	ldr	r3, [pc, #516]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a80      	ldr	r2, [pc, #512]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 8003252:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003256:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d013      	beq.n	8003288 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003260:	f7fe fc34 	bl	8001acc <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003268:	f7fe fc30 	bl	8001acc <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b64      	cmp	r3, #100	; 0x64
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e204      	b.n	8003684 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327a:	4b76      	ldr	r3, [pc, #472]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d0f0      	beq.n	8003268 <HAL_RCC_OscConfig+0xc0>
 8003286:	e014      	b.n	80032b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003288:	f7fe fc20 	bl	8001acc <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003290:	f7fe fc1c 	bl	8001acc <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b64      	cmp	r3, #100	; 0x64
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e1f0      	b.n	8003684 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032a2:	4b6c      	ldr	r3, [pc, #432]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1f0      	bne.n	8003290 <HAL_RCC_OscConfig+0xe8>
 80032ae:	e000      	b.n	80032b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d063      	beq.n	8003386 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032be:	4b65      	ldr	r3, [pc, #404]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f003 030c 	and.w	r3, r3, #12
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00b      	beq.n	80032e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032ca:	4b62      	ldr	r3, [pc, #392]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032d2:	2b08      	cmp	r3, #8
 80032d4:	d11c      	bne.n	8003310 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032d6:	4b5f      	ldr	r3, [pc, #380]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d116      	bne.n	8003310 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032e2:	4b5c      	ldr	r3, [pc, #368]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d005      	beq.n	80032fa <HAL_RCC_OscConfig+0x152>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d001      	beq.n	80032fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e1c4      	b.n	8003684 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032fa:	4b56      	ldr	r3, [pc, #344]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	4952      	ldr	r1, [pc, #328]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 800330a:	4313      	orrs	r3, r2
 800330c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800330e:	e03a      	b.n	8003386 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d020      	beq.n	800335a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003318:	4b4f      	ldr	r3, [pc, #316]	; (8003458 <HAL_RCC_OscConfig+0x2b0>)
 800331a:	2201      	movs	r2, #1
 800331c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800331e:	f7fe fbd5 	bl	8001acc <HAL_GetTick>
 8003322:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003324:	e008      	b.n	8003338 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003326:	f7fe fbd1 	bl	8001acc <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	2b02      	cmp	r3, #2
 8003332:	d901      	bls.n	8003338 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e1a5      	b.n	8003684 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003338:	4b46      	ldr	r3, [pc, #280]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d0f0      	beq.n	8003326 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003344:	4b43      	ldr	r3, [pc, #268]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	00db      	lsls	r3, r3, #3
 8003352:	4940      	ldr	r1, [pc, #256]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 8003354:	4313      	orrs	r3, r2
 8003356:	600b      	str	r3, [r1, #0]
 8003358:	e015      	b.n	8003386 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800335a:	4b3f      	ldr	r3, [pc, #252]	; (8003458 <HAL_RCC_OscConfig+0x2b0>)
 800335c:	2200      	movs	r2, #0
 800335e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003360:	f7fe fbb4 	bl	8001acc <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003368:	f7fe fbb0 	bl	8001acc <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e184      	b.n	8003684 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800337a:	4b36      	ldr	r3, [pc, #216]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1f0      	bne.n	8003368 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0308 	and.w	r3, r3, #8
 800338e:	2b00      	cmp	r3, #0
 8003390:	d030      	beq.n	80033f4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d016      	beq.n	80033c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800339a:	4b30      	ldr	r3, [pc, #192]	; (800345c <HAL_RCC_OscConfig+0x2b4>)
 800339c:	2201      	movs	r2, #1
 800339e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a0:	f7fe fb94 	bl	8001acc <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033a8:	f7fe fb90 	bl	8001acc <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e164      	b.n	8003684 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ba:	4b26      	ldr	r3, [pc, #152]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 80033bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d0f0      	beq.n	80033a8 <HAL_RCC_OscConfig+0x200>
 80033c6:	e015      	b.n	80033f4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033c8:	4b24      	ldr	r3, [pc, #144]	; (800345c <HAL_RCC_OscConfig+0x2b4>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ce:	f7fe fb7d 	bl	8001acc <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033d4:	e008      	b.n	80033e8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033d6:	f7fe fb79 	bl	8001acc <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e14d      	b.n	8003684 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033e8:	4b1a      	ldr	r3, [pc, #104]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 80033ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1f0      	bne.n	80033d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0304 	and.w	r3, r3, #4
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f000 80a0 	beq.w	8003542 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003402:	2300      	movs	r3, #0
 8003404:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003406:	4b13      	ldr	r3, [pc, #76]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 8003408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d10f      	bne.n	8003432 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003412:	2300      	movs	r3, #0
 8003414:	60bb      	str	r3, [r7, #8]
 8003416:	4b0f      	ldr	r3, [pc, #60]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	4a0e      	ldr	r2, [pc, #56]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 800341c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003420:	6413      	str	r3, [r2, #64]	; 0x40
 8003422:	4b0c      	ldr	r3, [pc, #48]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800342a:	60bb      	str	r3, [r7, #8]
 800342c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800342e:	2301      	movs	r3, #1
 8003430:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003432:	4b0b      	ldr	r3, [pc, #44]	; (8003460 <HAL_RCC_OscConfig+0x2b8>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343a:	2b00      	cmp	r3, #0
 800343c:	d121      	bne.n	8003482 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800343e:	4b08      	ldr	r3, [pc, #32]	; (8003460 <HAL_RCC_OscConfig+0x2b8>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a07      	ldr	r2, [pc, #28]	; (8003460 <HAL_RCC_OscConfig+0x2b8>)
 8003444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003448:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800344a:	f7fe fb3f 	bl	8001acc <HAL_GetTick>
 800344e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003450:	e011      	b.n	8003476 <HAL_RCC_OscConfig+0x2ce>
 8003452:	bf00      	nop
 8003454:	40023800 	.word	0x40023800
 8003458:	42470000 	.word	0x42470000
 800345c:	42470e80 	.word	0x42470e80
 8003460:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003464:	f7fe fb32 	bl	8001acc <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e106      	b.n	8003684 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003476:	4b85      	ldr	r3, [pc, #532]	; (800368c <HAL_RCC_OscConfig+0x4e4>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800347e:	2b00      	cmp	r3, #0
 8003480:	d0f0      	beq.n	8003464 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d106      	bne.n	8003498 <HAL_RCC_OscConfig+0x2f0>
 800348a:	4b81      	ldr	r3, [pc, #516]	; (8003690 <HAL_RCC_OscConfig+0x4e8>)
 800348c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348e:	4a80      	ldr	r2, [pc, #512]	; (8003690 <HAL_RCC_OscConfig+0x4e8>)
 8003490:	f043 0301 	orr.w	r3, r3, #1
 8003494:	6713      	str	r3, [r2, #112]	; 0x70
 8003496:	e01c      	b.n	80034d2 <HAL_RCC_OscConfig+0x32a>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	2b05      	cmp	r3, #5
 800349e:	d10c      	bne.n	80034ba <HAL_RCC_OscConfig+0x312>
 80034a0:	4b7b      	ldr	r3, [pc, #492]	; (8003690 <HAL_RCC_OscConfig+0x4e8>)
 80034a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a4:	4a7a      	ldr	r2, [pc, #488]	; (8003690 <HAL_RCC_OscConfig+0x4e8>)
 80034a6:	f043 0304 	orr.w	r3, r3, #4
 80034aa:	6713      	str	r3, [r2, #112]	; 0x70
 80034ac:	4b78      	ldr	r3, [pc, #480]	; (8003690 <HAL_RCC_OscConfig+0x4e8>)
 80034ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b0:	4a77      	ldr	r2, [pc, #476]	; (8003690 <HAL_RCC_OscConfig+0x4e8>)
 80034b2:	f043 0301 	orr.w	r3, r3, #1
 80034b6:	6713      	str	r3, [r2, #112]	; 0x70
 80034b8:	e00b      	b.n	80034d2 <HAL_RCC_OscConfig+0x32a>
 80034ba:	4b75      	ldr	r3, [pc, #468]	; (8003690 <HAL_RCC_OscConfig+0x4e8>)
 80034bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034be:	4a74      	ldr	r2, [pc, #464]	; (8003690 <HAL_RCC_OscConfig+0x4e8>)
 80034c0:	f023 0301 	bic.w	r3, r3, #1
 80034c4:	6713      	str	r3, [r2, #112]	; 0x70
 80034c6:	4b72      	ldr	r3, [pc, #456]	; (8003690 <HAL_RCC_OscConfig+0x4e8>)
 80034c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ca:	4a71      	ldr	r2, [pc, #452]	; (8003690 <HAL_RCC_OscConfig+0x4e8>)
 80034cc:	f023 0304 	bic.w	r3, r3, #4
 80034d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d015      	beq.n	8003506 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034da:	f7fe faf7 	bl	8001acc <HAL_GetTick>
 80034de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034e0:	e00a      	b.n	80034f8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034e2:	f7fe faf3 	bl	8001acc <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d901      	bls.n	80034f8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e0c5      	b.n	8003684 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034f8:	4b65      	ldr	r3, [pc, #404]	; (8003690 <HAL_RCC_OscConfig+0x4e8>)
 80034fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	2b00      	cmp	r3, #0
 8003502:	d0ee      	beq.n	80034e2 <HAL_RCC_OscConfig+0x33a>
 8003504:	e014      	b.n	8003530 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003506:	f7fe fae1 	bl	8001acc <HAL_GetTick>
 800350a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800350c:	e00a      	b.n	8003524 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800350e:	f7fe fadd 	bl	8001acc <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	f241 3288 	movw	r2, #5000	; 0x1388
 800351c:	4293      	cmp	r3, r2
 800351e:	d901      	bls.n	8003524 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e0af      	b.n	8003684 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003524:	4b5a      	ldr	r3, [pc, #360]	; (8003690 <HAL_RCC_OscConfig+0x4e8>)
 8003526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003528:	f003 0302 	and.w	r3, r3, #2
 800352c:	2b00      	cmp	r3, #0
 800352e:	d1ee      	bne.n	800350e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003530:	7dfb      	ldrb	r3, [r7, #23]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d105      	bne.n	8003542 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003536:	4b56      	ldr	r3, [pc, #344]	; (8003690 <HAL_RCC_OscConfig+0x4e8>)
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	4a55      	ldr	r2, [pc, #340]	; (8003690 <HAL_RCC_OscConfig+0x4e8>)
 800353c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003540:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	2b00      	cmp	r3, #0
 8003548:	f000 809b 	beq.w	8003682 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800354c:	4b50      	ldr	r3, [pc, #320]	; (8003690 <HAL_RCC_OscConfig+0x4e8>)
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f003 030c 	and.w	r3, r3, #12
 8003554:	2b08      	cmp	r3, #8
 8003556:	d05c      	beq.n	8003612 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	2b02      	cmp	r3, #2
 800355e:	d141      	bne.n	80035e4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003560:	4b4c      	ldr	r3, [pc, #304]	; (8003694 <HAL_RCC_OscConfig+0x4ec>)
 8003562:	2200      	movs	r2, #0
 8003564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003566:	f7fe fab1 	bl	8001acc <HAL_GetTick>
 800356a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800356c:	e008      	b.n	8003580 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800356e:	f7fe faad 	bl	8001acc <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d901      	bls.n	8003580 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e081      	b.n	8003684 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003580:	4b43      	ldr	r3, [pc, #268]	; (8003690 <HAL_RCC_OscConfig+0x4e8>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d1f0      	bne.n	800356e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	69da      	ldr	r2, [r3, #28]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	431a      	orrs	r2, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359a:	019b      	lsls	r3, r3, #6
 800359c:	431a      	orrs	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a2:	085b      	lsrs	r3, r3, #1
 80035a4:	3b01      	subs	r3, #1
 80035a6:	041b      	lsls	r3, r3, #16
 80035a8:	431a      	orrs	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ae:	061b      	lsls	r3, r3, #24
 80035b0:	4937      	ldr	r1, [pc, #220]	; (8003690 <HAL_RCC_OscConfig+0x4e8>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035b6:	4b37      	ldr	r3, [pc, #220]	; (8003694 <HAL_RCC_OscConfig+0x4ec>)
 80035b8:	2201      	movs	r2, #1
 80035ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035bc:	f7fe fa86 	bl	8001acc <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035c4:	f7fe fa82 	bl	8001acc <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e056      	b.n	8003684 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035d6:	4b2e      	ldr	r3, [pc, #184]	; (8003690 <HAL_RCC_OscConfig+0x4e8>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d0f0      	beq.n	80035c4 <HAL_RCC_OscConfig+0x41c>
 80035e2:	e04e      	b.n	8003682 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035e4:	4b2b      	ldr	r3, [pc, #172]	; (8003694 <HAL_RCC_OscConfig+0x4ec>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ea:	f7fe fa6f 	bl	8001acc <HAL_GetTick>
 80035ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035f0:	e008      	b.n	8003604 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035f2:	f7fe fa6b 	bl	8001acc <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d901      	bls.n	8003604 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e03f      	b.n	8003684 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003604:	4b22      	ldr	r3, [pc, #136]	; (8003690 <HAL_RCC_OscConfig+0x4e8>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1f0      	bne.n	80035f2 <HAL_RCC_OscConfig+0x44a>
 8003610:	e037      	b.n	8003682 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d101      	bne.n	800361e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e032      	b.n	8003684 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800361e:	4b1c      	ldr	r3, [pc, #112]	; (8003690 <HAL_RCC_OscConfig+0x4e8>)
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	699b      	ldr	r3, [r3, #24]
 8003628:	2b01      	cmp	r3, #1
 800362a:	d028      	beq.n	800367e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003636:	429a      	cmp	r2, r3
 8003638:	d121      	bne.n	800367e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003644:	429a      	cmp	r2, r3
 8003646:	d11a      	bne.n	800367e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800364e:	4013      	ands	r3, r2
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003654:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003656:	4293      	cmp	r3, r2
 8003658:	d111      	bne.n	800367e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003664:	085b      	lsrs	r3, r3, #1
 8003666:	3b01      	subs	r3, #1
 8003668:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800366a:	429a      	cmp	r2, r3
 800366c:	d107      	bne.n	800367e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003678:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800367a:	429a      	cmp	r2, r3
 800367c:	d001      	beq.n	8003682 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e000      	b.n	8003684 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3718      	adds	r7, #24
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	40007000 	.word	0x40007000
 8003690:	40023800 	.word	0x40023800
 8003694:	42470060 	.word	0x42470060

08003698 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d101      	bne.n	80036ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e0cc      	b.n	8003846 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036ac:	4b68      	ldr	r3, [pc, #416]	; (8003850 <HAL_RCC_ClockConfig+0x1b8>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0307 	and.w	r3, r3, #7
 80036b4:	683a      	ldr	r2, [r7, #0]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d90c      	bls.n	80036d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ba:	4b65      	ldr	r3, [pc, #404]	; (8003850 <HAL_RCC_ClockConfig+0x1b8>)
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	b2d2      	uxtb	r2, r2
 80036c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036c2:	4b63      	ldr	r3, [pc, #396]	; (8003850 <HAL_RCC_ClockConfig+0x1b8>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0307 	and.w	r3, r3, #7
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d001      	beq.n	80036d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e0b8      	b.n	8003846 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d020      	beq.n	8003722 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0304 	and.w	r3, r3, #4
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d005      	beq.n	80036f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036ec:	4b59      	ldr	r3, [pc, #356]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	4a58      	ldr	r2, [pc, #352]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 80036f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0308 	and.w	r3, r3, #8
 8003700:	2b00      	cmp	r3, #0
 8003702:	d005      	beq.n	8003710 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003704:	4b53      	ldr	r3, [pc, #332]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	4a52      	ldr	r2, [pc, #328]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 800370a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800370e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003710:	4b50      	ldr	r3, [pc, #320]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	494d      	ldr	r1, [pc, #308]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 800371e:	4313      	orrs	r3, r2
 8003720:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b00      	cmp	r3, #0
 800372c:	d044      	beq.n	80037b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d107      	bne.n	8003746 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003736:	4b47      	ldr	r3, [pc, #284]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d119      	bne.n	8003776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e07f      	b.n	8003846 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	2b02      	cmp	r3, #2
 800374c:	d003      	beq.n	8003756 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003752:	2b03      	cmp	r3, #3
 8003754:	d107      	bne.n	8003766 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003756:	4b3f      	ldr	r3, [pc, #252]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d109      	bne.n	8003776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e06f      	b.n	8003846 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003766:	4b3b      	ldr	r3, [pc, #236]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e067      	b.n	8003846 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003776:	4b37      	ldr	r3, [pc, #220]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f023 0203 	bic.w	r2, r3, #3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	4934      	ldr	r1, [pc, #208]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 8003784:	4313      	orrs	r3, r2
 8003786:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003788:	f7fe f9a0 	bl	8001acc <HAL_GetTick>
 800378c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800378e:	e00a      	b.n	80037a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003790:	f7fe f99c 	bl	8001acc <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	f241 3288 	movw	r2, #5000	; 0x1388
 800379e:	4293      	cmp	r3, r2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e04f      	b.n	8003846 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037a6:	4b2b      	ldr	r3, [pc, #172]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f003 020c 	and.w	r2, r3, #12
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d1eb      	bne.n	8003790 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037b8:	4b25      	ldr	r3, [pc, #148]	; (8003850 <HAL_RCC_ClockConfig+0x1b8>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0307 	and.w	r3, r3, #7
 80037c0:	683a      	ldr	r2, [r7, #0]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d20c      	bcs.n	80037e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037c6:	4b22      	ldr	r3, [pc, #136]	; (8003850 <HAL_RCC_ClockConfig+0x1b8>)
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	b2d2      	uxtb	r2, r2
 80037cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ce:	4b20      	ldr	r3, [pc, #128]	; (8003850 <HAL_RCC_ClockConfig+0x1b8>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0307 	and.w	r3, r3, #7
 80037d6:	683a      	ldr	r2, [r7, #0]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d001      	beq.n	80037e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e032      	b.n	8003846 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0304 	and.w	r3, r3, #4
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d008      	beq.n	80037fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037ec:	4b19      	ldr	r3, [pc, #100]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	4916      	ldr	r1, [pc, #88]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0308 	and.w	r3, r3, #8
 8003806:	2b00      	cmp	r3, #0
 8003808:	d009      	beq.n	800381e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800380a:	4b12      	ldr	r3, [pc, #72]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	490e      	ldr	r1, [pc, #56]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 800381a:	4313      	orrs	r3, r2
 800381c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800381e:	f000 f821 	bl	8003864 <HAL_RCC_GetSysClockFreq>
 8003822:	4602      	mov	r2, r0
 8003824:	4b0b      	ldr	r3, [pc, #44]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	091b      	lsrs	r3, r3, #4
 800382a:	f003 030f 	and.w	r3, r3, #15
 800382e:	490a      	ldr	r1, [pc, #40]	; (8003858 <HAL_RCC_ClockConfig+0x1c0>)
 8003830:	5ccb      	ldrb	r3, [r1, r3]
 8003832:	fa22 f303 	lsr.w	r3, r2, r3
 8003836:	4a09      	ldr	r2, [pc, #36]	; (800385c <HAL_RCC_ClockConfig+0x1c4>)
 8003838:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800383a:	4b09      	ldr	r3, [pc, #36]	; (8003860 <HAL_RCC_ClockConfig+0x1c8>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4618      	mov	r0, r3
 8003840:	f7fe f900 	bl	8001a44 <HAL_InitTick>

  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	40023c00 	.word	0x40023c00
 8003854:	40023800 	.word	0x40023800
 8003858:	080050d4 	.word	0x080050d4
 800385c:	200000ac 	.word	0x200000ac
 8003860:	200000b0 	.word	0x200000b0

08003864 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003864:	b5b0      	push	{r4, r5, r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800386a:	2100      	movs	r1, #0
 800386c:	6079      	str	r1, [r7, #4]
 800386e:	2100      	movs	r1, #0
 8003870:	60f9      	str	r1, [r7, #12]
 8003872:	2100      	movs	r1, #0
 8003874:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003876:	2100      	movs	r1, #0
 8003878:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800387a:	4952      	ldr	r1, [pc, #328]	; (80039c4 <HAL_RCC_GetSysClockFreq+0x160>)
 800387c:	6889      	ldr	r1, [r1, #8]
 800387e:	f001 010c 	and.w	r1, r1, #12
 8003882:	2908      	cmp	r1, #8
 8003884:	d00d      	beq.n	80038a2 <HAL_RCC_GetSysClockFreq+0x3e>
 8003886:	2908      	cmp	r1, #8
 8003888:	f200 8094 	bhi.w	80039b4 <HAL_RCC_GetSysClockFreq+0x150>
 800388c:	2900      	cmp	r1, #0
 800388e:	d002      	beq.n	8003896 <HAL_RCC_GetSysClockFreq+0x32>
 8003890:	2904      	cmp	r1, #4
 8003892:	d003      	beq.n	800389c <HAL_RCC_GetSysClockFreq+0x38>
 8003894:	e08e      	b.n	80039b4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003896:	4b4c      	ldr	r3, [pc, #304]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x164>)
 8003898:	60bb      	str	r3, [r7, #8]
       break;
 800389a:	e08e      	b.n	80039ba <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800389c:	4b4b      	ldr	r3, [pc, #300]	; (80039cc <HAL_RCC_GetSysClockFreq+0x168>)
 800389e:	60bb      	str	r3, [r7, #8]
      break;
 80038a0:	e08b      	b.n	80039ba <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038a2:	4948      	ldr	r1, [pc, #288]	; (80039c4 <HAL_RCC_GetSysClockFreq+0x160>)
 80038a4:	6849      	ldr	r1, [r1, #4]
 80038a6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80038aa:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038ac:	4945      	ldr	r1, [pc, #276]	; (80039c4 <HAL_RCC_GetSysClockFreq+0x160>)
 80038ae:	6849      	ldr	r1, [r1, #4]
 80038b0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80038b4:	2900      	cmp	r1, #0
 80038b6:	d024      	beq.n	8003902 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038b8:	4942      	ldr	r1, [pc, #264]	; (80039c4 <HAL_RCC_GetSysClockFreq+0x160>)
 80038ba:	6849      	ldr	r1, [r1, #4]
 80038bc:	0989      	lsrs	r1, r1, #6
 80038be:	4608      	mov	r0, r1
 80038c0:	f04f 0100 	mov.w	r1, #0
 80038c4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80038c8:	f04f 0500 	mov.w	r5, #0
 80038cc:	ea00 0204 	and.w	r2, r0, r4
 80038d0:	ea01 0305 	and.w	r3, r1, r5
 80038d4:	493d      	ldr	r1, [pc, #244]	; (80039cc <HAL_RCC_GetSysClockFreq+0x168>)
 80038d6:	fb01 f003 	mul.w	r0, r1, r3
 80038da:	2100      	movs	r1, #0
 80038dc:	fb01 f102 	mul.w	r1, r1, r2
 80038e0:	1844      	adds	r4, r0, r1
 80038e2:	493a      	ldr	r1, [pc, #232]	; (80039cc <HAL_RCC_GetSysClockFreq+0x168>)
 80038e4:	fba2 0101 	umull	r0, r1, r2, r1
 80038e8:	1863      	adds	r3, r4, r1
 80038ea:	4619      	mov	r1, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	461a      	mov	r2, r3
 80038f0:	f04f 0300 	mov.w	r3, #0
 80038f4:	f7fc fc68 	bl	80001c8 <__aeabi_uldivmod>
 80038f8:	4602      	mov	r2, r0
 80038fa:	460b      	mov	r3, r1
 80038fc:	4613      	mov	r3, r2
 80038fe:	60fb      	str	r3, [r7, #12]
 8003900:	e04a      	b.n	8003998 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003902:	4b30      	ldr	r3, [pc, #192]	; (80039c4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	099b      	lsrs	r3, r3, #6
 8003908:	461a      	mov	r2, r3
 800390a:	f04f 0300 	mov.w	r3, #0
 800390e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003912:	f04f 0100 	mov.w	r1, #0
 8003916:	ea02 0400 	and.w	r4, r2, r0
 800391a:	ea03 0501 	and.w	r5, r3, r1
 800391e:	4620      	mov	r0, r4
 8003920:	4629      	mov	r1, r5
 8003922:	f04f 0200 	mov.w	r2, #0
 8003926:	f04f 0300 	mov.w	r3, #0
 800392a:	014b      	lsls	r3, r1, #5
 800392c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003930:	0142      	lsls	r2, r0, #5
 8003932:	4610      	mov	r0, r2
 8003934:	4619      	mov	r1, r3
 8003936:	1b00      	subs	r0, r0, r4
 8003938:	eb61 0105 	sbc.w	r1, r1, r5
 800393c:	f04f 0200 	mov.w	r2, #0
 8003940:	f04f 0300 	mov.w	r3, #0
 8003944:	018b      	lsls	r3, r1, #6
 8003946:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800394a:	0182      	lsls	r2, r0, #6
 800394c:	1a12      	subs	r2, r2, r0
 800394e:	eb63 0301 	sbc.w	r3, r3, r1
 8003952:	f04f 0000 	mov.w	r0, #0
 8003956:	f04f 0100 	mov.w	r1, #0
 800395a:	00d9      	lsls	r1, r3, #3
 800395c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003960:	00d0      	lsls	r0, r2, #3
 8003962:	4602      	mov	r2, r0
 8003964:	460b      	mov	r3, r1
 8003966:	1912      	adds	r2, r2, r4
 8003968:	eb45 0303 	adc.w	r3, r5, r3
 800396c:	f04f 0000 	mov.w	r0, #0
 8003970:	f04f 0100 	mov.w	r1, #0
 8003974:	0299      	lsls	r1, r3, #10
 8003976:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800397a:	0290      	lsls	r0, r2, #10
 800397c:	4602      	mov	r2, r0
 800397e:	460b      	mov	r3, r1
 8003980:	4610      	mov	r0, r2
 8003982:	4619      	mov	r1, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	461a      	mov	r2, r3
 8003988:	f04f 0300 	mov.w	r3, #0
 800398c:	f7fc fc1c 	bl	80001c8 <__aeabi_uldivmod>
 8003990:	4602      	mov	r2, r0
 8003992:	460b      	mov	r3, r1
 8003994:	4613      	mov	r3, r2
 8003996:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003998:	4b0a      	ldr	r3, [pc, #40]	; (80039c4 <HAL_RCC_GetSysClockFreq+0x160>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	0c1b      	lsrs	r3, r3, #16
 800399e:	f003 0303 	and.w	r3, r3, #3
 80039a2:	3301      	adds	r3, #1
 80039a4:	005b      	lsls	r3, r3, #1
 80039a6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b0:	60bb      	str	r3, [r7, #8]
      break;
 80039b2:	e002      	b.n	80039ba <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039b4:	4b04      	ldr	r3, [pc, #16]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x164>)
 80039b6:	60bb      	str	r3, [r7, #8]
      break;
 80039b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039ba:	68bb      	ldr	r3, [r7, #8]
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bdb0      	pop	{r4, r5, r7, pc}
 80039c4:	40023800 	.word	0x40023800
 80039c8:	00f42400 	.word	0x00f42400
 80039cc:	017d7840 	.word	0x017d7840

080039d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039d0:	b480      	push	{r7}
 80039d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039d4:	4b03      	ldr	r3, [pc, #12]	; (80039e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80039d6:	681b      	ldr	r3, [r3, #0]
}
 80039d8:	4618      	mov	r0, r3
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	200000ac 	.word	0x200000ac

080039e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80039ec:	f7ff fff0 	bl	80039d0 <HAL_RCC_GetHCLKFreq>
 80039f0:	4602      	mov	r2, r0
 80039f2:	4b05      	ldr	r3, [pc, #20]	; (8003a08 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	0a9b      	lsrs	r3, r3, #10
 80039f8:	f003 0307 	and.w	r3, r3, #7
 80039fc:	4903      	ldr	r1, [pc, #12]	; (8003a0c <HAL_RCC_GetPCLK1Freq+0x24>)
 80039fe:	5ccb      	ldrb	r3, [r1, r3]
 8003a00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	40023800 	.word	0x40023800
 8003a0c:	080050e4 	.word	0x080050e4

08003a10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a14:	f7ff ffdc 	bl	80039d0 <HAL_RCC_GetHCLKFreq>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	4b05      	ldr	r3, [pc, #20]	; (8003a30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	0b5b      	lsrs	r3, r3, #13
 8003a20:	f003 0307 	and.w	r3, r3, #7
 8003a24:	4903      	ldr	r1, [pc, #12]	; (8003a34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a26:	5ccb      	ldrb	r3, [r1, r3]
 8003a28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	40023800 	.word	0x40023800
 8003a34:	080050e4 	.word	0x080050e4

08003a38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d101      	bne.n	8003a4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e041      	b.n	8003ace <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d106      	bne.n	8003a64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f7fd fe32 	bl	80016c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2202      	movs	r2, #2
 8003a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	3304      	adds	r3, #4
 8003a74:	4619      	mov	r1, r3
 8003a76:	4610      	mov	r0, r2
 8003a78:	f000 f9fe 	bl	8003e78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3708      	adds	r7, #8
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
	...

08003ad8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d001      	beq.n	8003af0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e04e      	b.n	8003b8e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2202      	movs	r2, #2
 8003af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68da      	ldr	r2, [r3, #12]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f042 0201 	orr.w	r2, r2, #1
 8003b06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a23      	ldr	r2, [pc, #140]	; (8003b9c <HAL_TIM_Base_Start_IT+0xc4>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d022      	beq.n	8003b58 <HAL_TIM_Base_Start_IT+0x80>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b1a:	d01d      	beq.n	8003b58 <HAL_TIM_Base_Start_IT+0x80>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a1f      	ldr	r2, [pc, #124]	; (8003ba0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d018      	beq.n	8003b58 <HAL_TIM_Base_Start_IT+0x80>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a1e      	ldr	r2, [pc, #120]	; (8003ba4 <HAL_TIM_Base_Start_IT+0xcc>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d013      	beq.n	8003b58 <HAL_TIM_Base_Start_IT+0x80>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a1c      	ldr	r2, [pc, #112]	; (8003ba8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d00e      	beq.n	8003b58 <HAL_TIM_Base_Start_IT+0x80>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a1b      	ldr	r2, [pc, #108]	; (8003bac <HAL_TIM_Base_Start_IT+0xd4>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d009      	beq.n	8003b58 <HAL_TIM_Base_Start_IT+0x80>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a19      	ldr	r2, [pc, #100]	; (8003bb0 <HAL_TIM_Base_Start_IT+0xd8>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d004      	beq.n	8003b58 <HAL_TIM_Base_Start_IT+0x80>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a18      	ldr	r2, [pc, #96]	; (8003bb4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d111      	bne.n	8003b7c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f003 0307 	and.w	r3, r3, #7
 8003b62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2b06      	cmp	r3, #6
 8003b68:	d010      	beq.n	8003b8c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f042 0201 	orr.w	r2, r2, #1
 8003b78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b7a:	e007      	b.n	8003b8c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f042 0201 	orr.w	r2, r2, #1
 8003b8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3714      	adds	r7, #20
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	40010000 	.word	0x40010000
 8003ba0:	40000400 	.word	0x40000400
 8003ba4:	40000800 	.word	0x40000800
 8003ba8:	40000c00 	.word	0x40000c00
 8003bac:	40010400 	.word	0x40010400
 8003bb0:	40014000 	.word	0x40014000
 8003bb4:	40001800 	.word	0x40001800

08003bb8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68da      	ldr	r2, [r3, #12]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 0201 	bic.w	r2, r2, #1
 8003bce:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	6a1a      	ldr	r2, [r3, #32]
 8003bd6:	f241 1311 	movw	r3, #4369	; 0x1111
 8003bda:	4013      	ands	r3, r2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d10f      	bne.n	8003c00 <HAL_TIM_Base_Stop_IT+0x48>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	6a1a      	ldr	r2, [r3, #32]
 8003be6:	f240 4344 	movw	r3, #1092	; 0x444
 8003bea:	4013      	ands	r3, r2
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d107      	bne.n	8003c00 <HAL_TIM_Base_Stop_IT+0x48>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f022 0201 	bic.w	r2, r2, #1
 8003bfe:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	370c      	adds	r7, #12
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr

08003c16 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b082      	sub	sp, #8
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	f003 0302 	and.w	r3, r3, #2
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d122      	bne.n	8003c72 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d11b      	bne.n	8003c72 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f06f 0202 	mvn.w	r2, #2
 8003c42:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	f003 0303 	and.w	r3, r3, #3
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d003      	beq.n	8003c60 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f000 f8ee 	bl	8003e3a <HAL_TIM_IC_CaptureCallback>
 8003c5e:	e005      	b.n	8003c6c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 f8e0 	bl	8003e26 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 f8f1 	bl	8003e4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	f003 0304 	and.w	r3, r3, #4
 8003c7c:	2b04      	cmp	r3, #4
 8003c7e:	d122      	bne.n	8003cc6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	f003 0304 	and.w	r3, r3, #4
 8003c8a:	2b04      	cmp	r3, #4
 8003c8c:	d11b      	bne.n	8003cc6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f06f 0204 	mvn.w	r2, #4
 8003c96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d003      	beq.n	8003cb4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 f8c4 	bl	8003e3a <HAL_TIM_IC_CaptureCallback>
 8003cb2:	e005      	b.n	8003cc0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 f8b6 	bl	8003e26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 f8c7 	bl	8003e4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	f003 0308 	and.w	r3, r3, #8
 8003cd0:	2b08      	cmp	r3, #8
 8003cd2:	d122      	bne.n	8003d1a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	f003 0308 	and.w	r3, r3, #8
 8003cde:	2b08      	cmp	r3, #8
 8003ce0:	d11b      	bne.n	8003d1a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f06f 0208 	mvn.w	r2, #8
 8003cea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2204      	movs	r2, #4
 8003cf0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	69db      	ldr	r3, [r3, #28]
 8003cf8:	f003 0303 	and.w	r3, r3, #3
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d003      	beq.n	8003d08 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f000 f89a 	bl	8003e3a <HAL_TIM_IC_CaptureCallback>
 8003d06:	e005      	b.n	8003d14 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 f88c 	bl	8003e26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 f89d 	bl	8003e4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	f003 0310 	and.w	r3, r3, #16
 8003d24:	2b10      	cmp	r3, #16
 8003d26:	d122      	bne.n	8003d6e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	f003 0310 	and.w	r3, r3, #16
 8003d32:	2b10      	cmp	r3, #16
 8003d34:	d11b      	bne.n	8003d6e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f06f 0210 	mvn.w	r2, #16
 8003d3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2208      	movs	r2, #8
 8003d44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	69db      	ldr	r3, [r3, #28]
 8003d4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d003      	beq.n	8003d5c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 f870 	bl	8003e3a <HAL_TIM_IC_CaptureCallback>
 8003d5a:	e005      	b.n	8003d68 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f000 f862 	bl	8003e26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 f873 	bl	8003e4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	f003 0301 	and.w	r3, r3, #1
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d10e      	bne.n	8003d9a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d107      	bne.n	8003d9a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f06f 0201 	mvn.w	r2, #1
 8003d92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f7fc fb93 	bl	80004c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	691b      	ldr	r3, [r3, #16]
 8003da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003da4:	2b80      	cmp	r3, #128	; 0x80
 8003da6:	d10e      	bne.n	8003dc6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db2:	2b80      	cmp	r3, #128	; 0x80
 8003db4:	d107      	bne.n	8003dc6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003dbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f000 f97f 	bl	80040c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd0:	2b40      	cmp	r3, #64	; 0x40
 8003dd2:	d10e      	bne.n	8003df2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dde:	2b40      	cmp	r3, #64	; 0x40
 8003de0:	d107      	bne.n	8003df2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003dea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 f838 	bl	8003e62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	f003 0320 	and.w	r3, r3, #32
 8003dfc:	2b20      	cmp	r3, #32
 8003dfe:	d10e      	bne.n	8003e1e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	f003 0320 	and.w	r3, r3, #32
 8003e0a:	2b20      	cmp	r3, #32
 8003e0c:	d107      	bne.n	8003e1e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f06f 0220 	mvn.w	r2, #32
 8003e16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 f949 	bl	80040b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e1e:	bf00      	nop
 8003e20:	3708      	adds	r7, #8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e26:	b480      	push	{r7}
 8003e28:	b083      	sub	sp, #12
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e2e:	bf00      	nop
 8003e30:	370c      	adds	r7, #12
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr

08003e3a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	b083      	sub	sp, #12
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e42:	bf00      	nop
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr

08003e4e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b083      	sub	sp, #12
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e56:	bf00      	nop
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr

08003e62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e62:	b480      	push	{r7}
 8003e64:	b083      	sub	sp, #12
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e6a:	bf00      	nop
 8003e6c:	370c      	adds	r7, #12
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
	...

08003e78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a40      	ldr	r2, [pc, #256]	; (8003f8c <TIM_Base_SetConfig+0x114>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d013      	beq.n	8003eb8 <TIM_Base_SetConfig+0x40>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e96:	d00f      	beq.n	8003eb8 <TIM_Base_SetConfig+0x40>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a3d      	ldr	r2, [pc, #244]	; (8003f90 <TIM_Base_SetConfig+0x118>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d00b      	beq.n	8003eb8 <TIM_Base_SetConfig+0x40>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a3c      	ldr	r2, [pc, #240]	; (8003f94 <TIM_Base_SetConfig+0x11c>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d007      	beq.n	8003eb8 <TIM_Base_SetConfig+0x40>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a3b      	ldr	r2, [pc, #236]	; (8003f98 <TIM_Base_SetConfig+0x120>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d003      	beq.n	8003eb8 <TIM_Base_SetConfig+0x40>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a3a      	ldr	r2, [pc, #232]	; (8003f9c <TIM_Base_SetConfig+0x124>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d108      	bne.n	8003eca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ebe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a2f      	ldr	r2, [pc, #188]	; (8003f8c <TIM_Base_SetConfig+0x114>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d02b      	beq.n	8003f2a <TIM_Base_SetConfig+0xb2>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ed8:	d027      	beq.n	8003f2a <TIM_Base_SetConfig+0xb2>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a2c      	ldr	r2, [pc, #176]	; (8003f90 <TIM_Base_SetConfig+0x118>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d023      	beq.n	8003f2a <TIM_Base_SetConfig+0xb2>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a2b      	ldr	r2, [pc, #172]	; (8003f94 <TIM_Base_SetConfig+0x11c>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d01f      	beq.n	8003f2a <TIM_Base_SetConfig+0xb2>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a2a      	ldr	r2, [pc, #168]	; (8003f98 <TIM_Base_SetConfig+0x120>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d01b      	beq.n	8003f2a <TIM_Base_SetConfig+0xb2>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a29      	ldr	r2, [pc, #164]	; (8003f9c <TIM_Base_SetConfig+0x124>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d017      	beq.n	8003f2a <TIM_Base_SetConfig+0xb2>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a28      	ldr	r2, [pc, #160]	; (8003fa0 <TIM_Base_SetConfig+0x128>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d013      	beq.n	8003f2a <TIM_Base_SetConfig+0xb2>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a27      	ldr	r2, [pc, #156]	; (8003fa4 <TIM_Base_SetConfig+0x12c>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d00f      	beq.n	8003f2a <TIM_Base_SetConfig+0xb2>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a26      	ldr	r2, [pc, #152]	; (8003fa8 <TIM_Base_SetConfig+0x130>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d00b      	beq.n	8003f2a <TIM_Base_SetConfig+0xb2>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a25      	ldr	r2, [pc, #148]	; (8003fac <TIM_Base_SetConfig+0x134>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d007      	beq.n	8003f2a <TIM_Base_SetConfig+0xb2>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a24      	ldr	r2, [pc, #144]	; (8003fb0 <TIM_Base_SetConfig+0x138>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d003      	beq.n	8003f2a <TIM_Base_SetConfig+0xb2>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a23      	ldr	r2, [pc, #140]	; (8003fb4 <TIM_Base_SetConfig+0x13c>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d108      	bne.n	8003f3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	689a      	ldr	r2, [r3, #8]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a0a      	ldr	r2, [pc, #40]	; (8003f8c <TIM_Base_SetConfig+0x114>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d003      	beq.n	8003f70 <TIM_Base_SetConfig+0xf8>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a0c      	ldr	r2, [pc, #48]	; (8003f9c <TIM_Base_SetConfig+0x124>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d103      	bne.n	8003f78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	691a      	ldr	r2, [r3, #16]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	615a      	str	r2, [r3, #20]
}
 8003f7e:	bf00      	nop
 8003f80:	3714      	adds	r7, #20
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	40010000 	.word	0x40010000
 8003f90:	40000400 	.word	0x40000400
 8003f94:	40000800 	.word	0x40000800
 8003f98:	40000c00 	.word	0x40000c00
 8003f9c:	40010400 	.word	0x40010400
 8003fa0:	40014000 	.word	0x40014000
 8003fa4:	40014400 	.word	0x40014400
 8003fa8:	40014800 	.word	0x40014800
 8003fac:	40001800 	.word	0x40001800
 8003fb0:	40001c00 	.word	0x40001c00
 8003fb4:	40002000 	.word	0x40002000

08003fb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d101      	bne.n	8003fd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fcc:	2302      	movs	r3, #2
 8003fce:	e05a      	b.n	8004086 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2202      	movs	r2, #2
 8003fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ff6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a21      	ldr	r2, [pc, #132]	; (8004094 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d022      	beq.n	800405a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800401c:	d01d      	beq.n	800405a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a1d      	ldr	r2, [pc, #116]	; (8004098 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d018      	beq.n	800405a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a1b      	ldr	r2, [pc, #108]	; (800409c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d013      	beq.n	800405a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a1a      	ldr	r2, [pc, #104]	; (80040a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d00e      	beq.n	800405a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a18      	ldr	r2, [pc, #96]	; (80040a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d009      	beq.n	800405a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a17      	ldr	r2, [pc, #92]	; (80040a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d004      	beq.n	800405a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a15      	ldr	r2, [pc, #84]	; (80040ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d10c      	bne.n	8004074 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004060:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	68ba      	ldr	r2, [r7, #8]
 8004068:	4313      	orrs	r3, r2
 800406a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68ba      	ldr	r2, [r7, #8]
 8004072:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	3714      	adds	r7, #20
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	40010000 	.word	0x40010000
 8004098:	40000400 	.word	0x40000400
 800409c:	40000800 	.word	0x40000800
 80040a0:	40000c00 	.word	0x40000c00
 80040a4:	40010400 	.word	0x40010400
 80040a8:	40014000 	.word	0x40014000
 80040ac:	40001800 	.word	0x40001800

080040b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040b8:	bf00      	nop
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040cc:	bf00      	nop
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d101      	bne.n	80040ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e03f      	b.n	800416a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d106      	bne.n	8004104 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f7fd fb66 	bl	80017d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2224      	movs	r2, #36	; 0x24
 8004108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68da      	ldr	r2, [r3, #12]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800411a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 fdd9 	bl	8004cd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	691a      	ldr	r2, [r3, #16]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004130:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	695a      	ldr	r2, [r3, #20]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004140:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68da      	ldr	r2, [r3, #12]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004150:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2220      	movs	r2, #32
 800415c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2220      	movs	r2, #32
 8004164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3708      	adds	r7, #8
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004172:	b580      	push	{r7, lr}
 8004174:	b08a      	sub	sp, #40	; 0x28
 8004176:	af02      	add	r7, sp, #8
 8004178:	60f8      	str	r0, [r7, #12]
 800417a:	60b9      	str	r1, [r7, #8]
 800417c:	603b      	str	r3, [r7, #0]
 800417e:	4613      	mov	r3, r2
 8004180:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004182:	2300      	movs	r3, #0
 8004184:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b20      	cmp	r3, #32
 8004190:	d17c      	bne.n	800428c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d002      	beq.n	800419e <HAL_UART_Transmit+0x2c>
 8004198:	88fb      	ldrh	r3, [r7, #6]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e075      	b.n	800428e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d101      	bne.n	80041b0 <HAL_UART_Transmit+0x3e>
 80041ac:	2302      	movs	r3, #2
 80041ae:	e06e      	b.n	800428e <HAL_UART_Transmit+0x11c>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2200      	movs	r2, #0
 80041bc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2221      	movs	r2, #33	; 0x21
 80041c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041c6:	f7fd fc81 	bl	8001acc <HAL_GetTick>
 80041ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	88fa      	ldrh	r2, [r7, #6]
 80041d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	88fa      	ldrh	r2, [r7, #6]
 80041d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041e0:	d108      	bne.n	80041f4 <HAL_UART_Transmit+0x82>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d104      	bne.n	80041f4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80041ea:	2300      	movs	r3, #0
 80041ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	61bb      	str	r3, [r7, #24]
 80041f2:	e003      	b.n	80041fc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041f8:	2300      	movs	r3, #0
 80041fa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004204:	e02a      	b.n	800425c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	9300      	str	r3, [sp, #0]
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	2200      	movs	r2, #0
 800420e:	2180      	movs	r1, #128	; 0x80
 8004210:	68f8      	ldr	r0, [r7, #12]
 8004212:	f000 fb5b 	bl	80048cc <UART_WaitOnFlagUntilTimeout>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d001      	beq.n	8004220 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e036      	b.n	800428e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10b      	bne.n	800423e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	881b      	ldrh	r3, [r3, #0]
 800422a:	461a      	mov	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004234:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	3302      	adds	r3, #2
 800423a:	61bb      	str	r3, [r7, #24]
 800423c:	e007      	b.n	800424e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	781a      	ldrb	r2, [r3, #0]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	3301      	adds	r3, #1
 800424c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004252:	b29b      	uxth	r3, r3
 8004254:	3b01      	subs	r3, #1
 8004256:	b29a      	uxth	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004260:	b29b      	uxth	r3, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	d1cf      	bne.n	8004206 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	9300      	str	r3, [sp, #0]
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	2200      	movs	r2, #0
 800426e:	2140      	movs	r1, #64	; 0x40
 8004270:	68f8      	ldr	r0, [r7, #12]
 8004272:	f000 fb2b 	bl	80048cc <UART_WaitOnFlagUntilTimeout>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d001      	beq.n	8004280 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e006      	b.n	800428e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2220      	movs	r2, #32
 8004284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004288:	2300      	movs	r3, #0
 800428a:	e000      	b.n	800428e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800428c:	2302      	movs	r3, #2
  }
}
 800428e:	4618      	mov	r0, r3
 8004290:	3720      	adds	r7, #32
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004296:	b580      	push	{r7, lr}
 8004298:	b084      	sub	sp, #16
 800429a:	af00      	add	r7, sp, #0
 800429c:	60f8      	str	r0, [r7, #12]
 800429e:	60b9      	str	r1, [r7, #8]
 80042a0:	4613      	mov	r3, r2
 80042a2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	2b20      	cmp	r3, #32
 80042ae:	d11d      	bne.n	80042ec <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d002      	beq.n	80042bc <HAL_UART_Receive_DMA+0x26>
 80042b6:	88fb      	ldrh	r3, [r7, #6]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d101      	bne.n	80042c0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e016      	b.n	80042ee <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d101      	bne.n	80042ce <HAL_UART_Receive_DMA+0x38>
 80042ca:	2302      	movs	r3, #2
 80042cc:	e00f      	b.n	80042ee <HAL_UART_Receive_DMA+0x58>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2201      	movs	r2, #1
 80042d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80042dc:	88fb      	ldrh	r3, [r7, #6]
 80042de:	461a      	mov	r2, r3
 80042e0:	68b9      	ldr	r1, [r7, #8]
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f000 fb3c 	bl	8004960 <UART_Start_Receive_DMA>
 80042e8:	4603      	mov	r3, r0
 80042ea:	e000      	b.n	80042ee <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80042ec:	2302      	movs	r3, #2
  }
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3710      	adds	r7, #16
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}

080042f6 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b084      	sub	sp, #16
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80042fe:	2300      	movs	r3, #0
 8004300:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	695b      	ldr	r3, [r3, #20]
 8004308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800430c:	2b80      	cmp	r3, #128	; 0x80
 800430e:	bf0c      	ite	eq
 8004310:	2301      	moveq	r3, #1
 8004312:	2300      	movne	r3, #0
 8004314:	b2db      	uxtb	r3, r3
 8004316:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2b21      	cmp	r3, #33	; 0x21
 8004322:	d116      	bne.n	8004352 <HAL_UART_DMAStop+0x5c>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d013      	beq.n	8004352 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	695a      	ldr	r2, [r3, #20]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004338:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800433e:	2b00      	cmp	r3, #0
 8004340:	d004      	beq.n	800434c <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004346:	4618      	mov	r0, r3
 8004348:	f7fd fe08 	bl	8001f5c <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 fb6b 	bl	8004a28 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800435c:	2b40      	cmp	r3, #64	; 0x40
 800435e:	bf0c      	ite	eq
 8004360:	2301      	moveq	r3, #1
 8004362:	2300      	movne	r3, #0
 8004364:	b2db      	uxtb	r3, r3
 8004366:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800436e:	b2db      	uxtb	r3, r3
 8004370:	2b22      	cmp	r3, #34	; 0x22
 8004372:	d116      	bne.n	80043a2 <HAL_UART_DMAStop+0xac>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d013      	beq.n	80043a2 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	695a      	ldr	r2, [r3, #20]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004388:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438e:	2b00      	cmp	r3, #0
 8004390:	d004      	beq.n	800439c <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004396:	4618      	mov	r0, r3
 8004398:	f7fd fde0 	bl	8001f5c <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 fb59 	bl	8004a54 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3710      	adds	r7, #16
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b08a      	sub	sp, #40	; 0x28
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80043cc:	2300      	movs	r3, #0
 80043ce:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80043d0:	2300      	movs	r3, #0
 80043d2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80043d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d6:	f003 030f 	and.w	r3, r3, #15
 80043da:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10d      	bne.n	80043fe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e4:	f003 0320 	and.w	r3, r3, #32
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d008      	beq.n	80043fe <HAL_UART_IRQHandler+0x52>
 80043ec:	6a3b      	ldr	r3, [r7, #32]
 80043ee:	f003 0320 	and.w	r3, r3, #32
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d003      	beq.n	80043fe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 fbd5 	bl	8004ba6 <UART_Receive_IT>
      return;
 80043fc:	e17c      	b.n	80046f8 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	2b00      	cmp	r3, #0
 8004402:	f000 80b1 	beq.w	8004568 <HAL_UART_IRQHandler+0x1bc>
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	f003 0301 	and.w	r3, r3, #1
 800440c:	2b00      	cmp	r3, #0
 800440e:	d105      	bne.n	800441c <HAL_UART_IRQHandler+0x70>
 8004410:	6a3b      	ldr	r3, [r7, #32]
 8004412:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004416:	2b00      	cmp	r3, #0
 8004418:	f000 80a6 	beq.w	8004568 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800441c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00a      	beq.n	800443c <HAL_UART_IRQHandler+0x90>
 8004426:	6a3b      	ldr	r3, [r7, #32]
 8004428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800442c:	2b00      	cmp	r3, #0
 800442e:	d005      	beq.n	800443c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004434:	f043 0201 	orr.w	r2, r3, #1
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800443c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443e:	f003 0304 	and.w	r3, r3, #4
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00a      	beq.n	800445c <HAL_UART_IRQHandler+0xb0>
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	f003 0301 	and.w	r3, r3, #1
 800444c:	2b00      	cmp	r3, #0
 800444e:	d005      	beq.n	800445c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004454:	f043 0202 	orr.w	r2, r3, #2
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800445c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00a      	beq.n	800447c <HAL_UART_IRQHandler+0xd0>
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	2b00      	cmp	r3, #0
 800446e:	d005      	beq.n	800447c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004474:	f043 0204 	orr.w	r2, r3, #4
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800447c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447e:	f003 0308 	and.w	r3, r3, #8
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00f      	beq.n	80044a6 <HAL_UART_IRQHandler+0xfa>
 8004486:	6a3b      	ldr	r3, [r7, #32]
 8004488:	f003 0320 	and.w	r3, r3, #32
 800448c:	2b00      	cmp	r3, #0
 800448e:	d104      	bne.n	800449a <HAL_UART_IRQHandler+0xee>
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	2b00      	cmp	r3, #0
 8004498:	d005      	beq.n	80044a6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449e:	f043 0208 	orr.w	r2, r3, #8
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f000 811f 	beq.w	80046ee <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b2:	f003 0320 	and.w	r3, r3, #32
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d007      	beq.n	80044ca <HAL_UART_IRQHandler+0x11e>
 80044ba:	6a3b      	ldr	r3, [r7, #32]
 80044bc:	f003 0320 	and.w	r3, r3, #32
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d002      	beq.n	80044ca <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 fb6e 	bl	8004ba6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	695b      	ldr	r3, [r3, #20]
 80044d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d4:	2b40      	cmp	r3, #64	; 0x40
 80044d6:	bf0c      	ite	eq
 80044d8:	2301      	moveq	r3, #1
 80044da:	2300      	movne	r3, #0
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e4:	f003 0308 	and.w	r3, r3, #8
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d102      	bne.n	80044f2 <HAL_UART_IRQHandler+0x146>
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d031      	beq.n	8004556 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 faae 	bl	8004a54 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004502:	2b40      	cmp	r3, #64	; 0x40
 8004504:	d123      	bne.n	800454e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	695a      	ldr	r2, [r3, #20]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004514:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451a:	2b00      	cmp	r3, #0
 800451c:	d013      	beq.n	8004546 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004522:	4a77      	ldr	r2, [pc, #476]	; (8004700 <HAL_UART_IRQHandler+0x354>)
 8004524:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452a:	4618      	mov	r0, r3
 800452c:	f7fd fd86 	bl	800203c <HAL_DMA_Abort_IT>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d016      	beq.n	8004564 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004540:	4610      	mov	r0, r2
 8004542:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004544:	e00e      	b.n	8004564 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 f8fa 	bl	8004740 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800454c:	e00a      	b.n	8004564 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 f8f6 	bl	8004740 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004554:	e006      	b.n	8004564 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f8f2 	bl	8004740 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004562:	e0c4      	b.n	80046ee <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004564:	bf00      	nop
    return;
 8004566:	e0c2      	b.n	80046ee <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456c:	2b01      	cmp	r3, #1
 800456e:	f040 80a2 	bne.w	80046b6 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004574:	f003 0310 	and.w	r3, r3, #16
 8004578:	2b00      	cmp	r3, #0
 800457a:	f000 809c 	beq.w	80046b6 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800457e:	6a3b      	ldr	r3, [r7, #32]
 8004580:	f003 0310 	and.w	r3, r3, #16
 8004584:	2b00      	cmp	r3, #0
 8004586:	f000 8096 	beq.w	80046b6 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800458a:	2300      	movs	r3, #0
 800458c:	60fb      	str	r3, [r7, #12]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	60fb      	str	r3, [r7, #12]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	60fb      	str	r3, [r7, #12]
 800459e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045aa:	2b40      	cmp	r3, #64	; 0x40
 80045ac:	d14f      	bne.n	800464e <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80045b8:	8a3b      	ldrh	r3, [r7, #16]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	f000 8099 	beq.w	80046f2 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80045c4:	8a3a      	ldrh	r2, [r7, #16]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	f080 8093 	bcs.w	80046f2 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	8a3a      	ldrh	r2, [r7, #16]
 80045d0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d6:	69db      	ldr	r3, [r3, #28]
 80045d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045dc:	d02b      	beq.n	8004636 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68da      	ldr	r2, [r3, #12]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045ec:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	695a      	ldr	r2, [r3, #20]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f022 0201 	bic.w	r2, r2, #1
 80045fc:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	695a      	ldr	r2, [r3, #20]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800460c:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2220      	movs	r2, #32
 8004612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68da      	ldr	r2, [r3, #12]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f022 0210 	bic.w	r2, r2, #16
 800462a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004630:	4618      	mov	r0, r3
 8004632:	f7fd fc93 	bl	8001f5c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800463e:	b29b      	uxth	r3, r3
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	b29b      	uxth	r3, r3
 8004644:	4619      	mov	r1, r3
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 f884 	bl	8004754 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800464c:	e051      	b.n	80046f2 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004656:	b29b      	uxth	r3, r3
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004660:	b29b      	uxth	r3, r3
 8004662:	2b00      	cmp	r3, #0
 8004664:	d047      	beq.n	80046f6 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8004666:	8a7b      	ldrh	r3, [r7, #18]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d044      	beq.n	80046f6 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68da      	ldr	r2, [r3, #12]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800467a:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	695a      	ldr	r2, [r3, #20]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f022 0201 	bic.w	r2, r2, #1
 800468a:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2220      	movs	r2, #32
 8004690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68da      	ldr	r2, [r3, #12]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f022 0210 	bic.w	r2, r2, #16
 80046a8:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80046aa:	8a7b      	ldrh	r3, [r7, #18]
 80046ac:	4619      	mov	r1, r3
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 f850 	bl	8004754 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80046b4:	e01f      	b.n	80046f6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80046b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d008      	beq.n	80046d2 <HAL_UART_IRQHandler+0x326>
 80046c0:	6a3b      	ldr	r3, [r7, #32]
 80046c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d003      	beq.n	80046d2 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 fa03 	bl	8004ad6 <UART_Transmit_IT>
    return;
 80046d0:	e012      	b.n	80046f8 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80046d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00d      	beq.n	80046f8 <HAL_UART_IRQHandler+0x34c>
 80046dc:	6a3b      	ldr	r3, [r7, #32]
 80046de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d008      	beq.n	80046f8 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 fa45 	bl	8004b76 <UART_EndTransmit_IT>
    return;
 80046ec:	e004      	b.n	80046f8 <HAL_UART_IRQHandler+0x34c>
    return;
 80046ee:	bf00      	nop
 80046f0:	e002      	b.n	80046f8 <HAL_UART_IRQHandler+0x34c>
      return;
 80046f2:	bf00      	nop
 80046f4:	e000      	b.n	80046f8 <HAL_UART_IRQHandler+0x34c>
      return;
 80046f6:	bf00      	nop
  }
}
 80046f8:	3728      	adds	r7, #40	; 0x28
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	08004aaf 	.word	0x08004aaf

08004704 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800470c:	bf00      	nop
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004720:	bf00      	nop
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004734:	bf00      	nop
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004748:	bf00      	nop
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	460b      	mov	r3, r1
 800475e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004760:	bf00      	nop
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004778:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004784:	2b00      	cmp	r3, #0
 8004786:	d12a      	bne.n	80047de <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68da      	ldr	r2, [r3, #12]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800479c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	695a      	ldr	r2, [r3, #20]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f022 0201 	bic.w	r2, r2, #1
 80047ac:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	695a      	ldr	r2, [r3, #20]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047bc:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2220      	movs	r2, #32
 80047c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d107      	bne.n	80047de <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68da      	ldr	r2, [r3, #12]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f022 0210 	bic.w	r2, r2, #16
 80047dc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d106      	bne.n	80047f4 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80047ea:	4619      	mov	r1, r3
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f7ff ffb1 	bl	8004754 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80047f2:	e002      	b.n	80047fa <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	f7ff ff8f 	bl	8004718 <HAL_UART_RxCpltCallback>
}
 80047fa:	bf00      	nop
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004802:	b580      	push	{r7, lr}
 8004804:	b084      	sub	sp, #16
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004814:	2b01      	cmp	r3, #1
 8004816:	d108      	bne.n	800482a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800481c:	085b      	lsrs	r3, r3, #1
 800481e:	b29b      	uxth	r3, r3
 8004820:	4619      	mov	r1, r3
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	f7ff ff96 	bl	8004754 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004828:	e002      	b.n	8004830 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800482a:	68f8      	ldr	r0, [r7, #12]
 800482c:	f7ff ff7e 	bl	800472c <HAL_UART_RxHalfCpltCallback>
}
 8004830:	bf00      	nop
 8004832:	3710      	adds	r7, #16
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004840:	2300      	movs	r3, #0
 8004842:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004848:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	695b      	ldr	r3, [r3, #20]
 8004850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004854:	2b80      	cmp	r3, #128	; 0x80
 8004856:	bf0c      	ite	eq
 8004858:	2301      	moveq	r3, #1
 800485a:	2300      	movne	r3, #0
 800485c:	b2db      	uxtb	r3, r3
 800485e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004866:	b2db      	uxtb	r3, r3
 8004868:	2b21      	cmp	r3, #33	; 0x21
 800486a:	d108      	bne.n	800487e <UART_DMAError+0x46>
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d005      	beq.n	800487e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	2200      	movs	r2, #0
 8004876:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004878:	68b8      	ldr	r0, [r7, #8]
 800487a:	f000 f8d5 	bl	8004a28 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	695b      	ldr	r3, [r3, #20]
 8004884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004888:	2b40      	cmp	r3, #64	; 0x40
 800488a:	bf0c      	ite	eq
 800488c:	2301      	moveq	r3, #1
 800488e:	2300      	movne	r3, #0
 8004890:	b2db      	uxtb	r3, r3
 8004892:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800489a:	b2db      	uxtb	r3, r3
 800489c:	2b22      	cmp	r3, #34	; 0x22
 800489e:	d108      	bne.n	80048b2 <UART_DMAError+0x7a>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d005      	beq.n	80048b2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	2200      	movs	r2, #0
 80048aa:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80048ac:	68b8      	ldr	r0, [r7, #8]
 80048ae:	f000 f8d1 	bl	8004a54 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b6:	f043 0210 	orr.w	r2, r3, #16
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048be:	68b8      	ldr	r0, [r7, #8]
 80048c0:	f7ff ff3e 	bl	8004740 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048c4:	bf00      	nop
 80048c6:	3710      	adds	r7, #16
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	603b      	str	r3, [r7, #0]
 80048d8:	4613      	mov	r3, r2
 80048da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048dc:	e02c      	b.n	8004938 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e4:	d028      	beq.n	8004938 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d007      	beq.n	80048fc <UART_WaitOnFlagUntilTimeout+0x30>
 80048ec:	f7fd f8ee 	bl	8001acc <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	69ba      	ldr	r2, [r7, #24]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d21d      	bcs.n	8004938 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	68da      	ldr	r2, [r3, #12]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800490a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	695a      	ldr	r2, [r3, #20]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f022 0201 	bic.w	r2, r2, #1
 800491a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2220      	movs	r2, #32
 8004920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2220      	movs	r2, #32
 8004928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e00f      	b.n	8004958 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	4013      	ands	r3, r2
 8004942:	68ba      	ldr	r2, [r7, #8]
 8004944:	429a      	cmp	r2, r3
 8004946:	bf0c      	ite	eq
 8004948:	2301      	moveq	r3, #1
 800494a:	2300      	movne	r3, #0
 800494c:	b2db      	uxtb	r3, r3
 800494e:	461a      	mov	r2, r3
 8004950:	79fb      	ldrb	r3, [r7, #7]
 8004952:	429a      	cmp	r2, r3
 8004954:	d0c3      	beq.n	80048de <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b086      	sub	sp, #24
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	4613      	mov	r3, r2
 800496c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800496e:	68ba      	ldr	r2, [r7, #8]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	88fa      	ldrh	r2, [r7, #6]
 8004978:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2222      	movs	r2, #34	; 0x22
 8004984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498c:	4a23      	ldr	r2, [pc, #140]	; (8004a1c <UART_Start_Receive_DMA+0xbc>)
 800498e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004994:	4a22      	ldr	r2, [pc, #136]	; (8004a20 <UART_Start_Receive_DMA+0xc0>)
 8004996:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499c:	4a21      	ldr	r2, [pc, #132]	; (8004a24 <UART_Start_Receive_DMA+0xc4>)
 800499e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a4:	2200      	movs	r2, #0
 80049a6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80049a8:	f107 0308 	add.w	r3, r7, #8
 80049ac:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	3304      	adds	r3, #4
 80049b8:	4619      	mov	r1, r3
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	88fb      	ldrh	r3, [r7, #6]
 80049c0:	f7fd fa74 	bl	8001eac <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80049c4:	2300      	movs	r3, #0
 80049c6:	613b      	str	r3, [r7, #16]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	613b      	str	r3, [r7, #16]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	613b      	str	r3, [r7, #16]
 80049d8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68da      	ldr	r2, [r3, #12]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049f0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	695a      	ldr	r2, [r3, #20]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f042 0201 	orr.w	r2, r2, #1
 8004a00:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	695a      	ldr	r2, [r3, #20]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a10:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3718      	adds	r7, #24
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	0800476d 	.word	0x0800476d
 8004a20:	08004803 	.word	0x08004803
 8004a24:	08004839 	.word	0x08004839

08004a28 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68da      	ldr	r2, [r3, #12]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004a3e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2220      	movs	r2, #32
 8004a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004a48:	bf00      	nop
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68da      	ldr	r2, [r3, #12]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004a6a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	695a      	ldr	r2, [r3, #20]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f022 0201 	bic.w	r2, r2, #1
 8004a7a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d107      	bne.n	8004a94 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68da      	ldr	r2, [r3, #12]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f022 0210 	bic.w	r2, r2, #16
 8004a92:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2220      	movs	r2, #32
 8004a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004aa2:	bf00      	nop
 8004aa4:	370c      	adds	r7, #12
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr

08004aae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004aae:	b580      	push	{r7, lr}
 8004ab0:	b084      	sub	sp, #16
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f7ff fe39 	bl	8004740 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ace:	bf00      	nop
 8004ad0:	3710      	adds	r7, #16
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}

08004ad6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004ad6:	b480      	push	{r7}
 8004ad8:	b085      	sub	sp, #20
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2b21      	cmp	r3, #33	; 0x21
 8004ae8:	d13e      	bne.n	8004b68 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004af2:	d114      	bne.n	8004b1e <UART_Transmit_IT+0x48>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d110      	bne.n	8004b1e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a1b      	ldr	r3, [r3, #32]
 8004b00:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	881b      	ldrh	r3, [r3, #0]
 8004b06:	461a      	mov	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b10:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	1c9a      	adds	r2, r3, #2
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	621a      	str	r2, [r3, #32]
 8004b1c:	e008      	b.n	8004b30 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a1b      	ldr	r3, [r3, #32]
 8004b22:	1c59      	adds	r1, r3, #1
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	6211      	str	r1, [r2, #32]
 8004b28:	781a      	ldrb	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	3b01      	subs	r3, #1
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d10f      	bne.n	8004b64 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68da      	ldr	r2, [r3, #12]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b52:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68da      	ldr	r2, [r3, #12]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b62:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004b64:	2300      	movs	r3, #0
 8004b66:	e000      	b.n	8004b6a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004b68:	2302      	movs	r3, #2
  }
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3714      	adds	r7, #20
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr

08004b76 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b76:	b580      	push	{r7, lr}
 8004b78:	b082      	sub	sp, #8
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68da      	ldr	r2, [r3, #12]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b8c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2220      	movs	r2, #32
 8004b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f7ff fdb4 	bl	8004704 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3708      	adds	r7, #8
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b084      	sub	sp, #16
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b22      	cmp	r3, #34	; 0x22
 8004bb8:	f040 8087 	bne.w	8004cca <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bc4:	d117      	bne.n	8004bf6 <UART_Receive_IT+0x50>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d113      	bne.n	8004bf6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd6:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bee:	1c9a      	adds	r2, r3, #2
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	629a      	str	r2, [r3, #40]	; 0x28
 8004bf4:	e026      	b.n	8004c44 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfa:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c08:	d007      	beq.n	8004c1a <UART_Receive_IT+0x74>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d10a      	bne.n	8004c28 <UART_Receive_IT+0x82>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d106      	bne.n	8004c28 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	b2da      	uxtb	r2, r3
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	701a      	strb	r2, [r3, #0]
 8004c26:	e008      	b.n	8004c3a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c34:	b2da      	uxtb	r2, r3
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c3e:	1c5a      	adds	r2, r3, #1
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	4619      	mov	r1, r3
 8004c52:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d136      	bne.n	8004cc6 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68da      	ldr	r2, [r3, #12]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f022 0220 	bic.w	r2, r2, #32
 8004c66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68da      	ldr	r2, [r3, #12]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	695a      	ldr	r2, [r3, #20]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f022 0201 	bic.w	r2, r2, #1
 8004c86:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d10e      	bne.n	8004cb6 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68da      	ldr	r2, [r3, #12]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f022 0210 	bic.w	r2, r2, #16
 8004ca6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004cac:	4619      	mov	r1, r3
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f7ff fd50 	bl	8004754 <HAL_UARTEx_RxEventCallback>
 8004cb4:	e002      	b.n	8004cbc <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f7ff fd2e 	bl	8004718 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	e002      	b.n	8004ccc <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	e000      	b.n	8004ccc <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004cca:	2302      	movs	r3, #2
  }
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3710      	adds	r7, #16
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cd8:	b09f      	sub	sp, #124	; 0x7c
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ce8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cea:	68d9      	ldr	r1, [r3, #12]
 8004cec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	ea40 0301 	orr.w	r3, r0, r1
 8004cf4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004cf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cf8:	689a      	ldr	r2, [r3, #8]
 8004cfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	431a      	orrs	r2, r3
 8004d00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d02:	695b      	ldr	r3, [r3, #20]
 8004d04:	431a      	orrs	r2, r3
 8004d06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d08:	69db      	ldr	r3, [r3, #28]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004d0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004d18:	f021 010c 	bic.w	r1, r1, #12
 8004d1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d22:	430b      	orrs	r3, r1
 8004d24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	695b      	ldr	r3, [r3, #20]
 8004d2c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d32:	6999      	ldr	r1, [r3, #24]
 8004d34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	ea40 0301 	orr.w	r3, r0, r1
 8004d3c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	4bc5      	ldr	r3, [pc, #788]	; (8005058 <UART_SetConfig+0x384>)
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d004      	beq.n	8004d52 <UART_SetConfig+0x7e>
 8004d48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	4bc3      	ldr	r3, [pc, #780]	; (800505c <UART_SetConfig+0x388>)
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d103      	bne.n	8004d5a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d52:	f7fe fe5d 	bl	8003a10 <HAL_RCC_GetPCLK2Freq>
 8004d56:	6778      	str	r0, [r7, #116]	; 0x74
 8004d58:	e002      	b.n	8004d60 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d5a:	f7fe fe45 	bl	80039e8 <HAL_RCC_GetPCLK1Freq>
 8004d5e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d62:	69db      	ldr	r3, [r3, #28]
 8004d64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d68:	f040 80b6 	bne.w	8004ed8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d6e:	461c      	mov	r4, r3
 8004d70:	f04f 0500 	mov.w	r5, #0
 8004d74:	4622      	mov	r2, r4
 8004d76:	462b      	mov	r3, r5
 8004d78:	1891      	adds	r1, r2, r2
 8004d7a:	6439      	str	r1, [r7, #64]	; 0x40
 8004d7c:	415b      	adcs	r3, r3
 8004d7e:	647b      	str	r3, [r7, #68]	; 0x44
 8004d80:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d84:	1912      	adds	r2, r2, r4
 8004d86:	eb45 0303 	adc.w	r3, r5, r3
 8004d8a:	f04f 0000 	mov.w	r0, #0
 8004d8e:	f04f 0100 	mov.w	r1, #0
 8004d92:	00d9      	lsls	r1, r3, #3
 8004d94:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d98:	00d0      	lsls	r0, r2, #3
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	1911      	adds	r1, r2, r4
 8004da0:	6639      	str	r1, [r7, #96]	; 0x60
 8004da2:	416b      	adcs	r3, r5
 8004da4:	667b      	str	r3, [r7, #100]	; 0x64
 8004da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	461a      	mov	r2, r3
 8004dac:	f04f 0300 	mov.w	r3, #0
 8004db0:	1891      	adds	r1, r2, r2
 8004db2:	63b9      	str	r1, [r7, #56]	; 0x38
 8004db4:	415b      	adcs	r3, r3
 8004db6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004db8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004dbc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004dc0:	f7fb fa02 	bl	80001c8 <__aeabi_uldivmod>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	4ba5      	ldr	r3, [pc, #660]	; (8005060 <UART_SetConfig+0x38c>)
 8004dca:	fba3 2302 	umull	r2, r3, r3, r2
 8004dce:	095b      	lsrs	r3, r3, #5
 8004dd0:	011e      	lsls	r6, r3, #4
 8004dd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dd4:	461c      	mov	r4, r3
 8004dd6:	f04f 0500 	mov.w	r5, #0
 8004dda:	4622      	mov	r2, r4
 8004ddc:	462b      	mov	r3, r5
 8004dde:	1891      	adds	r1, r2, r2
 8004de0:	6339      	str	r1, [r7, #48]	; 0x30
 8004de2:	415b      	adcs	r3, r3
 8004de4:	637b      	str	r3, [r7, #52]	; 0x34
 8004de6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004dea:	1912      	adds	r2, r2, r4
 8004dec:	eb45 0303 	adc.w	r3, r5, r3
 8004df0:	f04f 0000 	mov.w	r0, #0
 8004df4:	f04f 0100 	mov.w	r1, #0
 8004df8:	00d9      	lsls	r1, r3, #3
 8004dfa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004dfe:	00d0      	lsls	r0, r2, #3
 8004e00:	4602      	mov	r2, r0
 8004e02:	460b      	mov	r3, r1
 8004e04:	1911      	adds	r1, r2, r4
 8004e06:	65b9      	str	r1, [r7, #88]	; 0x58
 8004e08:	416b      	adcs	r3, r5
 8004e0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	461a      	mov	r2, r3
 8004e12:	f04f 0300 	mov.w	r3, #0
 8004e16:	1891      	adds	r1, r2, r2
 8004e18:	62b9      	str	r1, [r7, #40]	; 0x28
 8004e1a:	415b      	adcs	r3, r3
 8004e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e22:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004e26:	f7fb f9cf 	bl	80001c8 <__aeabi_uldivmod>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	4b8c      	ldr	r3, [pc, #560]	; (8005060 <UART_SetConfig+0x38c>)
 8004e30:	fba3 1302 	umull	r1, r3, r3, r2
 8004e34:	095b      	lsrs	r3, r3, #5
 8004e36:	2164      	movs	r1, #100	; 0x64
 8004e38:	fb01 f303 	mul.w	r3, r1, r3
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	00db      	lsls	r3, r3, #3
 8004e40:	3332      	adds	r3, #50	; 0x32
 8004e42:	4a87      	ldr	r2, [pc, #540]	; (8005060 <UART_SetConfig+0x38c>)
 8004e44:	fba2 2303 	umull	r2, r3, r2, r3
 8004e48:	095b      	lsrs	r3, r3, #5
 8004e4a:	005b      	lsls	r3, r3, #1
 8004e4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e50:	441e      	add	r6, r3
 8004e52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e54:	4618      	mov	r0, r3
 8004e56:	f04f 0100 	mov.w	r1, #0
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	1894      	adds	r4, r2, r2
 8004e60:	623c      	str	r4, [r7, #32]
 8004e62:	415b      	adcs	r3, r3
 8004e64:	627b      	str	r3, [r7, #36]	; 0x24
 8004e66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e6a:	1812      	adds	r2, r2, r0
 8004e6c:	eb41 0303 	adc.w	r3, r1, r3
 8004e70:	f04f 0400 	mov.w	r4, #0
 8004e74:	f04f 0500 	mov.w	r5, #0
 8004e78:	00dd      	lsls	r5, r3, #3
 8004e7a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004e7e:	00d4      	lsls	r4, r2, #3
 8004e80:	4622      	mov	r2, r4
 8004e82:	462b      	mov	r3, r5
 8004e84:	1814      	adds	r4, r2, r0
 8004e86:	653c      	str	r4, [r7, #80]	; 0x50
 8004e88:	414b      	adcs	r3, r1
 8004e8a:	657b      	str	r3, [r7, #84]	; 0x54
 8004e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	461a      	mov	r2, r3
 8004e92:	f04f 0300 	mov.w	r3, #0
 8004e96:	1891      	adds	r1, r2, r2
 8004e98:	61b9      	str	r1, [r7, #24]
 8004e9a:	415b      	adcs	r3, r3
 8004e9c:	61fb      	str	r3, [r7, #28]
 8004e9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ea2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004ea6:	f7fb f98f 	bl	80001c8 <__aeabi_uldivmod>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	460b      	mov	r3, r1
 8004eae:	4b6c      	ldr	r3, [pc, #432]	; (8005060 <UART_SetConfig+0x38c>)
 8004eb0:	fba3 1302 	umull	r1, r3, r3, r2
 8004eb4:	095b      	lsrs	r3, r3, #5
 8004eb6:	2164      	movs	r1, #100	; 0x64
 8004eb8:	fb01 f303 	mul.w	r3, r1, r3
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	00db      	lsls	r3, r3, #3
 8004ec0:	3332      	adds	r3, #50	; 0x32
 8004ec2:	4a67      	ldr	r2, [pc, #412]	; (8005060 <UART_SetConfig+0x38c>)
 8004ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec8:	095b      	lsrs	r3, r3, #5
 8004eca:	f003 0207 	and.w	r2, r3, #7
 8004ece:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4432      	add	r2, r6
 8004ed4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ed6:	e0b9      	b.n	800504c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ed8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004eda:	461c      	mov	r4, r3
 8004edc:	f04f 0500 	mov.w	r5, #0
 8004ee0:	4622      	mov	r2, r4
 8004ee2:	462b      	mov	r3, r5
 8004ee4:	1891      	adds	r1, r2, r2
 8004ee6:	6139      	str	r1, [r7, #16]
 8004ee8:	415b      	adcs	r3, r3
 8004eea:	617b      	str	r3, [r7, #20]
 8004eec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004ef0:	1912      	adds	r2, r2, r4
 8004ef2:	eb45 0303 	adc.w	r3, r5, r3
 8004ef6:	f04f 0000 	mov.w	r0, #0
 8004efa:	f04f 0100 	mov.w	r1, #0
 8004efe:	00d9      	lsls	r1, r3, #3
 8004f00:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f04:	00d0      	lsls	r0, r2, #3
 8004f06:	4602      	mov	r2, r0
 8004f08:	460b      	mov	r3, r1
 8004f0a:	eb12 0804 	adds.w	r8, r2, r4
 8004f0e:	eb43 0905 	adc.w	r9, r3, r5
 8004f12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	4618      	mov	r0, r3
 8004f18:	f04f 0100 	mov.w	r1, #0
 8004f1c:	f04f 0200 	mov.w	r2, #0
 8004f20:	f04f 0300 	mov.w	r3, #0
 8004f24:	008b      	lsls	r3, r1, #2
 8004f26:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004f2a:	0082      	lsls	r2, r0, #2
 8004f2c:	4640      	mov	r0, r8
 8004f2e:	4649      	mov	r1, r9
 8004f30:	f7fb f94a 	bl	80001c8 <__aeabi_uldivmod>
 8004f34:	4602      	mov	r2, r0
 8004f36:	460b      	mov	r3, r1
 8004f38:	4b49      	ldr	r3, [pc, #292]	; (8005060 <UART_SetConfig+0x38c>)
 8004f3a:	fba3 2302 	umull	r2, r3, r3, r2
 8004f3e:	095b      	lsrs	r3, r3, #5
 8004f40:	011e      	lsls	r6, r3, #4
 8004f42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f44:	4618      	mov	r0, r3
 8004f46:	f04f 0100 	mov.w	r1, #0
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	1894      	adds	r4, r2, r2
 8004f50:	60bc      	str	r4, [r7, #8]
 8004f52:	415b      	adcs	r3, r3
 8004f54:	60fb      	str	r3, [r7, #12]
 8004f56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f5a:	1812      	adds	r2, r2, r0
 8004f5c:	eb41 0303 	adc.w	r3, r1, r3
 8004f60:	f04f 0400 	mov.w	r4, #0
 8004f64:	f04f 0500 	mov.w	r5, #0
 8004f68:	00dd      	lsls	r5, r3, #3
 8004f6a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004f6e:	00d4      	lsls	r4, r2, #3
 8004f70:	4622      	mov	r2, r4
 8004f72:	462b      	mov	r3, r5
 8004f74:	1814      	adds	r4, r2, r0
 8004f76:	64bc      	str	r4, [r7, #72]	; 0x48
 8004f78:	414b      	adcs	r3, r1
 8004f7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	4618      	mov	r0, r3
 8004f82:	f04f 0100 	mov.w	r1, #0
 8004f86:	f04f 0200 	mov.w	r2, #0
 8004f8a:	f04f 0300 	mov.w	r3, #0
 8004f8e:	008b      	lsls	r3, r1, #2
 8004f90:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004f94:	0082      	lsls	r2, r0, #2
 8004f96:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004f9a:	f7fb f915 	bl	80001c8 <__aeabi_uldivmod>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	4b2f      	ldr	r3, [pc, #188]	; (8005060 <UART_SetConfig+0x38c>)
 8004fa4:	fba3 1302 	umull	r1, r3, r3, r2
 8004fa8:	095b      	lsrs	r3, r3, #5
 8004faa:	2164      	movs	r1, #100	; 0x64
 8004fac:	fb01 f303 	mul.w	r3, r1, r3
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	011b      	lsls	r3, r3, #4
 8004fb4:	3332      	adds	r3, #50	; 0x32
 8004fb6:	4a2a      	ldr	r2, [pc, #168]	; (8005060 <UART_SetConfig+0x38c>)
 8004fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8004fbc:	095b      	lsrs	r3, r3, #5
 8004fbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fc2:	441e      	add	r6, r3
 8004fc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f04f 0100 	mov.w	r1, #0
 8004fcc:	4602      	mov	r2, r0
 8004fce:	460b      	mov	r3, r1
 8004fd0:	1894      	adds	r4, r2, r2
 8004fd2:	603c      	str	r4, [r7, #0]
 8004fd4:	415b      	adcs	r3, r3
 8004fd6:	607b      	str	r3, [r7, #4]
 8004fd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fdc:	1812      	adds	r2, r2, r0
 8004fde:	eb41 0303 	adc.w	r3, r1, r3
 8004fe2:	f04f 0400 	mov.w	r4, #0
 8004fe6:	f04f 0500 	mov.w	r5, #0
 8004fea:	00dd      	lsls	r5, r3, #3
 8004fec:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004ff0:	00d4      	lsls	r4, r2, #3
 8004ff2:	4622      	mov	r2, r4
 8004ff4:	462b      	mov	r3, r5
 8004ff6:	eb12 0a00 	adds.w	sl, r2, r0
 8004ffa:	eb43 0b01 	adc.w	fp, r3, r1
 8004ffe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	4618      	mov	r0, r3
 8005004:	f04f 0100 	mov.w	r1, #0
 8005008:	f04f 0200 	mov.w	r2, #0
 800500c:	f04f 0300 	mov.w	r3, #0
 8005010:	008b      	lsls	r3, r1, #2
 8005012:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005016:	0082      	lsls	r2, r0, #2
 8005018:	4650      	mov	r0, sl
 800501a:	4659      	mov	r1, fp
 800501c:	f7fb f8d4 	bl	80001c8 <__aeabi_uldivmod>
 8005020:	4602      	mov	r2, r0
 8005022:	460b      	mov	r3, r1
 8005024:	4b0e      	ldr	r3, [pc, #56]	; (8005060 <UART_SetConfig+0x38c>)
 8005026:	fba3 1302 	umull	r1, r3, r3, r2
 800502a:	095b      	lsrs	r3, r3, #5
 800502c:	2164      	movs	r1, #100	; 0x64
 800502e:	fb01 f303 	mul.w	r3, r1, r3
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	011b      	lsls	r3, r3, #4
 8005036:	3332      	adds	r3, #50	; 0x32
 8005038:	4a09      	ldr	r2, [pc, #36]	; (8005060 <UART_SetConfig+0x38c>)
 800503a:	fba2 2303 	umull	r2, r3, r2, r3
 800503e:	095b      	lsrs	r3, r3, #5
 8005040:	f003 020f 	and.w	r2, r3, #15
 8005044:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4432      	add	r2, r6
 800504a:	609a      	str	r2, [r3, #8]
}
 800504c:	bf00      	nop
 800504e:	377c      	adds	r7, #124	; 0x7c
 8005050:	46bd      	mov	sp, r7
 8005052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005056:	bf00      	nop
 8005058:	40011000 	.word	0x40011000
 800505c:	40011400 	.word	0x40011400
 8005060:	51eb851f 	.word	0x51eb851f

08005064 <__libc_init_array>:
 8005064:	b570      	push	{r4, r5, r6, lr}
 8005066:	4d0d      	ldr	r5, [pc, #52]	; (800509c <__libc_init_array+0x38>)
 8005068:	4c0d      	ldr	r4, [pc, #52]	; (80050a0 <__libc_init_array+0x3c>)
 800506a:	1b64      	subs	r4, r4, r5
 800506c:	10a4      	asrs	r4, r4, #2
 800506e:	2600      	movs	r6, #0
 8005070:	42a6      	cmp	r6, r4
 8005072:	d109      	bne.n	8005088 <__libc_init_array+0x24>
 8005074:	4d0b      	ldr	r5, [pc, #44]	; (80050a4 <__libc_init_array+0x40>)
 8005076:	4c0c      	ldr	r4, [pc, #48]	; (80050a8 <__libc_init_array+0x44>)
 8005078:	f000 f820 	bl	80050bc <_init>
 800507c:	1b64      	subs	r4, r4, r5
 800507e:	10a4      	asrs	r4, r4, #2
 8005080:	2600      	movs	r6, #0
 8005082:	42a6      	cmp	r6, r4
 8005084:	d105      	bne.n	8005092 <__libc_init_array+0x2e>
 8005086:	bd70      	pop	{r4, r5, r6, pc}
 8005088:	f855 3b04 	ldr.w	r3, [r5], #4
 800508c:	4798      	blx	r3
 800508e:	3601      	adds	r6, #1
 8005090:	e7ee      	b.n	8005070 <__libc_init_array+0xc>
 8005092:	f855 3b04 	ldr.w	r3, [r5], #4
 8005096:	4798      	blx	r3
 8005098:	3601      	adds	r6, #1
 800509a:	e7f2      	b.n	8005082 <__libc_init_array+0x1e>
 800509c:	080050fc 	.word	0x080050fc
 80050a0:	080050fc 	.word	0x080050fc
 80050a4:	080050fc 	.word	0x080050fc
 80050a8:	08005100 	.word	0x08005100

080050ac <memset>:
 80050ac:	4402      	add	r2, r0
 80050ae:	4603      	mov	r3, r0
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d100      	bne.n	80050b6 <memset+0xa>
 80050b4:	4770      	bx	lr
 80050b6:	f803 1b01 	strb.w	r1, [r3], #1
 80050ba:	e7f9      	b.n	80050b0 <memset+0x4>

080050bc <_init>:
 80050bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050be:	bf00      	nop
 80050c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050c2:	bc08      	pop	{r3}
 80050c4:	469e      	mov	lr, r3
 80050c6:	4770      	bx	lr

080050c8 <_fini>:
 80050c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ca:	bf00      	nop
 80050cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ce:	bc08      	pop	{r3}
 80050d0:	469e      	mov	lr, r3
 80050d2:	4770      	bx	lr
